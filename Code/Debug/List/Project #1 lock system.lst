
AVRASM ver. 2.1.30  E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm Sat Dec 16 11:52:43 2023

E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm(1417): warning: Register r5 already defined by the .DEF directive
E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm(1418): warning: Register r4 already defined by the .DEF directive
E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm(1419): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.52 
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x37
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0095 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G102:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G102:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x4:
000033 0160
000034 006f
000035 00cb
000036 0165      	.DB  LOW(_0x3),HIGH(_0x3),0x6F,0x0,0xCB,0x0,LOW(_0x3+5),HIGH(_0x3+5)
000037 007e
000038 0081
000039 016b
00003a 0080      	.DB  0x7E,0x0,0x81,0x0,LOW(_0x3+11),HIGH(_0x3+11),0x80,0x0
00003b 0145
00003c 016f
00003d 0082
00003e 01aa      	.DB  0x45,0x1,LOW(_0x3+15),HIGH(_0x3+15),0x82,0x0,0xAA,0x1
00003f 0174
000040 0084
E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm(1460): warning: .cseg .db misalignment - padding zero byte
000041 003f      	.DB  LOW(_0x3+20),HIGH(_0x3+20),0x84,0x0,0x3F
                 _0x0:
000042 7250
000043 666f
000044 4100
000045 6d68      	.DB  0x50,0x72,0x6F,0x66,0x0,0x41,0x68,0x6D
000046 6465
000047 4100
000048 726d
000049 4100      	.DB  0x65,0x64,0x0,0x41,0x6D,0x72,0x0,0x41
00004a 6564
00004b 006c
00004c 6d4f
00004d 7265      	.DB  0x64,0x65,0x6C,0x0,0x4F,0x6D,0x65,0x72
00004e 4500
00004f 746e
000050 7265
000051 7920      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x79
000052 756f
000053 2072
000054 4449
000055 203a      	.DB  0x6F,0x75,0x72,0x20,0x49,0x44,0x3A,0x20
000056 4500
000057 746e
000058 7265
000059 7920      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x79
00005a 756f
00005b 2072
00005c 4350
00005d 203a      	.DB  0x6F,0x75,0x72,0x20,0x50,0x43,0x3A,0x20
00005e 5700
00005f 6c65
000060 6f63
000061 656d      	.DB  0x0,0x57,0x65,0x6C,0x63,0x6F,0x6D,0x65
000062 5300
000063 726f
000064 7972
000065 7720      	.DB  0x0,0x53,0x6F,0x72,0x72,0x79,0x20,0x77
000066 6f72
000067 676e
000068 5020
000069 0043      	.DB  0x72,0x6F,0x6E,0x67,0x20,0x50,0x43,0x0
00006a 7257
00006b 6e6f
00006c 2067
00006d 4449      	.DB  0x57,0x72,0x6F,0x6E,0x67,0x20,0x49,0x44
E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm(1473): warning: .cseg .db misalignment - padding zero byte
00006e 0000      	.DB  0x0
                 _0x2000003:
00006f c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000070 0005      	.DW  0x05
000071 0160      	.DW  _0x3
000072 0084      	.DW  _0x0*2
                 
000073 0006      	.DW  0x06
000074 0165      	.DW  _0x3+5
000075 0089      	.DW  _0x0*2+5
                 
000076 0004      	.DW  0x04
000077 016b      	.DW  _0x3+11
000078 008f      	.DW  _0x0*2+11
                 
000079 0005      	.DW  0x05
00007a 016f      	.DW  _0x3+15
00007b 0093      	.DW  _0x0*2+15
                 
00007c 0005      	.DW  0x05
00007d 0174      	.DW  _0x3+20
00007e 0098      	.DW  _0x0*2+20
                 
00007f 001d      	.DW  0x1D
000080 01b9      	.DW  _users
000081 0066      	.DW  _0x4*2
                 
000082 0010      	.DW  0x10
000083 0179      	.DW  _0xC
000084 009d      	.DW  _0x0*2+25
                 
000085 0010      	.DW  0x10
000086 0189      	.DW  _0xC+16
000087 00ad      	.DW  _0x0*2+41
                 
000088 0008      	.DW  0x08
000089 0199      	.DW  _0xC+32
00008a 00bd      	.DW  _0x0*2+57
                 
00008b 000f      	.DW  0x0F
00008c 01a1      	.DW  _0xC+40
00008d 00c5      	.DW  _0x0*2+65
                 
00008e 0009      	.DW  0x09
00008f 01b0      	.DW  _0xC+55
000090 00d4      	.DW  _0x0*2+80
                 
000091 0002      	.DW  0x02
000092 01d7      	.DW  __base_y_G100
000093 00de      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000094 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000095 94f8      	CLI
000096 27ee      	CLR  R30
000097 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000098 e0f1      	LDI  R31,1
000099 bffb      	OUT  GICR,R31
00009a bfeb      	OUT  GICR,R30
00009b bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00009c e08d      	LDI  R24,(14-2)+1
00009d e0a2      	LDI  R26,2
00009e 27bb      	CLR  R27
                 __CLEAR_REG:
00009f 93ed      	ST   X+,R30
0000a0 958a      	DEC  R24
0000a1 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000a2 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000a3 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000a4 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000a5 93ed      	ST   X+,R30
0000a6 9701      	SBIW R24,1
0000a7 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000a8 eee0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000a9 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000aa 9185      	LPM  R24,Z+
0000ab 9195      	LPM  R25,Z+
0000ac 9700      	SBIW R24,0
0000ad f061      	BREQ __GLOBAL_INI_END
0000ae 91a5      	LPM  R26,Z+
0000af 91b5      	LPM  R27,Z+
0000b0 9005      	LPM  R0,Z+
0000b1 9015      	LPM  R1,Z+
0000b2 01bf      	MOVW R22,R30
0000b3 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000b4 9005      	LPM  R0,Z+
0000b5 920d      	ST   X+,R0
0000b6 9701      	SBIW R24,1
0000b7 f7e1      	BRNE __GLOBAL_INI_LOOP
0000b8 01fb      	MOVW R30,R22
0000b9 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000ba e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000bb bfed      	OUT  SPL,R30
0000bc e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000bd bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000be e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000bf e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000c0 940c 00c2 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;char keypad();
                 ;unsigned char EE_Read(unsigned int address);
                 ;void EE_Write(unsigned int address, unsigned char data);
                 ;void EE_WriteString(unsigned int address, const char *str);
                 ;void initializeUsers();
                 ;void displayMessage(char *message, int delay_ms_value);
                 ;int enterValueWithKeypad();
                 
                 	.DSEG
                 _0x3:
000160           	.BYTE 0x19
                 ;void main(void)
                 ; 0000 002B {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 002C // Set keypad ports
                 ; 0000 002D DDRC = 0b00000111;
0000c2 e0e7      	LDI  R30,LOW(7)
0000c3 bbe4      	OUT  0x14,R30
                 ; 0000 002E PORTC = 0b11111000;
0000c4 efe8      	LDI  R30,LOW(248)
0000c5 bbe5      	OUT  0x15,R30
                 ; 0000 002F 
                 ; 0000 0030 // Initialize the LCD
                 ; 0000 0031 lcd_init(16);
0000c6 e1a0      	LDI  R26,LOW(16)
0000c7 d181      	RCALL _lcd_init
                 ; 0000 0032 
                 ; 0000 0033 // Set the door as input (now by default the door is closed)
                 ; 0000 0034 DDRB .0 = 0;
0000c8 98b8      	CBI  0x17,0
                 ; 0000 0035 PORTB .0 = 1; // turn on pull up resistance
0000c9 9ac0      	SBI  0x18,0
                 ; 0000 0036 
                 ; 0000 0037 // Initialize user data in EEPROM
                 ; 0000 0038 initializeUsers();
0000ca d0d5      	RCALL _initializeUsers
                 ; 0000 0039 
                 ; 0000 003A while (1)
                 _0x9:
                 ; 0000 003B {
                 ; 0000 003C int enteredID;
                 ; 0000 003D User currentUser;
                 ; 0000 003E // Search for the entered ID in EEPROM
                 ; 0000 003F unsigned int address = 0;
                 ; 0000 0040 int userFound = 0;
                 ; 0000 0041 int i;
                 ; 0000 0042 
                 ; 0000 0043 displayMessage("Enter your ID: ", 1000);
0000cb 972e      	SBIW R28,14
0000cc e0e0      	LDI  R30,LOW(0)
0000cd 83ea      	STD  Y+2,R30
0000ce 83eb      	STD  Y+3,R30
0000cf 83ec      	STD  Y+4,R30
0000d0 83ed      	STD  Y+5,R30
                 ;	enteredID -> Y+12
                 ;	currentUser -> Y+6
                 ;	address -> Y+4
                 ;	userFound -> Y+2
                 ;	i -> Y+0
                +
0000d1 e7e9     +LDI R30 , LOW ( _0xC + ( 0 ) )
0000d2 e0f1     +LDI R31 , HIGH ( _0xC + ( 0 ) )
                 	__POINTW1MN _0xC,0
0000d3 d1a0      	RCALL SUBOPT_0x0
                 ; 0000 0044 
                 ; 0000 0045 enteredID = enterValueWithKeypad();
0000d4 87ec      	STD  Y+12,R30
0000d5 87fd      	STD  Y+12+1,R31
                 ; 0000 0046 
                 ; 0000 0047 for (i = 0; i < sizeof(users); ++i)
0000d6 e0e0      	LDI  R30,LOW(0)
0000d7 83e8      	STD  Y+0,R30
0000d8 83e9      	STD  Y+0+1,R30
                 _0xE:
0000d9 81a8      	LD   R26,Y
0000da 81b9      	LDD  R27,Y+1
0000db 975e      	SBIW R26,30
0000dc f4d4      	BRGE _0xF
                 ; 0000 0048 {
                 ; 0000 0049 address += sizeof(users[i].name);  // Increment for name
0000dd d19c      	RCALL SUBOPT_0x1
                 ; 0000 004A currentUser.id = EE_Read(address);
0000de 87e8      	STD  Y+8,R30
0000df 87f9      	STD  Y+8+1,R31
                 ; 0000 004B if (currentUser.id == enteredID)
0000e0 85ec      	LDD  R30,Y+12
0000e1 85fd      	LDD  R31,Y+12+1
0000e2 85a8      	LDD  R26,Y+8
0000e3 85b9      	LDD  R27,Y+8+1
0000e4 17ea      	CP   R30,R26
0000e5 07fb      	CPC  R31,R27
0000e6 f441      	BRNE _0x10
                 ; 0000 004C {
                 ; 0000 004D userFound = 1; // set the flag = 1 if we found it
0000e7 e0e1      	LDI  R30,LOW(1)
0000e8 e0f0      	LDI  R31,HIGH(1)
0000e9 83ea      	STD  Y+2,R30
0000ea 83fb      	STD  Y+2+1,R31
                 ; 0000 004E address += sizeof(users[i].id);    // Increment for ID
0000eb d18e      	RCALL SUBOPT_0x1
                 ; 0000 004F currentUser.pc = EE_Read(address); // store current user pc
0000ec 87ea      	STD  Y+10,R30
0000ed 87fb      	STD  Y+10+1,R31
                 ; 0000 0050 break;
0000ee c008      	RJMP _0xF
                 ; 0000 0051 }
                 ; 0000 0052 address += sizeof(users[i].id);    // Increment for ID
                 _0x10:
0000ef d194      	RCALL SUBOPT_0x2
                 ; 0000 0053 address += sizeof(users[i].pc);    // Increment for PC
0000f0 d193      	RCALL SUBOPT_0x2
                 ; 0000 0054 }
0000f1 81e8      	LD   R30,Y
0000f2 81f9      	LDD  R31,Y+1
0000f3 9631      	ADIW R30,1
0000f4 83e8      	ST   Y,R30
0000f5 83f9      	STD  Y+1,R31
0000f6 cfe2      	RJMP _0xE
                 _0xF:
                 ; 0000 0055 
                 ; 0000 0056 if (userFound)
0000f7 81ea      	LDD  R30,Y+2
0000f8 81fb      	LDD  R31,Y+2+1
0000f9 9730      	SBIW R30,0
0000fa f0b9      	BREQ _0x11
                 ; 0000 0057 {
                 ; 0000 0058 int enteredPC;
                 ; 0000 0059 
                 ; 0000 005A displayMessage("Enter your PC: ", 1000);
0000fb 9722      	SBIW R28,2
                 ;	enteredID -> Y+14
                 ;	currentUser -> Y+8
                 ;	address -> Y+6
                 ;	userFound -> Y+4
                 ;	i -> Y+2
                 ;	enteredPC -> Y+0
                +
0000fc e8e9     +LDI R30 , LOW ( _0xC + ( 16 ) )
0000fd e0f1     +LDI R31 , HIGH ( _0xC + ( 16 ) )
                 	__POINTW1MN _0xC,16
0000fe d175      	RCALL SUBOPT_0x0
                 ; 0000 005B 
                 ; 0000 005C enteredPC = enterValueWithKeypad();
0000ff 83e8      	ST   Y,R30
000100 83f9      	STD  Y+1,R31
                 ; 0000 005D 
                 ; 0000 005E if (currentUser.pc == enteredPC)
000101 85ac      	LDD  R26,Y+12
000102 85bd      	LDD  R27,Y+12+1
000103 17ea      	CP   R30,R26
000104 07fb      	CPC  R31,R27
000105 f419      	BRNE _0x12
                 ; 0000 005F {
                 ; 0000 0060 displayMessage("Welcome", 1000);
                +
000106 e9e9     +LDI R30 , LOW ( _0xC + ( 32 ) )
000107 e0f1     +LDI R31 , HIGH ( _0xC + ( 32 ) )
                 	__POINTW1MN _0xC,32
000108 c002      	RJMP _0x76
                 ; 0000 0061 // Open the door
                 ; 0000 0062 }
                 ; 0000 0063 else
                 _0x12:
                 ; 0000 0064 displayMessage("Sorry wrong PC", 1000);
                +
000109 eae1     +LDI R30 , LOW ( _0xC + ( 40 ) )
00010a e0f1     +LDI R31 , HIGH ( _0xC + ( 40 ) )
                 	__POINTW1MN _0xC,40
                 _0x76:
00010b 93fa      	ST   -Y,R31
00010c 93ea      	ST   -Y,R30
00010d eea8      	LDI  R26,LOW(1000)
00010e e0b3      	LDI  R27,HIGH(1000)
00010f d0af      	RCALL _displayMessage
                 ; 0000 0065 }
000110 9622      	ADIW R28,2
                 ; 0000 0066 else
000111 c007      	RJMP _0x14
                 _0x11:
                 ; 0000 0067 {
                 ; 0000 0068 displayMessage("Wrong ID", 1000);
                +
000112 ebe0     +LDI R30 , LOW ( _0xC + ( 55 ) )
000113 e0f1     +LDI R31 , HIGH ( _0xC + ( 55 ) )
                 	__POINTW1MN _0xC,55
000114 93fa      	ST   -Y,R31
000115 93ea      	ST   -Y,R30
000116 eea8      	LDI  R26,LOW(1000)
000117 e0b3      	LDI  R27,HIGH(1000)
000118 d0a6      	RCALL _displayMessage
                 ; 0000 0069 // Two peeps alarm
                 ; 0000 006A }
                 _0x14:
                 ; 0000 006B 
                 ; 0000 006C delay_ms(2000);
000119 eda0      	LDI  R26,LOW(2000)
00011a e0b7      	LDI  R27,HIGH(2000)
00011b d195      	RCALL _delay_ms
                 ; 0000 006D }
00011c 962e      	ADIW R28,14
00011d cfad      	RJMP _0x9
                 ; 0000 006E }
                 _0x15:
00011e cfff      	RJMP _0x15
                 ; .FEND
                 
                 	.DSEG
                 _0xC:
000179           	.BYTE 0x40
                 ;char keypad()
                 ; 0000 0071 {
                 
                 	.CSEG
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 0072 while (1)
                 _0x16:
                 ; 0000 0073 {
                 ; 0000 0074 PORTC .0 = 0;
00011f 98a8      	CBI  0x15,0
                 ; 0000 0075 PORTC .1 = 1;
000120 9aa9      	SBI  0x15,1
                 ; 0000 0076 PORTC .2 = 1;
000121 9aaa      	SBI  0x15,2
                 ; 0000 0077 
                 ; 0000 0078 switch (PINC)
000122 b3e3      	IN   R30,0x13
                 ; 0000 0079 {
                 ; 0000 007A case 0b11110110:
000123 3fe6      	CPI  R30,LOW(0xF6)
000124 f421      	BRNE _0x22
                 ; 0000 007B while (PINC .3 == 0);
                 _0x23:
000125 9b9b      	SBIS 0x13,3
000126 cffe      	RJMP _0x23
                 ; 0000 007C return 1;
000127 e0e1      	LDI  R30,LOW(1)
000128 9508      	RET
                 ; 0000 007D case 0b11101110:
                 _0x22:
000129 3eee      	CPI  R30,LOW(0xEE)
00012a f421      	BRNE _0x26
                 ; 0000 007E while (PINC .4 == 0);
                 _0x27:
00012b 9b9c      	SBIS 0x13,4
00012c cffe      	RJMP _0x27
                 ; 0000 007F return 4;
00012d e0e4      	LDI  R30,LOW(4)
00012e 9508      	RET
                 ; 0000 0080 case 0b11011110:
                 _0x26:
00012f 3dee      	CPI  R30,LOW(0xDE)
000130 f421      	BRNE _0x2A
                 ; 0000 0081 while (PINC .5 == 0);
                 _0x2B:
000131 9b9d      	SBIS 0x13,5
000132 cffe      	RJMP _0x2B
                 ; 0000 0082 return 7;
000133 e0e7      	LDI  R30,LOW(7)
000134 9508      	RET
                 ; 0000 0083 case 0b10111110:
                 _0x2A:
000135 3bee      	CPI  R30,LOW(0xBE)
000136 f421      	BRNE _0x21
                 ; 0000 0084 while (PINC .6 == 0);
                 _0x2F:
000137 9b9e      	SBIS 0x13,6
000138 cffe      	RJMP _0x2F
                 ; 0000 0085 return 10;
000139 e0ea      	LDI  R30,LOW(10)
00013a 9508      	RET
                 ; 0000 0086 }
                 _0x21:
                 ; 0000 0087 
                 ; 0000 0088 PORTC .0 = 1;
00013b 9aa8      	SBI  0x15,0
                 ; 0000 0089 PORTC .1 = 0;
00013c 98a9      	CBI  0x15,1
                 ; 0000 008A PORTC .2 = 1;
00013d 9aaa      	SBI  0x15,2
                 ; 0000 008B 
                 ; 0000 008C switch (PINC)
00013e b3e3      	IN   R30,0x13
                 ; 0000 008D {
                 ; 0000 008E case 0b11110101:
00013f 3fe5      	CPI  R30,LOW(0xF5)
000140 f421      	BRNE _0x3B
                 ; 0000 008F while (PINC .3 == 0);
                 _0x3C:
000141 9b9b      	SBIS 0x13,3
000142 cffe      	RJMP _0x3C
                 ; 0000 0090 return 2;
000143 e0e2      	LDI  R30,LOW(2)
000144 9508      	RET
                 ; 0000 0091 case 0b11101101:
                 _0x3B:
000145 3eed      	CPI  R30,LOW(0xED)
000146 f421      	BRNE _0x3F
                 ; 0000 0092 while (PINC .4 == 0);
                 _0x40:
000147 9b9c      	SBIS 0x13,4
000148 cffe      	RJMP _0x40
                 ; 0000 0093 return 5;
000149 e0e5      	LDI  R30,LOW(5)
00014a 9508      	RET
                 ; 0000 0094 case 0b11011101:
                 _0x3F:
00014b 3ded      	CPI  R30,LOW(0xDD)
00014c f421      	BRNE _0x43
                 ; 0000 0095 while (PINC .5 == 0);
                 _0x44:
00014d 9b9d      	SBIS 0x13,5
00014e cffe      	RJMP _0x44
                 ; 0000 0096 return 8;
00014f e0e8      	LDI  R30,LOW(8)
000150 9508      	RET
                 ; 0000 0097 case 0b10111101:
                 _0x43:
000151 3bed      	CPI  R30,LOW(0xBD)
000152 f421      	BRNE _0x3A
                 ; 0000 0098 while (PINC .6 == 0);
                 _0x48:
000153 9b9e      	SBIS 0x13,6
000154 cffe      	RJMP _0x48
                 ; 0000 0099 return 0;
000155 e0e0      	LDI  R30,LOW(0)
000156 9508      	RET
                 ; 0000 009A }
                 _0x3A:
                 ; 0000 009B 
                 ; 0000 009C PORTC .0 = 1;
000157 9aa8      	SBI  0x15,0
                 ; 0000 009D PORTC .1 = 1;
000158 9aa9      	SBI  0x15,1
                 ; 0000 009E PORTC .2 = 0;
000159 98aa      	CBI  0x15,2
                 ; 0000 009F 
                 ; 0000 00A0 switch (PINC)
00015a b3e3      	IN   R30,0x13
                 ; 0000 00A1 {
                 ; 0000 00A2 case 0b11110011:
00015b 3fe3      	CPI  R30,LOW(0xF3)
00015c f421      	BRNE _0x54
                 ; 0000 00A3 while (PINC .3 == 0);
                 _0x55:
00015d 9b9b      	SBIS 0x13,3
00015e cffe      	RJMP _0x55
                 ; 0000 00A4 return 3;
00015f e0e3      	LDI  R30,LOW(3)
000160 9508      	RET
                 ; 0000 00A5 case 0b11101011:
                 _0x54:
000161 3eeb      	CPI  R30,LOW(0xEB)
000162 f421      	BRNE _0x58
                 ; 0000 00A6 while (PINC .4 == 0);
                 _0x59:
000163 9b9c      	SBIS 0x13,4
000164 cffe      	RJMP _0x59
                 ; 0000 00A7 return 6;
000165 e0e6      	LDI  R30,LOW(6)
000166 9508      	RET
                 ; 0000 00A8 case 0b11011011:
                 _0x58:
000167 3deb      	CPI  R30,LOW(0xDB)
000168 f421      	BRNE _0x5C
                 ; 0000 00A9 while (PINC .5 == 0);
                 _0x5D:
000169 9b9d      	SBIS 0x13,5
00016a cffe      	RJMP _0x5D
                 ; 0000 00AA return 9;
00016b e0e9      	LDI  R30,LOW(9)
00016c 9508      	RET
                 ; 0000 00AB case 0b10111011:
                 _0x5C:
00016d 3beb      	CPI  R30,LOW(0xBB)
00016e f421      	BRNE _0x53
                 ; 0000 00AC while (PINC .6 == 0);
                 _0x61:
00016f 9b9e      	SBIS 0x13,6
000170 cffe      	RJMP _0x61
                 ; 0000 00AD return 11;
000171 e0eb      	LDI  R30,LOW(11)
000172 9508      	RET
                 ; 0000 00AE }
                 _0x53:
                 ; 0000 00AF }
000173 cfab      	RJMP _0x16
                 ; 0000 00B0 }
                 ; .FEND
                 ;unsigned char EE_Read(unsigned int address)
                 ; 0000 00B3 {
                 _EE_Read:
                 ; .FSTART _EE_Read
                 ; 0000 00B4 while (EECR .1 == 1); // Wait till EEPROM is ready
000174 931a      	ST   -Y,R17
000175 930a      	ST   -Y,R16
000176 018d      	MOVW R16,R26
                 ;	address -> R16,R17
                 _0x64:
000177 99e1      	SBIC 0x1C,1
000178 cffe      	RJMP _0x64
                 ; 0000 00B5 EEAR = address;       // Prepare the address you want to read from
                +
000179 bb1f     +OUT 30 + 1 , R17
00017a bb0e     +OUT 30 , R16
                 	__OUTWR 16,17,30
                 ; 0000 00B6 EECR .0 = 1;          // Execute read command
00017b 9ae0      	SBI  0x1C,0
                 ; 0000 00B7 return EEDR;
00017c b3ed      	IN   R30,0x1D
00017d 9109      	LD   R16,Y+
00017e 9119      	LD   R17,Y+
00017f 9508      	RET
                 ; 0000 00B8 }
                 ; .FEND
                 ;void EE_Write(unsigned int address, unsigned char data)
                 ; 0000 00BB {
                 _EE_Write:
                 ; .FSTART _EE_Write
                 ; 0000 00BC while (EECR .1 == 1); // Wait till EEPROM is ready
000180 d126      	RCALL __SAVELOCR4
000181 2f1a      	MOV  R17,R26
                +
000182 812c     +LDD R18 , Y + 4
000183 813d     +LDD R19 , Y + 4 + 1
                 	__GETWRS 18,19,4
                 ;	address -> R18,R19
                 ;	data -> R17
                 _0x69:
000184 99e1      	SBIC 0x1C,1
000185 cffe      	RJMP _0x69
                 ; 0000 00BD EEAR = address;       // Prepare the address you want to read from
                +
000186 bb3f     +OUT 30 + 1 , R19
000187 bb2e     +OUT 30 , R18
                 	__OUTWR 18,19,30
                 ; 0000 00BE EEDR = data;          // Prepare the data you want to write in the address above
000188 bb1d      	OUT  0x1D,R17
                 ; 0000 00BF EECR .2 = 1;          // Master write enable
000189 9ae2      	SBI  0x1C,2
                 ; 0000 00C0 EECR .1 = 1;          // Write Enable
00018a 9ae1      	SBI  0x1C,1
                 ; 0000 00C1 }
00018b c039      	RJMP _0x2080003
                 ; .FEND
                 ;void EE_WriteString(unsigned int address, const char *str)
                 ; 0000 00C4 {
                 _EE_WriteString:
                 ; .FSTART _EE_WriteString
                 ; 0000 00C5 // Write each character of the string to EEPROM
                 ; 0000 00C6 while (*str)
00018c d0fd      	RCALL SUBOPT_0x3
                 ;	address -> R18,R19
                 ;	*str -> R16,R17
                 _0x70:
00018d 01d8      	MOVW R26,R16
00018e 91ec      	LD   R30,X
00018f 30e0      	CPI  R30,0
000190 f051      	BREQ _0x72
                 ; 0000 00C7 EE_Write(address++, *str++);
000191 01f9      	MOVW R30,R18
                +
000192 5f2f     +SUBI R18 , LOW ( - 1 )
000193 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000194 93fa      	ST   -Y,R31
000195 93ea      	ST   -Y,R30
                +
000196 5f0f     +SUBI R16 , LOW ( - 1 )
000197 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000198 91ac      	LD   R26,X
000199 dfe6      	RCALL _EE_Write
00019a cff2      	RJMP _0x70
                 _0x72:
                 ; 0000 00C9 EE_Write(address, '\0');
00019b 933a      	ST   -Y,R19
00019c 932a      	ST   -Y,R18
00019d e0a0      	LDI  R26,LOW(0)
00019e dfe1      	RCALL _EE_Write
                 ; 0000 00CA }
00019f c025      	RJMP _0x2080003
                 ; .FEND
                 ;void initializeUsers()
                 ; 0000 00CE {
                 _initializeUsers:
                 ; .FSTART _initializeUsers
                 ; 0000 00CF unsigned int address = 0;
                 ; 0000 00D0 int i;
                 ; 0000 00D1 for (i = 0; i < sizeof(users); ++i)
0001a0 d106      	RCALL __SAVELOCR4
                 ;	address -> R16,R17
                 ;	i -> R18,R19
                +
0001a1 e000     +LDI R16 , LOW ( 0 )
0001a2 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0001a3 e020     +LDI R18 , LOW ( 0 )
0001a4 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x74:
                +
0001a5 312e     +CPI R18 , LOW ( 30 )
0001a6 e0e0     +LDI R30 , HIGH ( 30 )
0001a7 073e     +CPC R19 , R30
                 	__CPWRN 18,19,30
0001a8 f4ac      	BRGE _0x75
                 ; 0000 00D2 {
                 ; 0000 00D3 EE_WriteString(address, users[i].name);
0001a9 d0e5      	RCALL SUBOPT_0x4
0001aa 54e7      	SUBI R30,LOW(-_users)
0001ab 4ffe      	SBCI R31,HIGH(-_users)
0001ac 01df      	MOVW R26,R30
0001ad 91ed      	LD   R30,X+
0001ae 91fd      	LD   R31,X+
0001af 01df      	MOVW R26,R30
0001b0 dfdb      	RCALL _EE_WriteString
                 ; 0000 00D4 address += sizeof(users[i].name);  // Increment for name
                +
0001b1 5f0e     +SUBI R16 , LOW ( - 2 )
0001b2 4f1f     +SBCI R17 , HIGH ( - 2 )
                 	__ADDWRN 16,17,2
                 ; 0000 00D5 
                 ; 0000 00D6 EE_Write(address, users[i].id);
0001b3 d0db      	RCALL SUBOPT_0x4
                +
0001b4 54e5     +SUBI R30 , LOW ( - _users - ( 2 ) )
0001b5 4ffe     +SBCI R31 , HIGH ( - _users - ( 2 ) )
                 	__ADDW1MN _users,2
0001b6 d0e0      	RCALL SUBOPT_0x5
                 ; 0000 00D7 address += sizeof(users[i].id);    // Increment for ID
                 ; 0000 00D8 
                 ; 0000 00D9 EE_Write(address, users[i].pc);
0001b7 d0d7      	RCALL SUBOPT_0x4
                +
0001b8 54e3     +SUBI R30 , LOW ( - _users - ( 4 ) )
0001b9 4ffe     +SBCI R31 , HIGH ( - _users - ( 4 ) )
                 	__ADDW1MN _users,4
0001ba d0dc      	RCALL SUBOPT_0x5
                 ; 0000 00DA address += sizeof(users[i].pc);    // Increment for PC
                 ; 0000 00DB }
                +
0001bb 5f2f     +SUBI R18 , LOW ( - 1 )
0001bc 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0001bd cfe7      	RJMP _0x74
                 _0x75:
                 ; 0000 00DC }
0001be c087      	RJMP _0x2080002
                 ; .FEND
                 ;void displayMessage(char *message, int delay_ms_value)
                 ; 0000 00E0 {
                 _displayMessage:
                 ; .FSTART _displayMessage
                 ; 0000 00E1 lcd_clear();
0001bf d0ca      	RCALL SUBOPT_0x3
                 ;	*message -> R18,R19
                 ;	delay_ms_value -> R16,R17
0001c0 d05c      	RCALL _lcd_clear
                 ; 0000 00E2 lcd_puts(message);
0001c1 01d9      	MOVW R26,R18
0001c2 d077      	RCALL _lcd_puts
                 ; 0000 00E3 delay_ms(delay_ms_value);
0001c3 01d8      	MOVW R26,R16
0001c4 d0ec      	RCALL _delay_ms
                 ; 0000 00E4 }
                 _0x2080003:
0001c5 d0e6      	RCALL __LOADLOCR4
0001c6 9626      	ADIW R28,6
0001c7 9508      	RET
                 ; .FEND
                 ;int enterValueWithKeypad()
                 ; 0000 00E7 {
                 _enterValueWithKeypad:
                 ; .FSTART _enterValueWithKeypad
                 ; 0000 00E8 char digit1 = keypad();
                 ; 0000 00E9 char digit2 = keypad();
                 ; 0000 00EA char digit3 = keypad();
                 ; 0000 00EB 
                 ; 0000 00EC lcd_putchar(digit1 + '0');
0001c8 d0de      	RCALL __SAVELOCR4
                 ;	digit1 -> R17
                 ;	digit2 -> R16
                 ;	digit3 -> R19
0001c9 df55      	RCALL _keypad
0001ca 2f1e      	MOV  R17,R30
0001cb df53      	RCALL _keypad
0001cc 2f0e      	MOV  R16,R30
0001cd df51      	RCALL _keypad
0001ce 2f3e      	MOV  R19,R30
0001cf 2fa1      	MOV  R26,R17
0001d0 5da0      	SUBI R26,-LOW(48)
0001d1 d055      	RCALL _lcd_putchar
                 ; 0000 00ED 
                 ; 0000 00EE lcd_putchar(digit2 + '0');
0001d2 2fa0      	MOV  R26,R16
0001d3 5da0      	SUBI R26,-LOW(48)
0001d4 d052      	RCALL _lcd_putchar
                 ; 0000 00EF 
                 ; 0000 00F0 lcd_putchar(digit3 + '0');
0001d5 2fa3      	MOV  R26,R19
0001d6 5da0      	SUBI R26,-LOW(48)
0001d7 d04f      	RCALL _lcd_putchar
                 ; 0000 00F1 
                 ; 0000 00F2 delay_ms(1000);
0001d8 eea8      	LDI  R26,LOW(1000)
0001d9 e0b3      	LDI  R27,HIGH(1000)
0001da d0d6      	RCALL _delay_ms
                 ; 0000 00F3 
                 ; 0000 00F4 return (digit1 * 100) + (digit2 * 10) + digit3;
0001db e6e4      	LDI  R30,LOW(100)
0001dc 9fe1      	MUL  R30,R17
0001dd 01f0      	MOVW R30,R0
0001de 01df      	MOVW R26,R30
0001df e0ea      	LDI  R30,LOW(10)
0001e0 9fe0      	MUL  R30,R16
0001e1 01f0      	MOVW R30,R0
0001e2 0fae      	ADD  R26,R30
0001e3 1fbf      	ADC  R27,R31
0001e4 2fe3      	MOV  R30,R19
0001e5 e0f0      	LDI  R31,0
0001e6 0fea      	ADD  R30,R26
0001e7 1ffb      	ADC  R31,R27
0001e8 c05d      	RJMP _0x2080002
                 ; 0000 00F5 }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0001e9 931a      	ST   -Y,R17
0001ea 2f1a      	MOV  R17,R26
0001eb b3eb      	IN   R30,0x1B
0001ec 70ef      	ANDI R30,LOW(0xF)
0001ed 2fae      	MOV  R26,R30
0001ee 2fe1      	MOV  R30,R17
0001ef 7fe0      	ANDI R30,LOW(0xF0)
0001f0 2bea      	OR   R30,R26
0001f1 bbeb      	OUT  0x1B,R30
                +
0001f2 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001f3 958a     +DEC R24
0001f4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001f5 9ada      	SBI  0x1B,2
                +
0001f6 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001f7 958a     +DEC R24
0001f8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001f9 98da      	CBI  0x1B,2
                +
0001fa e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0001fb 958a     +DEC R24
0001fc f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0001fd c074      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001fe 93aa      	ST   -Y,R26
0001ff 81a8      	LD   R26,Y
000200 dfe8      	RCALL __lcd_write_nibble_G100
000201 81e8          ld    r30,y
000202 95e2          swap  r30
000203 83e8          st    y,r30
000204 81a8      	LD   R26,Y
000205 dfe3      	RCALL __lcd_write_nibble_G100
                +
000206 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000207 958a     +DEC R24
000208 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000209 9621      	ADIW R28,1
00020a 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00020b 931a      	ST   -Y,R17
00020c 930a      	ST   -Y,R16
00020d 2f1a      	MOV  R17,R26
00020e 810a      	LDD  R16,Y+2
00020f 2fe1      	MOV  R30,R17
000210 e0f0      	LDI  R31,0
000211 52e9      	SUBI R30,LOW(-__base_y_G100)
000212 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000213 81e0      	LD   R30,Z
000214 0fe0      	ADD  R30,R16
000215 2fae      	MOV  R26,R30
000216 dfe7      	RCALL __lcd_write_data
000217 2e50      	MOV  R5,R16
000218 2e41      	MOV  R4,R17
000219 8119      	LDD  R17,Y+1
00021a 8108      	LDD  R16,Y+0
00021b 9623      	ADIW R28,3
00021c 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00021d e0a2      	LDI  R26,LOW(2)
00021e d07d      	RCALL SUBOPT_0x6
00021f e0ac      	LDI  R26,LOW(12)
000220 dfdd      	RCALL __lcd_write_data
000221 e0a1      	LDI  R26,LOW(1)
000222 d079      	RCALL SUBOPT_0x6
000223 e0e0      	LDI  R30,LOW(0)
000224 2e4e      	MOV  R4,R30
000225 2e5e      	MOV  R5,R30
000226 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000227 931a      	ST   -Y,R17
000228 2f1a      	MOV  R17,R26
000229 301a      	CPI  R17,10
00022a f011      	BREQ _0x2000005
00022b 1457      	CP   R5,R7
00022c f038      	BRLO _0x2000004
                 _0x2000005:
00022d e0e0      	LDI  R30,LOW(0)
00022e 93ea      	ST   -Y,R30
00022f 9443      	INC  R4
000230 2da4      	MOV  R26,R4
000231 dfd9      	RCALL _lcd_gotoxy
000232 301a      	CPI  R17,10
000233 f1f1      	BREQ _0x2080001
                 _0x2000004:
000234 9453      	INC  R5
000235 9ad8      	SBI  0x1B,0
000236 2fa1      	MOV  R26,R17
000237 dfc6      	RCALL __lcd_write_data
000238 98d8      	CBI  0x1B,0
000239 c038      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00023a d06c      	RCALL __SAVELOCR4
00023b 019d      	MOVW R18,R26
                 _0x2000008:
00023c 01d9      	MOVW R26,R18
                +
00023d 5f2f     +SUBI R18 , LOW ( - 1 )
00023e 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00023f 91ec      	LD   R30,X
000240 2f1e      	MOV  R17,R30
000241 30e0      	CPI  R30,0
000242 f019      	BREQ _0x200000A
000243 2fa1      	MOV  R26,R17
000244 dfe2      	RCALL _lcd_putchar
000245 cff6      	RJMP _0x2000008
                 _0x200000A:
                 _0x2080002:
000246 d065      	RCALL __LOADLOCR4
000247 9624      	ADIW R28,4
000248 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000249 931a      	ST   -Y,R17
00024a 2f1a      	MOV  R17,R26
00024b b3ea      	IN   R30,0x1A
00024c 6fe0      	ORI  R30,LOW(0xF0)
00024d bbea      	OUT  0x1A,R30
00024e 9ad2      	SBI  0x1A,2
00024f 9ad0      	SBI  0x1A,0
000250 9ad1      	SBI  0x1A,1
000251 98da      	CBI  0x1B,2
000252 98d8      	CBI  0x1B,0
000253 98d9      	CBI  0x1B,1
000254 2e71      	MOV  R7,R17
000255 2fe1      	MOV  R30,R17
000256 58e0      	SUBI R30,-LOW(128)
                +
000257 93e0 01d9+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000259 2fe1      	MOV  R30,R17
00025a 54e0      	SUBI R30,-LOW(192)
                +
00025b 93e0 01da+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
00025d e1a4      	LDI  R26,LOW(20)
00025e e0b0      	LDI  R27,0
00025f d051      	RCALL _delay_ms
000260 d03f      	RCALL SUBOPT_0x7
000261 d03e      	RCALL SUBOPT_0x7
000262 d03d      	RCALL SUBOPT_0x7
000263 e2a0      	LDI  R26,LOW(32)
000264 df84      	RCALL __lcd_write_nibble_G100
                +
000265 ec88     +LDI R24 , LOW ( 200 )
000266 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000267 9701     +SBIW R24 , 1
000268 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000269 e2a8      	LDI  R26,LOW(40)
00026a df93      	RCALL __lcd_write_data
00026b e0a4      	LDI  R26,LOW(4)
00026c df91      	RCALL __lcd_write_data
00026d e8a5      	LDI  R26,LOW(133)
00026e df8f      	RCALL __lcd_write_data
00026f e0a6      	LDI  R26,LOW(6)
000270 df8d      	RCALL __lcd_write_data
000271 dfab      	RCALL _lcd_clear
                 _0x2080001:
000272 9119      	LD   R17,Y+
000273 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _users:
0001b9           	.BYTE 0x1E
                 __base_y_G100:
0001d7           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000274 93fa      	ST   -Y,R31
000275 93ea      	ST   -Y,R30
000276 eea8      	LDI  R26,LOW(1000)
000277 e0b3      	LDI  R27,HIGH(1000)
000278 df46      	RCALL _displayMessage
000279 cf4e      	RJMP _enterValueWithKeypad
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
00027a 81ec      	LDD  R30,Y+4
00027b 81fd      	LDD  R31,Y+4+1
00027c 9632      	ADIW R30,2
00027d 83ec      	STD  Y+4,R30
00027e 83fd      	STD  Y+4+1,R31
00027f 81ac      	LDD  R26,Y+4
000280 81bd      	LDD  R27,Y+4+1
000281 def2      	RCALL _EE_Read
000282 e0f0      	LDI  R31,0
000283 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
000284 81ec      	LDD  R30,Y+4
000285 81fd      	LDD  R31,Y+4+1
000286 9632      	ADIW R30,2
000287 83ec      	STD  Y+4,R30
000288 83fd      	STD  Y+4+1,R31
000289 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00028a d01c      	RCALL __SAVELOCR4
00028b 018d      	MOVW R16,R26
                +
00028c 812c     +LDD R18 , Y + 4
00028d 813d     +LDD R19 , Y + 4 + 1
                 	__GETWRS 18,19,4
00028e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x4:
00028f 931a      	ST   -Y,R17
000290 930a      	ST   -Y,R16
                +
000291 e0a6     +LDI R26 , 6
000292 9fa2     +MUL R26 , R18
000293 01f0     +MOVW R30 , R0
000294 9fa3     +MUL R26 , R19
000295 0df0     +ADD R31 , R0
                 	__MULBNWRU 18,19,6
000296 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000297 81a0      	LD   R26,Z
000298 dee7      	RCALL _EE_Write
                +
000299 5f0e     +SUBI R16 , LOW ( - 2 )
00029a 4f1f     +SBCI R17 , HIGH ( - 2 )
                 	__ADDWRN 16,17,2
00029b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00029c df61      	RCALL __lcd_write_data
00029d e0a3      	LDI  R26,LOW(3)
00029e e0b0      	LDI  R27,0
00029f c011      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x7:
0002a0 e3a0      	LDI  R26,LOW(48)
0002a1 df47      	RCALL __lcd_write_nibble_G100
                +
0002a2 ec88     +LDI R24 , LOW ( 200 )
0002a3 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002a4 9701     +SBIW R24 , 1
0002a5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002a6 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR4:
0002a7 933a      	ST   -Y,R19
                 __SAVELOCR3:
0002a8 932a      	ST   -Y,R18
                 __SAVELOCR2:
0002a9 931a      	ST   -Y,R17
0002aa 930a      	ST   -Y,R16
0002ab 9508      	RET
                 
                 __LOADLOCR4:
0002ac 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0002ad 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0002ae 8119      	LDD  R17,Y+1
0002af 8108      	LD   R16,Y
0002b0 9508      	RET
                 
                 _delay_ms:
0002b1 9610      	adiw r26,0
0002b2 f039      	breq __delay_ms1
                 __delay_ms0:
0002b3 95a8      	wdr
                +
0002b4 ed80     +LDI R24 , LOW ( 0x7D0 )
0002b5 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0002b6 9701     +SBIW R24 , 1
0002b7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0002b8 9711      	sbiw r26,1
0002b9 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002ba 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   8 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  22 r17:  36 r18:  16 r19:  15 r20:   0 r21:   0 r22:   2 r23:   0 
r24:  21 r25:   5 r26:  67 r27:  17 r28:   9 r29:   1 r30: 140 r31:  39 
x  :   8 y  :  83 z  :   9 
Registers used: 21 out of 35 (60.0%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   4 
adiw  :  10 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   7 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  25 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   2 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   3 cpc   :   3 cpi   :  17 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   6 inc   :   2 jmp   :  22 ld    :  16 ldd   :  26 ldi   :  88 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  27 movw  :  17 
mul   :   4 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   1 out   :  15 pop   :   0 push  :   0 rcall :  62 ret   :  28 
reti  :   0 rjmp  :  33 rol   :   0 ror   :   0 sbc   :   0 sbci  :  10 
sbi   :  15 sbic  :   2 sbis  :  12 sbiw  :  11 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  31 std   :  20 sts   :   2 sub   :   0 subi  :  15 swap  :   1 
tst   :   0 wdr   :   1 
Instructions used: 42 out of 116 (36.2%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000576   1184    214   1398   16384   8.5%
[.dseg] 0x000060 0x0001db      0    123    123    1024  12.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
