
AVRASM ver. 2.1.30  E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm Sat Dec 16 19:38:41 2023

E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm(1417): warning: Register r5 already defined by the .DEF directive
E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm(1418): warning: Register r4 already defined by the .DEF directive
E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm(1419): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.52 
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x37
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 009f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G102:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G102:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x4:
000033 0160
000034 3131
000035 0031
000036 3032      	.DB  LOW(_0x3),HIGH(_0x3),0x31,0x31,0x31,0x0,0x32,0x30
000037 0033
000038 0165
000039 3231
00003a 0036      	.DB  0x33,0x0,LOW(_0x3+5),HIGH(_0x3+5),0x31,0x32,0x36,0x0
00003b 3231
00003c 0039
00003d 016b
00003e 3231      	.DB  0x31,0x32,0x39,0x0,LOW(_0x3+11),HIGH(_0x3+11),0x31,0x32
00003f 0038
000040 3233
000041 0035
000042 016f      	.DB  0x38,0x0,0x33,0x32,0x35,0x0,LOW(_0x3+15),HIGH(_0x3+15)
000043 3331
000044 0030
000045 3234
000046 0036      	.DB  0x31,0x33,0x30,0x0,0x34,0x32,0x36,0x0
000047 0174
000048 3331
000049 0032
00004a 3730      	.DB  LOW(_0x3+20),HIGH(_0x3+20),0x31,0x33,0x32,0x0,0x30,0x37
E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm(1463): warning: .cseg .db misalignment - padding zero byte
00004b 0039      	.DB  0x39
                 _0x0:
00004c 7250
00004d 666f
00004e 4100
00004f 6d68      	.DB  0x50,0x72,0x6F,0x66,0x0,0x41,0x68,0x6D
000050 6465
000051 4100
000052 726d
000053 4100      	.DB  0x65,0x64,0x0,0x41,0x6D,0x72,0x0,0x41
000054 6564
000055 006c
000056 6d4f
000057 7265      	.DB  0x64,0x65,0x6C,0x0,0x4F,0x6D,0x65,0x72
000058 4500
000059 746e
00005a 7265
00005b 7920      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x79
00005c 756f
00005d 2072
00005e 4449
00005f 203a      	.DB  0x6F,0x75,0x72,0x20,0x49,0x44,0x3A,0x20
000060 4500
000061 746e
000062 7265
000063 7920      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x79
000064 756f
000065 2072
000066 4350
000067 203a      	.DB  0x6F,0x75,0x72,0x20,0x50,0x43,0x3A,0x20
000068 5700
000069 6c65
00006a 6f63
00006b 656d      	.DB  0x0,0x57,0x65,0x6C,0x63,0x6F,0x6D,0x65
00006c 5300
00006d 726f
00006e 7972
00006f 7720      	.DB  0x0,0x53,0x6F,0x72,0x72,0x79,0x20,0x77
000070 6f72
000071 676e
000072 5020
000073 0043      	.DB  0x72,0x6F,0x6E,0x67,0x20,0x50,0x43,0x0
000074 7257
000075 6e6f
000076 2067
000077 4449      	.DB  0x57,0x72,0x6F,0x6E,0x67,0x20,0x49,0x44
E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm(1476): warning: .cseg .db misalignment - padding zero byte
000078 0000      	.DB  0x0
                 _0x2000003:
000079 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00007a 0005      	.DW  0x05
00007b 0160      	.DW  _0x3
00007c 0098      	.DW  _0x0*2
                 
00007d 0006      	.DW  0x06
00007e 0165      	.DW  _0x3+5
00007f 009d      	.DW  _0x0*2+5
                 
000080 0004      	.DW  0x04
000081 016b      	.DW  _0x3+11
000082 00a3      	.DW  _0x0*2+11
                 
000083 0005      	.DW  0x05
000084 016f      	.DW  _0x3+15
000085 00a7      	.DW  _0x0*2+15
                 
000086 0005      	.DW  0x05
000087 0174      	.DW  _0x3+20
000088 00ac      	.DW  _0x0*2+20
                 
000089 0031      	.DW  0x31
00008a 01b9      	.DW  _users
00008b 0066      	.DW  _0x4*2
                 
00008c 0010      	.DW  0x10
00008d 0179      	.DW  _0x10
00008e 00b1      	.DW  _0x0*2+25
                 
00008f 0010      	.DW  0x10
000090 0189      	.DW  _0x10+16
000091 00c1      	.DW  _0x0*2+41
                 
000092 0008      	.DW  0x08
000093 0199      	.DW  _0x10+32
000094 00d1      	.DW  _0x0*2+57
                 
000095 000f      	.DW  0x0F
000096 01a1      	.DW  _0x10+40
000097 00d9      	.DW  _0x0*2+65
                 
000098 0009      	.DW  0x09
000099 01b0      	.DW  _0x10+55
00009a 00e8      	.DW  _0x0*2+80
                 
00009b 0002      	.DW  0x02
00009c 01eb      	.DW  __base_y_G100
00009d 00f2      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00009e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00009f 94f8      	CLI
0000a0 27ee      	CLR  R30
0000a1 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000a2 e0f1      	LDI  R31,1
0000a3 bffb      	OUT  GICR,R31
0000a4 bfeb      	OUT  GICR,R30
0000a5 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000a6 e08d      	LDI  R24,(14-2)+1
0000a7 e0a2      	LDI  R26,2
0000a8 27bb      	CLR  R27
                 __CLEAR_REG:
0000a9 93ed      	ST   X+,R30
0000aa 958a      	DEC  R24
0000ab f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000ac e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000ad e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000ae e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000af 93ed      	ST   X+,R30
0000b0 9701      	SBIW R24,1
0000b1 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000b2 efe4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000b3 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000b4 9185      	LPM  R24,Z+
0000b5 9195      	LPM  R25,Z+
0000b6 9700      	SBIW R24,0
0000b7 f061      	BREQ __GLOBAL_INI_END
0000b8 91a5      	LPM  R26,Z+
0000b9 91b5      	LPM  R27,Z+
0000ba 9005      	LPM  R0,Z+
0000bb 9015      	LPM  R1,Z+
0000bc 01bf      	MOVW R22,R30
0000bd 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000be 9005      	LPM  R0,Z+
0000bf 920d      	ST   X+,R0
0000c0 9701      	SBIW R24,1
0000c1 f7e1      	BRNE __GLOBAL_INI_LOOP
0000c2 01fb      	MOVW R30,R22
0000c3 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000c4 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000c5 bfed      	OUT  SPL,R30
0000c6 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000c7 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000c8 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000c9 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000ca 940c 00cc 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;char keypad();
                 ;unsigned char EE_Read(unsigned int address);
                 ;void EE_Write(unsigned int address, unsigned char data);
                 ;void EE_WriteString(unsigned int address, const char *str);
                 ;void EE_ReadString(unsigned int address, char *buffer, unsigned int length);
                 ;void initializeUsers();
                 ;void displayMessage(char *message, int delay_ms_value);
                 ;int enterValueWithKeypad(char *buffer);
                 ;void generateTone();
                 
                 	.DSEG
                 _0x3:
000160           	.BYTE 0x19
                 ;void main(void)
                 ; 0000 002C {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 002D // Set keypad ports
                 ; 0000 002E DDRC = 0b00000111;
0000cc e0e7      	LDI  R30,LOW(7)
0000cd bbe4      	OUT  0x14,R30
                 ; 0000 002F PORTC = 0b11111000;
0000ce efe8      	LDI  R30,LOW(248)
0000cf bbe5      	OUT  0x15,R30
                 ; 0000 0030 
                 ; 0000 0031 // Initialize the LCD
                 ; 0000 0032 lcd_init(16);
0000d0 e1a0      	LDI  R26,LOW(16)
0000d1 d1c1      	RCALL _lcd_init
                 ; 0000 0033 
                 ; 0000 0034 // Set the door as input (now by default the door is closed)
                 ; 0000 0035 DDRB .0 = 0;
0000d2 98b8      	CBI  0x17,0
                 ; 0000 0036 PORTB .0 = 1; // turn on pull up resistance
0000d3 9ac0      	SBI  0x18,0
                 ; 0000 0037 
                 ; 0000 0038 // Set the speaker as a output
                 ; 0000 0039 DDRD.7 = 1;
0000d4 9a8f      	SBI  0x11,7
                 ; 0000 003A PORTD.7 = 1; // Set it to 0 initially
0000d5 9a97      	SBI  0x12,7
                 ; 0000 003B 
                 ; 0000 003C // Initialize user data in EEPROM
                 ; 0000 003D initializeUsers();
0000d6 d105      	RCALL _initializeUsers
                 ; 0000 003E 
                 ; 0000 003F while (1)
                 _0xD:
                 ; 0000 0040 {
                 ; 0000 0041 char enteredID[4];  // Change data type to string
                 ; 0000 0042 User currentUser;
                 ; 0000 0043 unsigned int address = 0;
                 ; 0000 0044 int userFound = 0;
                 ; 0000 0045 int i;
                 ; 0000 0046 
                 ; 0000 0047 displayMessage("Enter your ID: ", 1000);
0000d7 9764      	SBIW R28,20
0000d8 e0e0      	LDI  R30,LOW(0)
0000d9 83ea      	STD  Y+2,R30
0000da 83eb      	STD  Y+3,R30
0000db 83ec      	STD  Y+4,R30
0000dc 83ed      	STD  Y+5,R30
                 ;	enteredID -> Y+16
                 ;	currentUser -> Y+6
                 ;	address -> Y+4
                 ;	userFound -> Y+2
                 ;	i -> Y+0
                +
0000dd e7e9     +LDI R30 , LOW ( _0x10 + ( 0 ) )
0000de e0f1     +LDI R31 , HIGH ( _0x10 + ( 0 ) )
                 	__POINTW1MN _0x10,0
0000df d1f2      	RCALL SUBOPT_0x0
                 ; 0000 0048 
                 ; 0000 0049 if (enterValueWithKeypad(enteredID))
0000e0 01de      	MOVW R26,R28
0000e1 9650      	ADIW R26,16
0000e2 d121      	RCALL _enterValueWithKeypad
0000e3 9730      	SBIW R30,0
0000e4 f409      	BRNE PC+2
0000e5 c046      	RJMP _0x11
                 ; 0000 004A {
                 ; 0000 004B char enteredPC[4];
                 ; 0000 004C for (i = 0; i < sizeof(users) / sizeof(users[0]); ++i)
0000e6 9724      	SBIW R28,4
                 ;	enteredID -> Y+20
                 ;	currentUser -> Y+10
                 ;	address -> Y+8
                 ;	userFound -> Y+6
                 ;	i -> Y+4
                 ;	enteredPC -> Y+0
0000e7 e0e0      	LDI  R30,LOW(0)
0000e8 83ec      	STD  Y+4,R30
0000e9 83ed      	STD  Y+4+1,R30
                 _0x13:
0000ea 81ac      	LDD  R26,Y+4
0000eb 81bd      	LDD  R27,Y+4+1
0000ec 9715      	SBIW R26,5
0000ed f5ec      	BRGE _0x14
                 ; 0000 004D {
                 ; 0000 004E address += sizeof(users[i].name);
0000ee 85e8      	LDD  R30,Y+8
0000ef 85f9      	LDD  R31,Y+8+1
0000f0 9632      	ADIW R30,2
0000f1 d1e5      	RCALL SUBOPT_0x1
                 ; 0000 004F EE_ReadString(address, currentUser.id, sizeof(currentUser.id));  // Read ID as a string
0000f2 01fe      	MOVW R30,R28
0000f3 963e      	ADIW R30,14
0000f4 d1e7      	RCALL SUBOPT_0x2
                 ; 0000 0050 
                 ; 0000 0051 if (strcmp(currentUser.id, enteredID) == 0)
0000f5 01fe      	MOVW R30,R28
0000f6 963c      	ADIW R30,12
0000f7 93fa      	ST   -Y,R31
0000f8 93ea      	ST   -Y,R30
0000f9 01de      	MOVW R26,R28
0000fa 9656      	ADIW R26,22
0000fb d1c2      	RCALL _strcmp
0000fc 30e0      	CPI  R30,0
0000fd f529      	BRNE _0x15
                 ; 0000 0052 {
                 ; 0000 0053 
                 ; 0000 0054 address += sizeof(users[i].id);
0000fe 85e8      	LDD  R30,Y+8
0000ff 85f9      	LDD  R31,Y+8+1
000100 9634      	ADIW R30,4
000101 d1d5      	RCALL SUBOPT_0x1
                 ; 0000 0055 EE_ReadString(address, currentUser.pc, sizeof(currentUser.pc));  // Read PC as a string
000102 01fe      	MOVW R30,R28
000103 9672      	ADIW R30,18
000104 d1d7      	RCALL SUBOPT_0x2
                 ; 0000 0056 
                 ; 0000 0057 displayMessage("Enter your PC: ", 1000);
                +
000105 e8e9     +LDI R30 , LOW ( _0x10 + ( 16 ) )
000106 e0f1     +LDI R31 , HIGH ( _0x10 + ( 16 ) )
                 	__POINTW1MN _0x10,16
000107 d1ca      	RCALL SUBOPT_0x0
                 ; 0000 0058 
                 ; 0000 0059 if (enterValueWithKeypad(enteredPC))
000108 01de      	MOVW R26,R28
000109 d0fa      	RCALL _enterValueWithKeypad
00010a 9730      	SBIW R30,0
00010b f091      	BREQ _0x16
                 ; 0000 005A {
                 ; 0000 005B if (strcmp(currentUser.pc, enteredPC) == 0)
00010c 01fe      	MOVW R30,R28
00010d 9670      	ADIW R30,16
00010e 93fa      	ST   -Y,R31
00010f 93ea      	ST   -Y,R30
000110 01de      	MOVW R26,R28
000111 9612      	ADIW R26,2
000112 d1ab      	RCALL _strcmp
000113 30e0      	CPI  R30,0
000114 f429      	BRNE _0x17
                 ; 0000 005C {
                 ; 0000 005D displayMessage("Welcome", 1000);
                +
000115 e9e9     +LDI R30 , LOW ( _0x10 + ( 32 ) )
000116 e0f1     +LDI R31 , HIGH ( _0x10 + ( 32 ) )
                 	__POINTW1MN _0x10,32
000117 d1ba      	RCALL SUBOPT_0x0
                 ; 0000 005E // Open the door
                 ; 0000 005F DDRB .0 = 1;
000118 9ab8      	SBI  0x17,0
                 ; 0000 0060 }
                 ; 0000 0061 else
000119 c003      	RJMP _0x1A
                 _0x17:
                 ; 0000 0062 displayMessage("Sorry wrong PC", 1000);
                +
00011a eae1     +LDI R30 , LOW ( _0x10 + ( 40 ) )
00011b e0f1     +LDI R31 , HIGH ( _0x10 + ( 40 ) )
                 	__POINTW1MN _0x10,40
00011c d1b5      	RCALL SUBOPT_0x0
                 ; 0000 0063 // one peep alarm
                 ; 0000 0064 generateTone();
                 _0x1A:
00011d d10b      	RCALL _generateTone
                 ; 0000 0065 }
                 ; 0000 0066 
                 ; 0000 0067 userFound = 1;
                 _0x16:
00011e e0e1      	LDI  R30,LOW(1)
00011f e0f0      	LDI  R31,HIGH(1)
000120 83ee      	STD  Y+6,R30
000121 83ff      	STD  Y+6+1,R31
                 ; 0000 0068 break;
000122 c008      	RJMP _0x14
                 ; 0000 0069 }
                 ; 0000 006A 
                 ; 0000 006B address += sizeof(users[i].id);
                 _0x15:
000123 d1bd      	RCALL SUBOPT_0x3
                 ; 0000 006C address += sizeof(users[i].pc);
000124 d1bc      	RCALL SUBOPT_0x3
                 ; 0000 006D }
000125 81ec      	LDD  R30,Y+4
000126 81fd      	LDD  R31,Y+4+1
000127 9631      	ADIW R30,1
000128 83ec      	STD  Y+4,R30
000129 83fd      	STD  Y+4+1,R31
00012a cfbf      	RJMP _0x13
                 _0x14:
                 ; 0000 006E }
00012b 9624      	ADIW R28,4
                 ; 0000 006F 
                 ; 0000 0070 if (!userFound)
                 _0x11:
00012c 81ea      	LDD  R30,Y+2
00012d 81fb      	LDD  R31,Y+2+1
00012e 9730      	SBIW R30,0
00012f f429      	BRNE _0x1B
                 ; 0000 0071 {
                 ; 0000 0072 displayMessage("Wrong ID", 1000);
                +
000130 ebe0     +LDI R30 , LOW ( _0x10 + ( 55 ) )
000131 e0f1     +LDI R31 , HIGH ( _0x10 + ( 55 ) )
                 	__POINTW1MN _0x10,55
000132 d19f      	RCALL SUBOPT_0x0
                 ; 0000 0073 // Two peeps alarm
                 ; 0000 0074 generateTone();
000133 d0f5      	RCALL _generateTone
                 ; 0000 0075 generateTone();
000134 d0f4      	RCALL _generateTone
                 ; 0000 0076 }
                 ; 0000 0077 
                 ; 0000 0078 delay_ms(2000);
                 _0x1B:
000135 eda0      	LDI  R26,LOW(2000)
000136 e0b7      	LDI  R27,HIGH(2000)
000137 d1da      	RCALL _delay_ms
                 ; 0000 0079 }
000138 9664      	ADIW R28,20
000139 cf9d      	RJMP _0xD
                 ; 0000 007A }
                 _0x1C:
00013a cfff      	RJMP _0x1C
                 ; .FEND
                 
                 	.DSEG
                 _0x10:
000179           	.BYTE 0x40
                 ;char keypad()
                 ; 0000 007D {
                 
                 	.CSEG
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 007E while (1)
                 _0x1D:
                 ; 0000 007F {
                 ; 0000 0080 PORTC .0 = 0;
00013b 98a8      	CBI  0x15,0
                 ; 0000 0081 PORTC .1 = 1;
00013c 9aa9      	SBI  0x15,1
                 ; 0000 0082 PORTC .2 = 1;
00013d 9aaa      	SBI  0x15,2
                 ; 0000 0083 
                 ; 0000 0084 switch (PINC)
00013e b3e3      	IN   R30,0x13
                 ; 0000 0085 {
                 ; 0000 0086 case 0b11110110:
00013f 3fe6      	CPI  R30,LOW(0xF6)
000140 f421      	BRNE _0x29
                 ; 0000 0087 while (PINC .3 == 0);
                 _0x2A:
000141 9b9b      	SBIS 0x13,3
000142 cffe      	RJMP _0x2A
                 ; 0000 0088 return 1;
000143 e0e1      	LDI  R30,LOW(1)
000144 9508      	RET
                 ; 0000 0089 case 0b11101110:
                 _0x29:
000145 3eee      	CPI  R30,LOW(0xEE)
000146 f421      	BRNE _0x2D
                 ; 0000 008A while (PINC .4 == 0);
                 _0x2E:
000147 9b9c      	SBIS 0x13,4
000148 cffe      	RJMP _0x2E
                 ; 0000 008B return 4;
000149 e0e4      	LDI  R30,LOW(4)
00014a 9508      	RET
                 ; 0000 008C case 0b11011110:
                 _0x2D:
00014b 3dee      	CPI  R30,LOW(0xDE)
00014c f421      	BRNE _0x31
                 ; 0000 008D while (PINC .5 == 0);
                 _0x32:
00014d 9b9d      	SBIS 0x13,5
00014e cffe      	RJMP _0x32
                 ; 0000 008E return 7;
00014f e0e7      	LDI  R30,LOW(7)
000150 9508      	RET
                 ; 0000 008F case 0b10111110:
                 _0x31:
000151 3bee      	CPI  R30,LOW(0xBE)
000152 f421      	BRNE _0x28
                 ; 0000 0090 while (PINC .6 == 0);
                 _0x36:
000153 9b9e      	SBIS 0x13,6
000154 cffe      	RJMP _0x36
                 ; 0000 0091 return 10;
000155 e0ea      	LDI  R30,LOW(10)
000156 9508      	RET
                 ; 0000 0092 }
                 _0x28:
                 ; 0000 0093 
                 ; 0000 0094 PORTC .0 = 1;
000157 9aa8      	SBI  0x15,0
                 ; 0000 0095 PORTC .1 = 0;
000158 98a9      	CBI  0x15,1
                 ; 0000 0096 PORTC .2 = 1;
000159 9aaa      	SBI  0x15,2
                 ; 0000 0097 
                 ; 0000 0098 switch (PINC)
00015a b3e3      	IN   R30,0x13
                 ; 0000 0099 {
                 ; 0000 009A case 0b11110101:
00015b 3fe5      	CPI  R30,LOW(0xF5)
00015c f421      	BRNE _0x42
                 ; 0000 009B while (PINC .3 == 0);
                 _0x43:
00015d 9b9b      	SBIS 0x13,3
00015e cffe      	RJMP _0x43
                 ; 0000 009C return 2;
00015f e0e2      	LDI  R30,LOW(2)
000160 9508      	RET
                 ; 0000 009D case 0b11101101:
                 _0x42:
000161 3eed      	CPI  R30,LOW(0xED)
000162 f421      	BRNE _0x46
                 ; 0000 009E while (PINC .4 == 0);
                 _0x47:
000163 9b9c      	SBIS 0x13,4
000164 cffe      	RJMP _0x47
                 ; 0000 009F return 5;
000165 e0e5      	LDI  R30,LOW(5)
000166 9508      	RET
                 ; 0000 00A0 case 0b11011101:
                 _0x46:
000167 3ded      	CPI  R30,LOW(0xDD)
000168 f421      	BRNE _0x4A
                 ; 0000 00A1 while (PINC .5 == 0);
                 _0x4B:
000169 9b9d      	SBIS 0x13,5
00016a cffe      	RJMP _0x4B
                 ; 0000 00A2 return 8;
00016b e0e8      	LDI  R30,LOW(8)
00016c 9508      	RET
                 ; 0000 00A3 case 0b10111101:
                 _0x4A:
00016d 3bed      	CPI  R30,LOW(0xBD)
00016e f421      	BRNE _0x41
                 ; 0000 00A4 while (PINC .6 == 0);
                 _0x4F:
00016f 9b9e      	SBIS 0x13,6
000170 cffe      	RJMP _0x4F
                 ; 0000 00A5 return 0;
000171 e0e0      	LDI  R30,LOW(0)
000172 9508      	RET
                 ; 0000 00A6 }
                 _0x41:
                 ; 0000 00A7 
                 ; 0000 00A8 PORTC .0 = 1;
000173 9aa8      	SBI  0x15,0
                 ; 0000 00A9 PORTC .1 = 1;
000174 9aa9      	SBI  0x15,1
                 ; 0000 00AA PORTC .2 = 0;
000175 98aa      	CBI  0x15,2
                 ; 0000 00AB 
                 ; 0000 00AC switch (PINC)
000176 b3e3      	IN   R30,0x13
                 ; 0000 00AD {
                 ; 0000 00AE case 0b11110011:
000177 3fe3      	CPI  R30,LOW(0xF3)
000178 f421      	BRNE _0x5B
                 ; 0000 00AF while (PINC .3 == 0);
                 _0x5C:
000179 9b9b      	SBIS 0x13,3
00017a cffe      	RJMP _0x5C
                 ; 0000 00B0 return 3;
00017b e0e3      	LDI  R30,LOW(3)
00017c 9508      	RET
                 ; 0000 00B1 case 0b11101011:
                 _0x5B:
00017d 3eeb      	CPI  R30,LOW(0xEB)
00017e f421      	BRNE _0x5F
                 ; 0000 00B2 while (PINC .4 == 0);
                 _0x60:
00017f 9b9c      	SBIS 0x13,4
000180 cffe      	RJMP _0x60
                 ; 0000 00B3 return 6;
000181 e0e6      	LDI  R30,LOW(6)
000182 9508      	RET
                 ; 0000 00B4 case 0b11011011:
                 _0x5F:
000183 3deb      	CPI  R30,LOW(0xDB)
000184 f421      	BRNE _0x63
                 ; 0000 00B5 while (PINC .5 == 0);
                 _0x64:
000185 9b9d      	SBIS 0x13,5
000186 cffe      	RJMP _0x64
                 ; 0000 00B6 return 9;
000187 e0e9      	LDI  R30,LOW(9)
000188 9508      	RET
                 ; 0000 00B7 case 0b10111011:
                 _0x63:
000189 3beb      	CPI  R30,LOW(0xBB)
00018a f421      	BRNE _0x5A
                 ; 0000 00B8 while (PINC .6 == 0);
                 _0x68:
00018b 9b9e      	SBIS 0x13,6
00018c cffe      	RJMP _0x68
                 ; 0000 00B9 return 11;
00018d e0eb      	LDI  R30,LOW(11)
00018e 9508      	RET
                 ; 0000 00BA }
                 _0x5A:
                 ; 0000 00BB }
00018f cfab      	RJMP _0x1D
                 ; 0000 00BC }
                 ; .FEND
                 ;unsigned char EE_Read(unsigned int address)
                 ; 0000 00BF {
                 _EE_Read:
                 ; .FSTART _EE_Read
                 ; 0000 00C0 while (EECR .1 == 1); // Wait till EEPROM is ready
000190 931a      	ST   -Y,R17
000191 930a      	ST   -Y,R16
000192 018d      	MOVW R16,R26
                 ;	address -> R16,R17
                 _0x6B:
000193 99e1      	SBIC 0x1C,1
000194 cffe      	RJMP _0x6B
                 ; 0000 00C1 EEAR = address;       // Prepare the address you want to read from
                +
000195 bb1f     +OUT 30 + 1 , R17
000196 bb0e     +OUT 30 , R16
                 	__OUTWR 16,17,30
                 ; 0000 00C2 EECR .0 = 1;          // Execute read command
000197 9ae0      	SBI  0x1C,0
                 ; 0000 00C3 return EEDR;
000198 b3ed      	IN   R30,0x1D
000199 c08c      	RJMP _0x2080003
                 ; 0000 00C4 }
                 ; .FEND
                 ;void EE_Write(unsigned int address, unsigned char data)
                 ; 0000 00C7 {
                 _EE_Write:
                 ; .FSTART _EE_Write
                 ; 0000 00C8 while (EECR .1 == 1); // Wait till EEPROM is ready
00019a d16b      	RCALL __SAVELOCR4
00019b 2f1a      	MOV  R17,R26
                +
00019c 812c     +LDD R18 , Y + 4
00019d 813d     +LDD R19 , Y + 4 + 1
                 	__GETWRS 18,19,4
                 ;	address -> R18,R19
                 ;	data -> R17
                 _0x70:
00019e 99e1      	SBIC 0x1C,1
00019f cffe      	RJMP _0x70
                 ; 0000 00C9 EEAR = address;       // Prepare the address you want to read from
                +
0001a0 bb3f     +OUT 30 + 1 , R19
0001a1 bb2e     +OUT 30 , R18
                 	__OUTWR 18,19,30
                 ; 0000 00CA EEDR = data;          // Prepare the data you want to write in the address above
0001a2 bb1d      	OUT  0x1D,R17
                 ; 0000 00CB EECR .2 = 1;          // Master write enable
0001a3 9ae2      	SBI  0x1C,2
                 ; 0000 00CC EECR .1 = 1;          // Write Enable
0001a4 9ae1      	SBI  0x1C,1
                 ; 0000 00CD }
0001a5 c05b      	RJMP _0x2080004
                 ; .FEND
                 ;void EE_WriteString(unsigned int address, const char *str)
                 ; 0000 00D0 {
                 _EE_WriteString:
                 ; .FSTART _EE_WriteString
                 ; 0000 00D1 // Write each character of the string to EEPROM
                 ; 0000 00D2 while (*str)
0001a6 d140      	RCALL SUBOPT_0x4
                 ;	address -> R18,R19
                 ;	*str -> R16,R17
                 _0x77:
0001a7 01d8      	MOVW R26,R16
0001a8 91ec      	LD   R30,X
0001a9 30e0      	CPI  R30,0
0001aa f051      	BREQ _0x79
                 ; 0000 00D3 EE_Write(address++, *str++);
0001ab 01f9      	MOVW R30,R18
                +
0001ac 5f2f     +SUBI R18 , LOW ( - 1 )
0001ad 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0001ae 93fa      	ST   -Y,R31
0001af 93ea      	ST   -Y,R30
                +
0001b0 5f0f     +SUBI R16 , LOW ( - 1 )
0001b1 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001b2 91ac      	LD   R26,X
0001b3 dfe6      	RCALL _EE_Write
0001b4 cff2      	RJMP _0x77
                 _0x79:
                 ; 0000 00D5 EE_Write(address, '\0');
0001b5 933a      	ST   -Y,R19
0001b6 932a      	ST   -Y,R18
0001b7 e0a0      	LDI  R26,LOW(0)
0001b8 dfe1      	RCALL _EE_Write
                 ; 0000 00D6 }
0001b9 c047      	RJMP _0x2080004
                 ; .FEND
                 ;void EE_ReadString(unsigned int address, char *buffer, unsigned int length)
                 ; 0000 00D9 {
                 _EE_ReadString:
                 ; .FSTART _EE_ReadString
                 ; 0000 00DA unsigned int i;
                 ; 0000 00DB for (i = 0; i < length; ++i)
0001ba d149      	RCALL __SAVELOCR6
0001bb 019d      	MOVW R18,R26
                +
0001bc 814e     +LDD R20 , Y + 6
0001bd 815f     +LDD R21 , Y + 6 + 1
                 	__GETWRS 20,21,6
                 ;	address -> Y+8
                 ;	*buffer -> R20,R21
                 ;	length -> R18,R19
                 ;	i -> R16,R17
                +
0001be e000     +LDI R16 , LOW ( 0 )
0001bf e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x7B:
                +
0001c0 1702     +CP R16 , R18
0001c1 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
0001c2 f4b0      	BRSH _0x7C
                 ; 0000 00DC {
                 ; 0000 00DD buffer[i] = EE_Read(address + i);
0001c3 01f8      	MOVW R30,R16
0001c4 0fe4      	ADD  R30,R20
0001c5 1ff5      	ADC  R31,R21
0001c6 93ff      	PUSH R31
0001c7 93ef      	PUSH R30
0001c8 85a8      	LDD  R26,Y+8
0001c9 85b9      	LDD  R27,Y+8+1
0001ca 0fa0      	ADD  R26,R16
0001cb 1fb1      	ADC  R27,R17
0001cc dfc3      	RCALL _EE_Read
0001cd 91af      	POP  R26
0001ce 91bf      	POP  R27
0001cf 93ec      	ST   X,R30
                 ; 0000 00DE if (buffer[i] == '\0')
0001d0 01f8      	MOVW R30,R16
0001d1 0fe4      	ADD  R30,R20
0001d2 1ff5      	ADC  R31,R21
0001d3 81e0      	LD   R30,Z
0001d4 30e0      	CPI  R30,0
0001d5 f019      	BREQ _0x7C
                 ; 0000 00DF break;
                 ; 0000 00E0 }
                +
0001d6 5f0f     +SUBI R16 , LOW ( - 1 )
0001d7 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001d8 cfe7      	RJMP _0x7B
                 _0x7C:
                 ; 0000 00E1 }
0001d9 d131      	RCALL __LOADLOCR6
0001da 962a      	ADIW R28,10
0001db 9508      	RET
                 ; .FEND
                 ;void initializeUsers()
                 ; 0000 00E4 {
                 _initializeUsers:
                 ; .FSTART _initializeUsers
                 ; 0000 00E5 unsigned int address = 0;
                 ; 0000 00E6 int i;
                 ; 0000 00E7 for (i = 0; i < sizeof(users) / sizeof(users[0]); ++i)
0001dc d129      	RCALL __SAVELOCR4
                 ;	address -> R16,R17
                 ;	i -> R18,R19
                +
0001dd e000     +LDI R16 , LOW ( 0 )
0001de e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0001df e020     +LDI R18 , LOW ( 0 )
0001e0 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x7F:
                +
0001e1 3025     +CPI R18 , LOW ( 5 )
0001e2 e0e0     +LDI R30 , HIGH ( 5 )
0001e3 073e     +CPC R19 , R30
                 	__CPWRN 18,19,5
0001e4 f4ac      	BRGE _0x80
                 ; 0000 00E8 {
                 ; 0000 00E9 EE_WriteString(address, users[i].name);
0001e5 d106      	RCALL SUBOPT_0x5
0001e6 54e7      	SUBI R30,LOW(-_users)
0001e7 4ffe      	SBCI R31,HIGH(-_users)
0001e8 01df      	MOVW R26,R30
0001e9 91ed      	LD   R30,X+
0001ea 91fd      	LD   R31,X+
0001eb 01df      	MOVW R26,R30
0001ec dfb9      	RCALL _EE_WriteString
                 ; 0000 00EA address += sizeof(users[i].name);
                +
0001ed 5f0e     +SUBI R16 , LOW ( - 2 )
0001ee 4f1f     +SBCI R17 , HIGH ( - 2 )
                 	__ADDWRN 16,17,2
                 ; 0000 00EB 
                 ; 0000 00EC EE_WriteString(address, users[i].id);
0001ef d0fc      	RCALL SUBOPT_0x5
                +
0001f0 54e5     +SUBI R30 , LOW ( - _users - ( 2 ) )
0001f1 4ffe     +SBCI R31 , HIGH ( - _users - ( 2 ) )
                 	__ADDW1MN _users,2
0001f2 d101      	RCALL SUBOPT_0x6
                 ; 0000 00ED address += sizeof(users[i].id);
                 ; 0000 00EE 
                 ; 0000 00EF EE_WriteString(address, users[i].pc);
0001f3 d0f8      	RCALL SUBOPT_0x5
                +
0001f4 54e1     +SUBI R30 , LOW ( - _users - ( 6 ) )
0001f5 4ffe     +SBCI R31 , HIGH ( - _users - ( 6 ) )
                 	__ADDW1MN _users,6
0001f6 d0fd      	RCALL SUBOPT_0x6
                 ; 0000 00F0 address += sizeof(users[i].pc);
                 ; 0000 00F1 }
                +
0001f7 5f2f     +SUBI R18 , LOW ( - 1 )
0001f8 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0001f9 cfe7      	RJMP _0x7F
                 _0x80:
                 ; 0000 00F2 }
0001fa c095      	RJMP _0x2080002
                 ; .FEND
                 ;void displayMessage(char *message, int delay_ms_value)
                 ; 0000 00F5 {
                 _displayMessage:
                 ; .FSTART _displayMessage
                 ; 0000 00F6 lcd_clear();
0001fb d0eb      	RCALL SUBOPT_0x4
                 ;	*message -> R18,R19
                 ;	delay_ms_value -> R16,R17
0001fc d06a      	RCALL _lcd_clear
                 ; 0000 00F7 lcd_puts(message);
0001fd 01d9      	MOVW R26,R18
0001fe d085      	RCALL _lcd_puts
                 ; 0000 00F8 delay_ms(delay_ms_value);
0001ff 01d8      	MOVW R26,R16
000200 d111      	RCALL _delay_ms
                 ; 0000 00F9 }
                 _0x2080004:
000201 d10b      	RCALL __LOADLOCR4
000202 9626      	ADIW R28,6
000203 9508      	RET
                 ; .FEND
                 ;int enterValueWithKeypad(char *buffer)
                 ; 0000 00FC {
                 _enterValueWithKeypad:
                 ; .FSTART _enterValueWithKeypad
                 ; 0000 00FD buffer[0] = keypad() + '0';
000204 931a      	ST   -Y,R17
000205 930a      	ST   -Y,R16
000206 018d      	MOVW R16,R26
                 ;	*buffer -> R16,R17
000207 df33      	RCALL _keypad
000208 5de0      	SUBI R30,-LOW(48)
000209 01d8      	MOVW R26,R16
00020a 93ec      	ST   X,R30
                 ; 0000 00FE lcd_putchar(buffer[0]);
00020b 91ac      	LD   R26,X
00020c d064      	RCALL _lcd_putchar
                 ; 0000 00FF buffer[1] = keypad() + '0';
00020d df2d      	RCALL _keypad
00020e 5de0      	SUBI R30,-LOW(48)
                +
00020f 01d8     +MOVW R26 , R16
000210 9611     +ADIW R26 , 1
000211 93ec     +ST X , R30
                 	__PUTB1RNS 16,1
                 ; 0000 0100 lcd_putchar(buffer[1]);
000212 01f8      	MOVW R30,R16
000213 81a1      	LDD  R26,Z+1
000214 d05c      	RCALL _lcd_putchar
                 ; 0000 0101 buffer[2] = keypad() + '0';
000215 df25      	RCALL _keypad
000216 5de0      	SUBI R30,-LOW(48)
                +
000217 01d8     +MOVW R26 , R16
000218 9612     +ADIW R26 , 2
000219 93ec     +ST X , R30
                 	__PUTB1RNS 16,2
                 ; 0000 0102 lcd_putchar(buffer[2]);
00021a 01f8      	MOVW R30,R16
00021b 81a2      	LDD  R26,Z+2
00021c d054      	RCALL _lcd_putchar
                 ; 0000 0103 buffer[3] = '\0';  // Null-terminate the string
00021d 01f8      	MOVW R30,R16
00021e 9633      	ADIW R30,3
00021f e0a0      	LDI  R26,LOW(0)
000220 83a0      	STD  Z+0,R26
                 ; 0000 0104 
                 ; 0000 0105 delay_ms(1000);
000221 eea8      	LDI  R26,LOW(1000)
000222 e0b3      	LDI  R27,HIGH(1000)
000223 d0ee      	RCALL _delay_ms
                 ; 0000 0106 
                 ; 0000 0107 return 1;  // Return a non-zero value to indicate success
000224 e0e1      	LDI  R30,LOW(1)
000225 e0f0      	LDI  R31,HIGH(1)
                 _0x2080003:
000226 9109      	LD   R16,Y+
000227 9119      	LD   R17,Y+
000228 9508      	RET
                 ; 0000 0108 }
                 ; .FEND
                 ;void generateTone()
                 ; 0000 010A {
                 _generateTone:
                 ; .FSTART _generateTone
                 ; 0000 010B PORTD.7 = 1;  // Set PD7 HIGH
000229 9a97      	SBI  0x12,7
                 ; 0000 010C delay_ms(500);  // Adjust duration as needed
00022a efa4      	LDI  R26,LOW(500)
00022b e0b1      	LDI  R27,HIGH(500)
00022c d0e5      	RCALL _delay_ms
                 ; 0000 010D PORTD.7 = 0;  // Set PD7 LOW
00022d 9897      	CBI  0x12,7
                 ; 0000 010E delay_ms(500);  // Pause between tones
00022e efa4      	LDI  R26,LOW(500)
00022f e0b1      	LDI  R27,HIGH(500)
000230 d0e1      	RCALL _delay_ms
                 ; 0000 010F PORTD.7 = 1;  // Set PD7 HIGH (optional: restore to high for a brief moment)
000231 9a97      	SBI  0x12,7
                 ; 0000 0110 }
000232 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000233 931a      	ST   -Y,R17
000234 2f1a      	MOV  R17,R26
000235 b3eb      	IN   R30,0x1B
000236 70ef      	ANDI R30,LOW(0xF)
000237 2fae      	MOV  R26,R30
000238 2fe1      	MOV  R30,R17
000239 7fe0      	ANDI R30,LOW(0xF0)
00023a 2bea      	OR   R30,R26
00023b bbeb      	OUT  0x1B,R30
                +
00023c e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00023d 958a     +DEC R24
00023e f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00023f 9ada      	SBI  0x1B,2
                +
000240 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000241 958a     +DEC R24
000242 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000243 98da      	CBI  0x1B,2
                +
000244 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000245 958a     +DEC R24
000246 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000247 c074      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000248 93aa      	ST   -Y,R26
000249 81a8      	LD   R26,Y
00024a dfe8      	RCALL __lcd_write_nibble_G100
00024b 81e8          ld    r30,y
00024c 95e2          swap  r30
00024d 83e8          st    y,r30
00024e 81a8      	LD   R26,Y
00024f dfe3      	RCALL __lcd_write_nibble_G100
                +
000250 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000251 958a     +DEC R24
000252 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000253 9621      	ADIW R28,1
000254 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000255 931a      	ST   -Y,R17
000256 930a      	ST   -Y,R16
000257 2f1a      	MOV  R17,R26
000258 810a      	LDD  R16,Y+2
000259 2fe1      	MOV  R30,R17
00025a e0f0      	LDI  R31,0
00025b 51e5      	SUBI R30,LOW(-__base_y_G100)
00025c 4ffe      	SBCI R31,HIGH(-__base_y_G100)
00025d 81e0      	LD   R30,Z
00025e 0fe0      	ADD  R30,R16
00025f 2fae      	MOV  R26,R30
000260 dfe7      	RCALL __lcd_write_data
000261 2e50      	MOV  R5,R16
000262 2e41      	MOV  R4,R17
000263 8119      	LDD  R17,Y+1
000264 8108      	LDD  R16,Y+0
000265 9623      	ADIW R28,3
000266 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000267 e0a2      	LDI  R26,LOW(2)
000268 d090      	RCALL SUBOPT_0x7
000269 e0ac      	LDI  R26,LOW(12)
00026a dfdd      	RCALL __lcd_write_data
00026b e0a1      	LDI  R26,LOW(1)
00026c d08c      	RCALL SUBOPT_0x7
00026d e0e0      	LDI  R30,LOW(0)
00026e 2e4e      	MOV  R4,R30
00026f 2e5e      	MOV  R5,R30
000270 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000271 931a      	ST   -Y,R17
000272 2f1a      	MOV  R17,R26
000273 301a      	CPI  R17,10
000274 f011      	BREQ _0x2000005
000275 1457      	CP   R5,R7
000276 f038      	BRLO _0x2000004
                 _0x2000005:
000277 e0e0      	LDI  R30,LOW(0)
000278 93ea      	ST   -Y,R30
000279 9443      	INC  R4
00027a 2da4      	MOV  R26,R4
00027b dfd9      	RCALL _lcd_gotoxy
00027c 301a      	CPI  R17,10
00027d f1f1      	BREQ _0x2080001
                 _0x2000004:
00027e 9453      	INC  R5
00027f 9ad8      	SBI  0x1B,0
000280 2fa1      	MOV  R26,R17
000281 dfc6      	RCALL __lcd_write_data
000282 98d8      	CBI  0x1B,0
000283 c038      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000284 d081      	RCALL __SAVELOCR4
000285 019d      	MOVW R18,R26
                 _0x2000008:
000286 01d9      	MOVW R26,R18
                +
000287 5f2f     +SUBI R18 , LOW ( - 1 )
000288 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000289 91ec      	LD   R30,X
00028a 2f1e      	MOV  R17,R30
00028b 30e0      	CPI  R30,0
00028c f019      	BREQ _0x200000A
00028d 2fa1      	MOV  R26,R17
00028e dfe2      	RCALL _lcd_putchar
00028f cff6      	RJMP _0x2000008
                 _0x200000A:
                 _0x2080002:
000290 d07c      	RCALL __LOADLOCR4
000291 9624      	ADIW R28,4
000292 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000293 931a      	ST   -Y,R17
000294 2f1a      	MOV  R17,R26
000295 b3ea      	IN   R30,0x1A
000296 6fe0      	ORI  R30,LOW(0xF0)
000297 bbea      	OUT  0x1A,R30
000298 9ad2      	SBI  0x1A,2
000299 9ad0      	SBI  0x1A,0
00029a 9ad1      	SBI  0x1A,1
00029b 98da      	CBI  0x1B,2
00029c 98d8      	CBI  0x1B,0
00029d 98d9      	CBI  0x1B,1
00029e 2e71      	MOV  R7,R17
00029f 2fe1      	MOV  R30,R17
0002a0 58e0      	SUBI R30,-LOW(128)
                +
0002a1 93e0 01ed+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0002a3 2fe1      	MOV  R30,R17
0002a4 54e0      	SUBI R30,-LOW(192)
                +
0002a5 93e0 01ee+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0002a7 e1a4      	LDI  R26,LOW(20)
0002a8 e0b0      	LDI  R27,0
0002a9 d068      	RCALL _delay_ms
0002aa d052      	RCALL SUBOPT_0x8
0002ab d051      	RCALL SUBOPT_0x8
0002ac d050      	RCALL SUBOPT_0x8
0002ad e2a0      	LDI  R26,LOW(32)
0002ae df84      	RCALL __lcd_write_nibble_G100
                +
0002af ec88     +LDI R24 , LOW ( 200 )
0002b0 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002b1 9701     +SBIW R24 , 1
0002b2 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002b3 e2a8      	LDI  R26,LOW(40)
0002b4 df93      	RCALL __lcd_write_data
0002b5 e0a4      	LDI  R26,LOW(4)
0002b6 df91      	RCALL __lcd_write_data
0002b7 e8a5      	LDI  R26,LOW(133)
0002b8 df8f      	RCALL __lcd_write_data
0002b9 e0a6      	LDI  R26,LOW(6)
0002ba df8d      	RCALL __lcd_write_data
0002bb dfab      	RCALL _lcd_clear
                 _0x2080001:
0002bc 9119      	LD   R17,Y+
0002bd 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcmp:
                 ; .FSTART _strcmp
0002be 93ba      	ST   -Y,R27
0002bf 93aa      	ST   -Y,R26
0002c0 91e9          ld   r30,y+
0002c1 91f9          ld   r31,y+
0002c2 91a9          ld   r26,y+
0002c3 91b9          ld   r27,y+
                 strcmp0:
0002c4 916d          ld   r22,x+
0002c5 9171          ld   r23,z+
0002c6 1767          cp   r22,r23
0002c7 f421          brne strcmp1
0002c8 2366          tst  r22
0002c9 f7d1          brne strcmp0
                 strcmp3:
0002ca 27ee          clr  r30
0002cb 9508          ret
                 strcmp1:
0002cc 1b67          sub  r22,r23
0002cd f3e1          breq strcmp3
0002ce e0e1          ldi  r30,1
0002cf f408          brcc strcmp2
0002d0 50e2          subi r30,2
                 strcmp2:
0002d1 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _users:
0001b9           	.BYTE 0x32
                 __base_y_G100:
0001eb           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x0:
0002d2 93fa      	ST   -Y,R31
0002d3 93ea      	ST   -Y,R30
0002d4 eea8      	LDI  R26,LOW(1000)
0002d5 e0b3      	LDI  R27,HIGH(1000)
0002d6 cf24      	RJMP _displayMessage
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0002d7 87e8      	STD  Y+8,R30
0002d8 87f9      	STD  Y+8+1,R31
0002d9 93fa      	ST   -Y,R31
0002da 93ea      	ST   -Y,R30
0002db 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
0002dc 93fa      	ST   -Y,R31
0002dd 93ea      	ST   -Y,R30
0002de e0a4      	LDI  R26,LOW(4)
0002df e0b0      	LDI  R27,0
0002e0 ced9      	RJMP _EE_ReadString
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
0002e1 85e8      	LDD  R30,Y+8
0002e2 85f9      	LDD  R31,Y+8+1
0002e3 9634      	ADIW R30,4
0002e4 87e8      	STD  Y+8,R30
0002e5 87f9      	STD  Y+8+1,R31
0002e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0002e7 d01e      	RCALL __SAVELOCR4
0002e8 018d      	MOVW R16,R26
                +
0002e9 812c     +LDD R18 , Y + 4
0002ea 813d     +LDD R19 , Y + 4 + 1
                 	__GETWRS 18,19,4
0002eb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x5:
0002ec 931a      	ST   -Y,R17
0002ed 930a      	ST   -Y,R16
                +
0002ee e0aa     +LDI R26 , 10
0002ef 9fa2     +MUL R26 , R18
0002f0 01f0     +MOVW R30 , R0
0002f1 9fa3     +MUL R26 , R19
0002f2 0df0     +ADD R31 , R0
                 	__MULBNWRU 18,19,10
0002f3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0002f4 01df      	MOVW R26,R30
0002f5 deb0      	RCALL _EE_WriteString
                +
0002f6 5f0c     +SUBI R16 , LOW ( - 4 )
0002f7 4f1f     +SBCI R17 , HIGH ( - 4 )
                 	__ADDWRN 16,17,4
0002f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0002f9 df4e      	RCALL __lcd_write_data
0002fa e0a3      	LDI  R26,LOW(3)
0002fb e0b0      	LDI  R27,0
0002fc c015      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x8:
0002fd e3a0      	LDI  R26,LOW(48)
0002fe df34      	RCALL __lcd_write_nibble_G100
                +
0002ff ec88     +LDI R24 , LOW ( 200 )
000300 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000301 9701     +SBIW R24 , 1
000302 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000303 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000304 935a      	ST   -Y,R21
                 __SAVELOCR5:
000305 934a      	ST   -Y,R20
                 __SAVELOCR4:
000306 933a      	ST   -Y,R19
                 __SAVELOCR3:
000307 932a      	ST   -Y,R18
                 __SAVELOCR2:
000308 931a      	ST   -Y,R17
000309 930a      	ST   -Y,R16
00030a 9508      	RET
                 
                 __LOADLOCR6:
00030b 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00030c 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00030d 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00030e 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00030f 8119      	LDD  R17,Y+1
000310 8108      	LD   R16,Y
000311 9508      	RET
                 
                 _delay_ms:
000312 9610      	adiw r26,0
000313 f039      	breq __delay_ms1
                 __delay_ms0:
000314 95a8      	wdr
                +
000315 ed80     +LDI R24 , LOW ( 0x7D0 )
000316 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000317 9701     +SBIW R24 , 1
000318 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000319 9711      	sbiw r26,1
00031a f7c9      	brne __delay_ms0
                 __delay_ms1:
00031b 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   6 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  33 r17:  38 r18:  18 r19:  13 r20:   5 r21:   5 r22:   6 r23:   3 
r24:  21 r25:   5 r26:  78 r27:  16 r28:  18 r29:   1 r30: 160 r31:  36 
x  :  14 y  :  89 z  :  13 
Registers used: 24 out of 35 (68.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   5 
adiw  :  22 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   9 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  29 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   3 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   3 cpc   :   2 cpi   :  20 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   6 inc   :   2 jmp   :  22 ld    :  21 ldd   :  30 ldi   :  92 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  20 movw  :  33 
mul   :   2 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   1 out   :  15 pop   :   2 push  :   2 rcall :  74 ret   :  32 
reti  :   0 rjmp  :  35 rol   :   0 ror   :   0 sbc   :   0 sbci  :  11 
sbi   :  20 sbic  :   2 sbis  :  12 sbiw  :  13 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  43 std   :  15 sts   :   2 sub   :   1 subi  :  17 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 48 out of 116 (41.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000638   1358    234   1592   16384   9.7%
[.dseg] 0x000060 0x0001ef      0    143    143    1024  14.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
