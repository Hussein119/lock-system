
AVRASM ver. 2.1.30  E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm Sat Dec 16 19:18:39 2023

E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm(1417): warning: Register r5 already defined by the .DEF directive
E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm(1418): warning: Register r4 already defined by the .DEF directive
E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm(1419): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.52 
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x37
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 009f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G102:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G102:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x4:
000033 0160
000034 3131
000035 0031
000036 3032      	.DB  LOW(_0x3),HIGH(_0x3),0x31,0x31,0x31,0x0,0x32,0x30
000037 0033
000038 0165
000039 3231
00003a 0036      	.DB  0x33,0x0,LOW(_0x3+5),HIGH(_0x3+5),0x31,0x32,0x36,0x0
00003b 3231
00003c 0039
00003d 016b
00003e 3231      	.DB  0x31,0x32,0x39,0x0,LOW(_0x3+11),HIGH(_0x3+11),0x31,0x32
00003f 0038
000040 3233
000041 0035
000042 016f      	.DB  0x38,0x0,0x33,0x32,0x35,0x0,LOW(_0x3+15),HIGH(_0x3+15)
000043 3331
000044 0030
000045 3234
000046 0036      	.DB  0x31,0x33,0x30,0x0,0x34,0x32,0x36,0x0
000047 0174
000048 3331
000049 0032
00004a 3730      	.DB  LOW(_0x3+20),HIGH(_0x3+20),0x31,0x33,0x32,0x0,0x30,0x37
E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm(1463): warning: .cseg .db misalignment - padding zero byte
00004b 0039      	.DB  0x39
                 _0x0:
00004c 7250
00004d 666f
00004e 4100
00004f 6d68      	.DB  0x50,0x72,0x6F,0x66,0x0,0x41,0x68,0x6D
000050 6465
000051 4100
000052 726d
000053 4100      	.DB  0x65,0x64,0x0,0x41,0x6D,0x72,0x0,0x41
000054 6564
000055 006c
000056 6d4f
000057 7265      	.DB  0x64,0x65,0x6C,0x0,0x4F,0x6D,0x65,0x72
000058 4500
000059 746e
00005a 7265
00005b 7920      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x79
00005c 756f
00005d 2072
00005e 4449
00005f 203a      	.DB  0x6F,0x75,0x72,0x20,0x49,0x44,0x3A,0x20
000060 4500
000061 746e
000062 7265
000063 7920      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x79
000064 756f
000065 2072
000066 4350
000067 203a      	.DB  0x6F,0x75,0x72,0x20,0x50,0x43,0x3A,0x20
000068 5700
000069 6c65
00006a 6f63
00006b 656d      	.DB  0x0,0x57,0x65,0x6C,0x63,0x6F,0x6D,0x65
00006c 5300
00006d 726f
00006e 7972
00006f 7720      	.DB  0x0,0x53,0x6F,0x72,0x72,0x79,0x20,0x77
000070 6f72
000071 676e
000072 5020
000073 0043      	.DB  0x72,0x6F,0x6E,0x67,0x20,0x50,0x43,0x0
000074 7257
000075 6e6f
000076 2067
000077 4449      	.DB  0x57,0x72,0x6F,0x6E,0x67,0x20,0x49,0x44
E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm(1476): warning: .cseg .db misalignment - padding zero byte
000078 0000      	.DB  0x0
                 _0x2000003:
000079 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00007a 0005      	.DW  0x05
00007b 0160      	.DW  _0x3
00007c 0098      	.DW  _0x0*2
                 
00007d 0006      	.DW  0x06
00007e 0165      	.DW  _0x3+5
00007f 009d      	.DW  _0x0*2+5
                 
000080 0004      	.DW  0x04
000081 016b      	.DW  _0x3+11
000082 00a3      	.DW  _0x0*2+11
                 
000083 0005      	.DW  0x05
000084 016f      	.DW  _0x3+15
000085 00a7      	.DW  _0x0*2+15
                 
000086 0005      	.DW  0x05
000087 0174      	.DW  _0x3+20
000088 00ac      	.DW  _0x0*2+20
                 
000089 0031      	.DW  0x31
00008a 01b9      	.DW  _users
00008b 0066      	.DW  _0x4*2
                 
00008c 0010      	.DW  0x10
00008d 0179      	.DW  _0xC
00008e 00b1      	.DW  _0x0*2+25
                 
00008f 0010      	.DW  0x10
000090 0189      	.DW  _0xC+16
000091 00c1      	.DW  _0x0*2+41
                 
000092 0008      	.DW  0x08
000093 0199      	.DW  _0xC+32
000094 00d1      	.DW  _0x0*2+57
                 
000095 000f      	.DW  0x0F
000096 01a1      	.DW  _0xC+40
000097 00d9      	.DW  _0x0*2+65
                 
000098 0009      	.DW  0x09
000099 01b0      	.DW  _0xC+55
00009a 00e8      	.DW  _0x0*2+80
                 
00009b 0002      	.DW  0x02
00009c 01eb      	.DW  __base_y_G100
00009d 00f2      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00009e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00009f 94f8      	CLI
0000a0 27ee      	CLR  R30
0000a1 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000a2 e0f1      	LDI  R31,1
0000a3 bffb      	OUT  GICR,R31
0000a4 bfeb      	OUT  GICR,R30
0000a5 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000a6 e08d      	LDI  R24,(14-2)+1
0000a7 e0a2      	LDI  R26,2
0000a8 27bb      	CLR  R27
                 __CLEAR_REG:
0000a9 93ed      	ST   X+,R30
0000aa 958a      	DEC  R24
0000ab f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000ac e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000ad e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000ae e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000af 93ed      	ST   X+,R30
0000b0 9701      	SBIW R24,1
0000b1 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000b2 efe4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000b3 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000b4 9185      	LPM  R24,Z+
0000b5 9195      	LPM  R25,Z+
0000b6 9700      	SBIW R24,0
0000b7 f061      	BREQ __GLOBAL_INI_END
0000b8 91a5      	LPM  R26,Z+
0000b9 91b5      	LPM  R27,Z+
0000ba 9005      	LPM  R0,Z+
0000bb 9015      	LPM  R1,Z+
0000bc 01bf      	MOVW R22,R30
0000bd 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000be 9005      	LPM  R0,Z+
0000bf 920d      	ST   X+,R0
0000c0 9701      	SBIW R24,1
0000c1 f7e1      	BRNE __GLOBAL_INI_LOOP
0000c2 01fb      	MOVW R30,R22
0000c3 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000c4 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000c5 bfed      	OUT  SPL,R30
0000c6 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000c7 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000c8 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000c9 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000ca 940c 00cc 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;char keypad();
                 ;unsigned char EE_Read(unsigned int address);
                 ;void EE_Write(unsigned int address, unsigned char data);
                 ;void EE_WriteString(unsigned int address, const char *str);
                 ;void EE_ReadString(unsigned int address, char *buffer, unsigned int length);
                 ;void initializeUsers();
                 ;void displayMessage(char *message, int delay_ms_value);
                 ;int enterValueWithKeypad(char *buffer);
                 
                 	.DSEG
                 _0x3:
000160           	.BYTE 0x19
                 ;void main(void)
                 ; 0000 002C {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 002D // Set keypad ports
                 ; 0000 002E DDRC = 0b00000111;
0000cc e0e7      	LDI  R30,LOW(7)
0000cd bbe4      	OUT  0x14,R30
                 ; 0000 002F PORTC = 0b11111000;
0000ce efe8      	LDI  R30,LOW(248)
0000cf bbe5      	OUT  0x15,R30
                 ; 0000 0030 
                 ; 0000 0031 // Initialize the LCD
                 ; 0000 0032 lcd_init(16);
0000d0 e1a0      	LDI  R26,LOW(16)
0000d1 d1b2      	RCALL _lcd_init
                 ; 0000 0033 
                 ; 0000 0034 // Set the door as input (now by default the door is closed)
                 ; 0000 0035 DDRB .0 = 0;
0000d2 98b8      	CBI  0x17,0
                 ; 0000 0036 PORTB .0 = 1; // turn on pull up resistance
0000d3 9ac0      	SBI  0x18,0
                 ; 0000 0037 
                 ; 0000 0038 // Initialize user data in EEPROM
                 ; 0000 0039 initializeUsers();
0000d4 d102      	RCALL _initializeUsers
                 ; 0000 003A 
                 ; 0000 003B while (1)
                 _0x9:
                 ; 0000 003C {
                 ; 0000 003D char enteredID[4];  // Change data type to string
                 ; 0000 003E User currentUser;
                 ; 0000 003F unsigned int address = 0;
                 ; 0000 0040 int userFound = 0;
                 ; 0000 0041 int i;
                 ; 0000 0042 
                 ; 0000 0043 displayMessage("Enter your ID: ", 1000);
0000d5 9764      	SBIW R28,20
0000d6 e0e0      	LDI  R30,LOW(0)
0000d7 83ea      	STD  Y+2,R30
0000d8 83eb      	STD  Y+3,R30
0000d9 83ec      	STD  Y+4,R30
0000da 83ed      	STD  Y+5,R30
                 ;	enteredID -> Y+16
                 ;	currentUser -> Y+6
                 ;	address -> Y+4
                 ;	userFound -> Y+2
                 ;	i -> Y+0
                +
0000db e7e9     +LDI R30 , LOW ( _0xC + ( 0 ) )
0000dc e0f1     +LDI R31 , HIGH ( _0xC + ( 0 ) )
                 	__POINTW1MN _0xC,0
0000dd d1e5      	RCALL SUBOPT_0x0
                 ; 0000 0044 
                 ; 0000 0045 if (enterValueWithKeypad(enteredID))
0000de 01de      	MOVW R26,R28
0000df 9650      	ADIW R26,16
0000e0 d11e      	RCALL _enterValueWithKeypad
0000e1 9730      	SBIW R30,0
0000e2 f409      	BRNE PC+2
0000e3 c045      	RJMP _0xD
                 ; 0000 0046 {
                 ; 0000 0047 char enteredPC[4];
                 ; 0000 0048 for (i = 0; i < sizeof(users) / sizeof(users[0]); ++i)
0000e4 9724      	SBIW R28,4
                 ;	enteredID -> Y+20
                 ;	currentUser -> Y+10
                 ;	address -> Y+8
                 ;	userFound -> Y+6
                 ;	i -> Y+4
                 ;	enteredPC -> Y+0
0000e5 e0e0      	LDI  R30,LOW(0)
0000e6 83ec      	STD  Y+4,R30
0000e7 83ed      	STD  Y+4+1,R30
                 _0xF:
0000e8 81ac      	LDD  R26,Y+4
0000e9 81bd      	LDD  R27,Y+4+1
0000ea 9715      	SBIW R26,5
0000eb f5e4      	BRGE _0x10
                 ; 0000 0049 {
                 ; 0000 004A address += sizeof(users[i].name);
0000ec 85e8      	LDD  R30,Y+8
0000ed 85f9      	LDD  R31,Y+8+1
0000ee 9632      	ADIW R30,2
0000ef d1d8      	RCALL SUBOPT_0x1
                 ; 0000 004B EE_ReadString(address, currentUser.id, sizeof(currentUser.id));  // Read ID as a string
0000f0 01fe      	MOVW R30,R28
0000f1 963e      	ADIW R30,14
0000f2 d1da      	RCALL SUBOPT_0x2
                 ; 0000 004C 
                 ; 0000 004D if (strcmp(currentUser.id, enteredID) == 0)
0000f3 01fe      	MOVW R30,R28
0000f4 963c      	ADIW R30,12
0000f5 93fa      	ST   -Y,R31
0000f6 93ea      	ST   -Y,R30
0000f7 01de      	MOVW R26,R28
0000f8 9656      	ADIW R26,22
0000f9 d1b5      	RCALL _strcmp
0000fa 30e0      	CPI  R30,0
0000fb f521      	BRNE _0x11
                 ; 0000 004E {
                 ; 0000 004F 
                 ; 0000 0050 address += sizeof(users[i].id);
0000fc 85e8      	LDD  R30,Y+8
0000fd 85f9      	LDD  R31,Y+8+1
0000fe 9634      	ADIW R30,4
0000ff d1c8      	RCALL SUBOPT_0x1
                 ; 0000 0051 EE_ReadString(address, currentUser.pc, sizeof(currentUser.pc));  // Read PC as a string
000100 01fe      	MOVW R30,R28
000101 9672      	ADIW R30,18
000102 d1ca      	RCALL SUBOPT_0x2
                 ; 0000 0052 
                 ; 0000 0053 displayMessage("Enter your PC: ", 1000);
                +
000103 e8e9     +LDI R30 , LOW ( _0xC + ( 16 ) )
000104 e0f1     +LDI R31 , HIGH ( _0xC + ( 16 ) )
                 	__POINTW1MN _0xC,16
000105 d1bd      	RCALL SUBOPT_0x0
                 ; 0000 0054 
                 ; 0000 0055 if (enterValueWithKeypad(enteredPC))
000106 01de      	MOVW R26,R28
000107 d0f7      	RCALL _enterValueWithKeypad
000108 9730      	SBIW R30,0
000109 f089      	BREQ _0x12
                 ; 0000 0056 {
                 ; 0000 0057 if (strcmp(currentUser.pc, enteredPC) == 0)
00010a 01fe      	MOVW R30,R28
00010b 9670      	ADIW R30,16
00010c 93fa      	ST   -Y,R31
00010d 93ea      	ST   -Y,R30
00010e 01de      	MOVW R26,R28
00010f 9612      	ADIW R26,2
000110 d19e      	RCALL _strcmp
000111 30e0      	CPI  R30,0
000112 f429      	BRNE _0x13
                 ; 0000 0058 {
                 ; 0000 0059 displayMessage("Welcome", 1000);
                +
000113 e9e9     +LDI R30 , LOW ( _0xC + ( 32 ) )
000114 e0f1     +LDI R31 , HIGH ( _0xC + ( 32 ) )
                 	__POINTW1MN _0xC,32
000115 d1ad      	RCALL SUBOPT_0x0
                 ; 0000 005A // Open the door
                 ; 0000 005B DDRB .0 = 1;
000116 9ab8      	SBI  0x17,0
                 ; 0000 005C }
                 ; 0000 005D else
000117 c003      	RJMP _0x16
                 _0x13:
                 ; 0000 005E displayMessage("Sorry wrong PC", 1000);
                +
000118 eae1     +LDI R30 , LOW ( _0xC + ( 40 ) )
000119 e0f1     +LDI R31 , HIGH ( _0xC + ( 40 ) )
                 	__POINTW1MN _0xC,40
00011a d1a8      	RCALL SUBOPT_0x0
                 ; 0000 005F }
                 _0x16:
                 ; 0000 0060 
                 ; 0000 0061 userFound = 1;
                 _0x12:
00011b e0e1      	LDI  R30,LOW(1)
00011c e0f0      	LDI  R31,HIGH(1)
00011d 83ee      	STD  Y+6,R30
00011e 83ff      	STD  Y+6+1,R31
                 ; 0000 0062 break;
00011f c008      	RJMP _0x10
                 ; 0000 0063 }
                 ; 0000 0064 
                 ; 0000 0065 address += sizeof(users[i].id);
                 _0x11:
000120 d1b1      	RCALL SUBOPT_0x3
                 ; 0000 0066 address += sizeof(users[i].pc);
000121 d1b0      	RCALL SUBOPT_0x3
                 ; 0000 0067 }
000122 81ec      	LDD  R30,Y+4
000123 81fd      	LDD  R31,Y+4+1
000124 9631      	ADIW R30,1
000125 83ec      	STD  Y+4,R30
000126 83fd      	STD  Y+4+1,R31
000127 cfc0      	RJMP _0xF
                 _0x10:
                 ; 0000 0068 }
000128 9624      	ADIW R28,4
                 ; 0000 0069 
                 ; 0000 006A if (!userFound)
                 _0xD:
000129 81ea      	LDD  R30,Y+2
00012a 81fb      	LDD  R31,Y+2+1
00012b 9730      	SBIW R30,0
00012c f419      	BRNE _0x17
                 ; 0000 006B {
                 ; 0000 006C displayMessage("Wrong ID", 1000);
                +
00012d ebe0     +LDI R30 , LOW ( _0xC + ( 55 ) )
00012e e0f1     +LDI R31 , HIGH ( _0xC + ( 55 ) )
                 	__POINTW1MN _0xC,55
00012f d193      	RCALL SUBOPT_0x0
                 ; 0000 006D // Two peeps alarm
                 ; 0000 006E }
                 ; 0000 006F 
                 ; 0000 0070 delay_ms(2000);
                 _0x17:
000130 eda0      	LDI  R26,LOW(2000)
000131 e0b7      	LDI  R27,HIGH(2000)
000132 d1d0      	RCALL _delay_ms
                 ; 0000 0071 }
000133 9664      	ADIW R28,20
000134 cfa0      	RJMP _0x9
                 ; 0000 0072 }
                 _0x18:
000135 cfff      	RJMP _0x18
                 ; .FEND
                 
                 	.DSEG
                 _0xC:
000179           	.BYTE 0x40
                 ;char keypad()
                 ; 0000 0075 {
                 
                 	.CSEG
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 0076 while (1)
                 _0x19:
                 ; 0000 0077 {
                 ; 0000 0078 PORTC .0 = 0;
000136 98a8      	CBI  0x15,0
                 ; 0000 0079 PORTC .1 = 1;
000137 9aa9      	SBI  0x15,1
                 ; 0000 007A PORTC .2 = 1;
000138 9aaa      	SBI  0x15,2
                 ; 0000 007B 
                 ; 0000 007C switch (PINC)
000139 b3e3      	IN   R30,0x13
                 ; 0000 007D {
                 ; 0000 007E case 0b11110110:
00013a 3fe6      	CPI  R30,LOW(0xF6)
00013b f421      	BRNE _0x25
                 ; 0000 007F while (PINC .3 == 0);
                 _0x26:
00013c 9b9b      	SBIS 0x13,3
00013d cffe      	RJMP _0x26
                 ; 0000 0080 return 1;
00013e e0e1      	LDI  R30,LOW(1)
00013f 9508      	RET
                 ; 0000 0081 case 0b11101110:
                 _0x25:
000140 3eee      	CPI  R30,LOW(0xEE)
000141 f421      	BRNE _0x29
                 ; 0000 0082 while (PINC .4 == 0);
                 _0x2A:
000142 9b9c      	SBIS 0x13,4
000143 cffe      	RJMP _0x2A
                 ; 0000 0083 return 4;
000144 e0e4      	LDI  R30,LOW(4)
000145 9508      	RET
                 ; 0000 0084 case 0b11011110:
                 _0x29:
000146 3dee      	CPI  R30,LOW(0xDE)
000147 f421      	BRNE _0x2D
                 ; 0000 0085 while (PINC .5 == 0);
                 _0x2E:
000148 9b9d      	SBIS 0x13,5
000149 cffe      	RJMP _0x2E
                 ; 0000 0086 return 7;
00014a e0e7      	LDI  R30,LOW(7)
00014b 9508      	RET
                 ; 0000 0087 case 0b10111110:
                 _0x2D:
00014c 3bee      	CPI  R30,LOW(0xBE)
00014d f421      	BRNE _0x24
                 ; 0000 0088 while (PINC .6 == 0);
                 _0x32:
00014e 9b9e      	SBIS 0x13,6
00014f cffe      	RJMP _0x32
                 ; 0000 0089 return 10;
000150 e0ea      	LDI  R30,LOW(10)
000151 9508      	RET
                 ; 0000 008A }
                 _0x24:
                 ; 0000 008B 
                 ; 0000 008C PORTC .0 = 1;
000152 9aa8      	SBI  0x15,0
                 ; 0000 008D PORTC .1 = 0;
000153 98a9      	CBI  0x15,1
                 ; 0000 008E PORTC .2 = 1;
000154 9aaa      	SBI  0x15,2
                 ; 0000 008F 
                 ; 0000 0090 switch (PINC)
000155 b3e3      	IN   R30,0x13
                 ; 0000 0091 {
                 ; 0000 0092 case 0b11110101:
000156 3fe5      	CPI  R30,LOW(0xF5)
000157 f421      	BRNE _0x3E
                 ; 0000 0093 while (PINC .3 == 0);
                 _0x3F:
000158 9b9b      	SBIS 0x13,3
000159 cffe      	RJMP _0x3F
                 ; 0000 0094 return 2;
00015a e0e2      	LDI  R30,LOW(2)
00015b 9508      	RET
                 ; 0000 0095 case 0b11101101:
                 _0x3E:
00015c 3eed      	CPI  R30,LOW(0xED)
00015d f421      	BRNE _0x42
                 ; 0000 0096 while (PINC .4 == 0);
                 _0x43:
00015e 9b9c      	SBIS 0x13,4
00015f cffe      	RJMP _0x43
                 ; 0000 0097 return 5;
000160 e0e5      	LDI  R30,LOW(5)
000161 9508      	RET
                 ; 0000 0098 case 0b11011101:
                 _0x42:
000162 3ded      	CPI  R30,LOW(0xDD)
000163 f421      	BRNE _0x46
                 ; 0000 0099 while (PINC .5 == 0);
                 _0x47:
000164 9b9d      	SBIS 0x13,5
000165 cffe      	RJMP _0x47
                 ; 0000 009A return 8;
000166 e0e8      	LDI  R30,LOW(8)
000167 9508      	RET
                 ; 0000 009B case 0b10111101:
                 _0x46:
000168 3bed      	CPI  R30,LOW(0xBD)
000169 f421      	BRNE _0x3D
                 ; 0000 009C while (PINC .6 == 0);
                 _0x4B:
00016a 9b9e      	SBIS 0x13,6
00016b cffe      	RJMP _0x4B
                 ; 0000 009D return 0;
00016c e0e0      	LDI  R30,LOW(0)
00016d 9508      	RET
                 ; 0000 009E }
                 _0x3D:
                 ; 0000 009F 
                 ; 0000 00A0 PORTC .0 = 1;
00016e 9aa8      	SBI  0x15,0
                 ; 0000 00A1 PORTC .1 = 1;
00016f 9aa9      	SBI  0x15,1
                 ; 0000 00A2 PORTC .2 = 0;
000170 98aa      	CBI  0x15,2
                 ; 0000 00A3 
                 ; 0000 00A4 switch (PINC)
000171 b3e3      	IN   R30,0x13
                 ; 0000 00A5 {
                 ; 0000 00A6 case 0b11110011:
000172 3fe3      	CPI  R30,LOW(0xF3)
000173 f421      	BRNE _0x57
                 ; 0000 00A7 while (PINC .3 == 0);
                 _0x58:
000174 9b9b      	SBIS 0x13,3
000175 cffe      	RJMP _0x58
                 ; 0000 00A8 return 3;
000176 e0e3      	LDI  R30,LOW(3)
000177 9508      	RET
                 ; 0000 00A9 case 0b11101011:
                 _0x57:
000178 3eeb      	CPI  R30,LOW(0xEB)
000179 f421      	BRNE _0x5B
                 ; 0000 00AA while (PINC .4 == 0);
                 _0x5C:
00017a 9b9c      	SBIS 0x13,4
00017b cffe      	RJMP _0x5C
                 ; 0000 00AB return 6;
00017c e0e6      	LDI  R30,LOW(6)
00017d 9508      	RET
                 ; 0000 00AC case 0b11011011:
                 _0x5B:
00017e 3deb      	CPI  R30,LOW(0xDB)
00017f f421      	BRNE _0x5F
                 ; 0000 00AD while (PINC .5 == 0);
                 _0x60:
000180 9b9d      	SBIS 0x13,5
000181 cffe      	RJMP _0x60
                 ; 0000 00AE return 9;
000182 e0e9      	LDI  R30,LOW(9)
000183 9508      	RET
                 ; 0000 00AF case 0b10111011:
                 _0x5F:
000184 3beb      	CPI  R30,LOW(0xBB)
000185 f421      	BRNE _0x56
                 ; 0000 00B0 while (PINC .6 == 0);
                 _0x64:
000186 9b9e      	SBIS 0x13,6
000187 cffe      	RJMP _0x64
                 ; 0000 00B1 return 11;
000188 e0eb      	LDI  R30,LOW(11)
000189 9508      	RET
                 ; 0000 00B2 }
                 _0x56:
                 ; 0000 00B3 }
00018a cfab      	RJMP _0x19
                 ; 0000 00B4 }
                 ; .FEND
                 ;unsigned char EE_Read(unsigned int address)
                 ; 0000 00B7 {
                 _EE_Read:
                 ; .FSTART _EE_Read
                 ; 0000 00B8 while (EECR .1 == 1); // Wait till EEPROM is ready
00018b 931a      	ST   -Y,R17
00018c 930a      	ST   -Y,R16
00018d 018d      	MOVW R16,R26
                 ;	address -> R16,R17
                 _0x67:
00018e 99e1      	SBIC 0x1C,1
00018f cffe      	RJMP _0x67
                 ; 0000 00B9 EEAR = address;       // Prepare the address you want to read from
                +
000190 bb1f     +OUT 30 + 1 , R17
000191 bb0e     +OUT 30 , R16
                 	__OUTWR 16,17,30
                 ; 0000 00BA EECR .0 = 1;          // Execute read command
000192 9ae0      	SBI  0x1C,0
                 ; 0000 00BB return EEDR;
000193 b3ed      	IN   R30,0x1D
000194 c08c      	RJMP _0x2080003
                 ; 0000 00BC }
                 ; .FEND
                 ;void EE_Write(unsigned int address, unsigned char data)
                 ; 0000 00BF {
                 _EE_Write:
                 ; .FSTART _EE_Write
                 ; 0000 00C0 while (EECR .1 == 1); // Wait till EEPROM is ready
000195 d161      	RCALL __SAVELOCR4
000196 2f1a      	MOV  R17,R26
                +
000197 812c     +LDD R18 , Y + 4
000198 813d     +LDD R19 , Y + 4 + 1
                 	__GETWRS 18,19,4
                 ;	address -> R18,R19
                 ;	data -> R17
                 _0x6C:
000199 99e1      	SBIC 0x1C,1
00019a cffe      	RJMP _0x6C
                 ; 0000 00C1 EEAR = address;       // Prepare the address you want to read from
                +
00019b bb3f     +OUT 30 + 1 , R19
00019c bb2e     +OUT 30 , R18
                 	__OUTWR 18,19,30
                 ; 0000 00C2 EEDR = data;          // Prepare the data you want to write in the address above
00019d bb1d      	OUT  0x1D,R17
                 ; 0000 00C3 EECR .2 = 1;          // Master write enable
00019e 9ae2      	SBI  0x1C,2
                 ; 0000 00C4 EECR .1 = 1;          // Write Enable
00019f 9ae1      	SBI  0x1C,1
                 ; 0000 00C5 }
0001a0 c05b      	RJMP _0x2080004
                 ; .FEND
                 ;void EE_WriteString(unsigned int address, const char *str)
                 ; 0000 00C8 {
                 _EE_WriteString:
                 ; .FSTART _EE_WriteString
                 ; 0000 00C9 // Write each character of the string to EEPROM
                 ; 0000 00CA while (*str)
0001a1 d136      	RCALL SUBOPT_0x4
                 ;	address -> R18,R19
                 ;	*str -> R16,R17
                 _0x73:
0001a2 01d8      	MOVW R26,R16
0001a3 91ec      	LD   R30,X
0001a4 30e0      	CPI  R30,0
0001a5 f051      	BREQ _0x75
                 ; 0000 00CB EE_Write(address++, *str++);
0001a6 01f9      	MOVW R30,R18
                +
0001a7 5f2f     +SUBI R18 , LOW ( - 1 )
0001a8 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0001a9 93fa      	ST   -Y,R31
0001aa 93ea      	ST   -Y,R30
                +
0001ab 5f0f     +SUBI R16 , LOW ( - 1 )
0001ac 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001ad 91ac      	LD   R26,X
0001ae dfe6      	RCALL _EE_Write
0001af cff2      	RJMP _0x73
                 _0x75:
                 ; 0000 00CD EE_Write(address, '\0');
0001b0 933a      	ST   -Y,R19
0001b1 932a      	ST   -Y,R18
0001b2 e0a0      	LDI  R26,LOW(0)
0001b3 dfe1      	RCALL _EE_Write
                 ; 0000 00CE }
0001b4 c047      	RJMP _0x2080004
                 ; .FEND
                 ;void EE_ReadString(unsigned int address, char *buffer, unsigned int length)
                 ; 0000 00D1 {
                 _EE_ReadString:
                 ; .FSTART _EE_ReadString
                 ; 0000 00D2 unsigned int i;
                 ; 0000 00D3 for (i = 0; i < length; ++i)
0001b5 d13f      	RCALL __SAVELOCR6
0001b6 019d      	MOVW R18,R26
                +
0001b7 814e     +LDD R20 , Y + 6
0001b8 815f     +LDD R21 , Y + 6 + 1
                 	__GETWRS 20,21,6
                 ;	address -> Y+8
                 ;	*buffer -> R20,R21
                 ;	length -> R18,R19
                 ;	i -> R16,R17
                +
0001b9 e000     +LDI R16 , LOW ( 0 )
0001ba e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x77:
                +
0001bb 1702     +CP R16 , R18
0001bc 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
0001bd f4b0      	BRSH _0x78
                 ; 0000 00D4 {
                 ; 0000 00D5 buffer[i] = EE_Read(address + i);
0001be 01f8      	MOVW R30,R16
0001bf 0fe4      	ADD  R30,R20
0001c0 1ff5      	ADC  R31,R21
0001c1 93ff      	PUSH R31
0001c2 93ef      	PUSH R30
0001c3 85a8      	LDD  R26,Y+8
0001c4 85b9      	LDD  R27,Y+8+1
0001c5 0fa0      	ADD  R26,R16
0001c6 1fb1      	ADC  R27,R17
0001c7 dfc3      	RCALL _EE_Read
0001c8 91af      	POP  R26
0001c9 91bf      	POP  R27
0001ca 93ec      	ST   X,R30
                 ; 0000 00D6 if (buffer[i] == '\0')
0001cb 01f8      	MOVW R30,R16
0001cc 0fe4      	ADD  R30,R20
0001cd 1ff5      	ADC  R31,R21
0001ce 81e0      	LD   R30,Z
0001cf 30e0      	CPI  R30,0
0001d0 f019      	BREQ _0x78
                 ; 0000 00D7 break;
                 ; 0000 00D8 }
                +
0001d1 5f0f     +SUBI R16 , LOW ( - 1 )
0001d2 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001d3 cfe7      	RJMP _0x77
                 _0x78:
                 ; 0000 00D9 }
0001d4 d127      	RCALL __LOADLOCR6
0001d5 962a      	ADIW R28,10
0001d6 9508      	RET
                 ; .FEND
                 ;void initializeUsers()
                 ; 0000 00DC {
                 _initializeUsers:
                 ; .FSTART _initializeUsers
                 ; 0000 00DD unsigned int address = 0;
                 ; 0000 00DE int i;
                 ; 0000 00DF for (i = 0; i < sizeof(users) / sizeof(users[0]); ++i)
0001d7 d11f      	RCALL __SAVELOCR4
                 ;	address -> R16,R17
                 ;	i -> R18,R19
                +
0001d8 e000     +LDI R16 , LOW ( 0 )
0001d9 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0001da e020     +LDI R18 , LOW ( 0 )
0001db e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x7B:
                +
0001dc 3025     +CPI R18 , LOW ( 5 )
0001dd e0e0     +LDI R30 , HIGH ( 5 )
0001de 073e     +CPC R19 , R30
                 	__CPWRN 18,19,5
0001df f4ac      	BRGE _0x7C
                 ; 0000 00E0 {
                 ; 0000 00E1 EE_WriteString(address, users[i].name);
0001e0 d0fc      	RCALL SUBOPT_0x5
0001e1 54e7      	SUBI R30,LOW(-_users)
0001e2 4ffe      	SBCI R31,HIGH(-_users)
0001e3 01df      	MOVW R26,R30
0001e4 91ed      	LD   R30,X+
0001e5 91fd      	LD   R31,X+
0001e6 01df      	MOVW R26,R30
0001e7 dfb9      	RCALL _EE_WriteString
                 ; 0000 00E2 address += sizeof(users[i].name);
                +
0001e8 5f0e     +SUBI R16 , LOW ( - 2 )
0001e9 4f1f     +SBCI R17 , HIGH ( - 2 )
                 	__ADDWRN 16,17,2
                 ; 0000 00E3 
                 ; 0000 00E4 EE_WriteString(address, users[i].id);
0001ea d0f2      	RCALL SUBOPT_0x5
                +
0001eb 54e5     +SUBI R30 , LOW ( - _users - ( 2 ) )
0001ec 4ffe     +SBCI R31 , HIGH ( - _users - ( 2 ) )
                 	__ADDW1MN _users,2
0001ed d0f7      	RCALL SUBOPT_0x6
                 ; 0000 00E5 address += sizeof(users[i].id);
                 ; 0000 00E6 
                 ; 0000 00E7 EE_WriteString(address, users[i].pc);
0001ee d0ee      	RCALL SUBOPT_0x5
                +
0001ef 54e1     +SUBI R30 , LOW ( - _users - ( 6 ) )
0001f0 4ffe     +SBCI R31 , HIGH ( - _users - ( 6 ) )
                 	__ADDW1MN _users,6
0001f1 d0f3      	RCALL SUBOPT_0x6
                 ; 0000 00E8 address += sizeof(users[i].pc);
                 ; 0000 00E9 }
                +
0001f2 5f2f     +SUBI R18 , LOW ( - 1 )
0001f3 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0001f4 cfe7      	RJMP _0x7B
                 _0x7C:
                 ; 0000 00EA }
0001f5 c08b      	RJMP _0x2080002
                 ; .FEND
                 ;void displayMessage(char *message, int delay_ms_value)
                 ; 0000 00ED {
                 _displayMessage:
                 ; .FSTART _displayMessage
                 ; 0000 00EE lcd_clear();
0001f6 d0e1      	RCALL SUBOPT_0x4
                 ;	*message -> R18,R19
                 ;	delay_ms_value -> R16,R17
0001f7 d060      	RCALL _lcd_clear
                 ; 0000 00EF lcd_puts(message);
0001f8 01d9      	MOVW R26,R18
0001f9 d07b      	RCALL _lcd_puts
                 ; 0000 00F0 delay_ms(delay_ms_value);
0001fa 01d8      	MOVW R26,R16
0001fb d107      	RCALL _delay_ms
                 ; 0000 00F1 }
                 _0x2080004:
0001fc d101      	RCALL __LOADLOCR4
0001fd 9626      	ADIW R28,6
0001fe 9508      	RET
                 ; .FEND
                 ;int enterValueWithKeypad(char *buffer)
                 ; 0000 00F4 {
                 _enterValueWithKeypad:
                 ; .FSTART _enterValueWithKeypad
                 ; 0000 00F5 buffer[0] = keypad() + '0';
0001ff 931a      	ST   -Y,R17
000200 930a      	ST   -Y,R16
000201 018d      	MOVW R16,R26
                 ;	*buffer -> R16,R17
000202 df33      	RCALL _keypad
000203 5de0      	SUBI R30,-LOW(48)
000204 01d8      	MOVW R26,R16
000205 93ec      	ST   X,R30
                 ; 0000 00F6 lcd_putchar(buffer[0]);
000206 91ac      	LD   R26,X
000207 d05a      	RCALL _lcd_putchar
                 ; 0000 00F7 buffer[1] = keypad() + '0';
000208 df2d      	RCALL _keypad
000209 5de0      	SUBI R30,-LOW(48)
                +
00020a 01d8     +MOVW R26 , R16
00020b 9611     +ADIW R26 , 1
00020c 93ec     +ST X , R30
                 	__PUTB1RNS 16,1
                 ; 0000 00F8 lcd_putchar(buffer[1]);
00020d 01f8      	MOVW R30,R16
00020e 81a1      	LDD  R26,Z+1
00020f d052      	RCALL _lcd_putchar
                 ; 0000 00F9 buffer[2] = keypad() + '0';
000210 df25      	RCALL _keypad
000211 5de0      	SUBI R30,-LOW(48)
                +
000212 01d8     +MOVW R26 , R16
000213 9612     +ADIW R26 , 2
000214 93ec     +ST X , R30
                 	__PUTB1RNS 16,2
                 ; 0000 00FA lcd_putchar(buffer[2]);
000215 01f8      	MOVW R30,R16
000216 81a2      	LDD  R26,Z+2
000217 d04a      	RCALL _lcd_putchar
                 ; 0000 00FB buffer[3] = '\0';  // Null-terminate the string
000218 01f8      	MOVW R30,R16
000219 9633      	ADIW R30,3
00021a e0a0      	LDI  R26,LOW(0)
00021b 83a0      	STD  Z+0,R26
                 ; 0000 00FC 
                 ; 0000 00FD delay_ms(1000);
00021c eea8      	LDI  R26,LOW(1000)
00021d e0b3      	LDI  R27,HIGH(1000)
00021e d0e4      	RCALL _delay_ms
                 ; 0000 00FE 
                 ; 0000 00FF return 1;  // Return a non-zero value to indicate success
00021f e0e1      	LDI  R30,LOW(1)
000220 e0f0      	LDI  R31,HIGH(1)
                 _0x2080003:
000221 9109      	LD   R16,Y+
000222 9119      	LD   R17,Y+
000223 9508      	RET
                 ; 0000 0100 }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000224 931a      	ST   -Y,R17
000225 2f1a      	MOV  R17,R26
000226 b3eb      	IN   R30,0x1B
000227 70ef      	ANDI R30,LOW(0xF)
000228 2fae      	MOV  R26,R30
000229 2fe1      	MOV  R30,R17
00022a 7fe0      	ANDI R30,LOW(0xF0)
00022b 2bea      	OR   R30,R26
00022c bbeb      	OUT  0x1B,R30
                +
00022d e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00022e 958a     +DEC R24
00022f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000230 9ada      	SBI  0x1B,2
                +
000231 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000232 958a     +DEC R24
000233 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000234 98da      	CBI  0x1B,2
                +
000235 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000236 958a     +DEC R24
000237 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000238 c074      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000239 93aa      	ST   -Y,R26
00023a 81a8      	LD   R26,Y
00023b dfe8      	RCALL __lcd_write_nibble_G100
00023c 81e8          ld    r30,y
00023d 95e2          swap  r30
00023e 83e8          st    y,r30
00023f 81a8      	LD   R26,Y
000240 dfe3      	RCALL __lcd_write_nibble_G100
                +
000241 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000242 958a     +DEC R24
000243 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000244 9621      	ADIW R28,1
000245 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000246 931a      	ST   -Y,R17
000247 930a      	ST   -Y,R16
000248 2f1a      	MOV  R17,R26
000249 810a      	LDD  R16,Y+2
00024a 2fe1      	MOV  R30,R17
00024b e0f0      	LDI  R31,0
00024c 51e5      	SUBI R30,LOW(-__base_y_G100)
00024d 4ffe      	SBCI R31,HIGH(-__base_y_G100)
00024e 81e0      	LD   R30,Z
00024f 0fe0      	ADD  R30,R16
000250 2fae      	MOV  R26,R30
000251 dfe7      	RCALL __lcd_write_data
000252 2e50      	MOV  R5,R16
000253 2e41      	MOV  R4,R17
000254 8119      	LDD  R17,Y+1
000255 8108      	LDD  R16,Y+0
000256 9623      	ADIW R28,3
000257 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000258 e0a2      	LDI  R26,LOW(2)
000259 d090      	RCALL SUBOPT_0x7
00025a e0ac      	LDI  R26,LOW(12)
00025b dfdd      	RCALL __lcd_write_data
00025c e0a1      	LDI  R26,LOW(1)
00025d d08c      	RCALL SUBOPT_0x7
00025e e0e0      	LDI  R30,LOW(0)
00025f 2e4e      	MOV  R4,R30
000260 2e5e      	MOV  R5,R30
000261 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000262 931a      	ST   -Y,R17
000263 2f1a      	MOV  R17,R26
000264 301a      	CPI  R17,10
000265 f011      	BREQ _0x2000005
000266 1457      	CP   R5,R7
000267 f038      	BRLO _0x2000004
                 _0x2000005:
000268 e0e0      	LDI  R30,LOW(0)
000269 93ea      	ST   -Y,R30
00026a 9443      	INC  R4
00026b 2da4      	MOV  R26,R4
00026c dfd9      	RCALL _lcd_gotoxy
00026d 301a      	CPI  R17,10
00026e f1f1      	BREQ _0x2080001
                 _0x2000004:
00026f 9453      	INC  R5
000270 9ad8      	SBI  0x1B,0
000271 2fa1      	MOV  R26,R17
000272 dfc6      	RCALL __lcd_write_data
000273 98d8      	CBI  0x1B,0
000274 c038      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000275 d081      	RCALL __SAVELOCR4
000276 019d      	MOVW R18,R26
                 _0x2000008:
000277 01d9      	MOVW R26,R18
                +
000278 5f2f     +SUBI R18 , LOW ( - 1 )
000279 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00027a 91ec      	LD   R30,X
00027b 2f1e      	MOV  R17,R30
00027c 30e0      	CPI  R30,0
00027d f019      	BREQ _0x200000A
00027e 2fa1      	MOV  R26,R17
00027f dfe2      	RCALL _lcd_putchar
000280 cff6      	RJMP _0x2000008
                 _0x200000A:
                 _0x2080002:
000281 d07c      	RCALL __LOADLOCR4
000282 9624      	ADIW R28,4
000283 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000284 931a      	ST   -Y,R17
000285 2f1a      	MOV  R17,R26
000286 b3ea      	IN   R30,0x1A
000287 6fe0      	ORI  R30,LOW(0xF0)
000288 bbea      	OUT  0x1A,R30
000289 9ad2      	SBI  0x1A,2
00028a 9ad0      	SBI  0x1A,0
00028b 9ad1      	SBI  0x1A,1
00028c 98da      	CBI  0x1B,2
00028d 98d8      	CBI  0x1B,0
00028e 98d9      	CBI  0x1B,1
00028f 2e71      	MOV  R7,R17
000290 2fe1      	MOV  R30,R17
000291 58e0      	SUBI R30,-LOW(128)
                +
000292 93e0 01ed+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000294 2fe1      	MOV  R30,R17
000295 54e0      	SUBI R30,-LOW(192)
                +
000296 93e0 01ee+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000298 e1a4      	LDI  R26,LOW(20)
000299 e0b0      	LDI  R27,0
00029a d068      	RCALL _delay_ms
00029b d052      	RCALL SUBOPT_0x8
00029c d051      	RCALL SUBOPT_0x8
00029d d050      	RCALL SUBOPT_0x8
00029e e2a0      	LDI  R26,LOW(32)
00029f df84      	RCALL __lcd_write_nibble_G100
                +
0002a0 ec88     +LDI R24 , LOW ( 200 )
0002a1 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002a2 9701     +SBIW R24 , 1
0002a3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002a4 e2a8      	LDI  R26,LOW(40)
0002a5 df93      	RCALL __lcd_write_data
0002a6 e0a4      	LDI  R26,LOW(4)
0002a7 df91      	RCALL __lcd_write_data
0002a8 e8a5      	LDI  R26,LOW(133)
0002a9 df8f      	RCALL __lcd_write_data
0002aa e0a6      	LDI  R26,LOW(6)
0002ab df8d      	RCALL __lcd_write_data
0002ac dfab      	RCALL _lcd_clear
                 _0x2080001:
0002ad 9119      	LD   R17,Y+
0002ae 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcmp:
                 ; .FSTART _strcmp
0002af 93ba      	ST   -Y,R27
0002b0 93aa      	ST   -Y,R26
0002b1 91e9          ld   r30,y+
0002b2 91f9          ld   r31,y+
0002b3 91a9          ld   r26,y+
0002b4 91b9          ld   r27,y+
                 strcmp0:
0002b5 916d          ld   r22,x+
0002b6 9171          ld   r23,z+
0002b7 1767          cp   r22,r23
0002b8 f421          brne strcmp1
0002b9 2366          tst  r22
0002ba f7d1          brne strcmp0
                 strcmp3:
0002bb 27ee          clr  r30
0002bc 9508          ret
                 strcmp1:
0002bd 1b67          sub  r22,r23
0002be f3e1          breq strcmp3
0002bf e0e1          ldi  r30,1
0002c0 f408          brcc strcmp2
0002c1 50e2          subi r30,2
                 strcmp2:
0002c2 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _users:
0001b9           	.BYTE 0x32
                 __base_y_G100:
0001eb           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x0:
0002c3 93fa      	ST   -Y,R31
0002c4 93ea      	ST   -Y,R30
0002c5 eea8      	LDI  R26,LOW(1000)
0002c6 e0b3      	LDI  R27,HIGH(1000)
0002c7 cf2e      	RJMP _displayMessage
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0002c8 87e8      	STD  Y+8,R30
0002c9 87f9      	STD  Y+8+1,R31
0002ca 93fa      	ST   -Y,R31
0002cb 93ea      	ST   -Y,R30
0002cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
0002cd 93fa      	ST   -Y,R31
0002ce 93ea      	ST   -Y,R30
0002cf e0a4      	LDI  R26,LOW(4)
0002d0 e0b0      	LDI  R27,0
0002d1 cee3      	RJMP _EE_ReadString
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
0002d2 85e8      	LDD  R30,Y+8
0002d3 85f9      	LDD  R31,Y+8+1
0002d4 9634      	ADIW R30,4
0002d5 87e8      	STD  Y+8,R30
0002d6 87f9      	STD  Y+8+1,R31
0002d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0002d8 d01e      	RCALL __SAVELOCR4
0002d9 018d      	MOVW R16,R26
                +
0002da 812c     +LDD R18 , Y + 4
0002db 813d     +LDD R19 , Y + 4 + 1
                 	__GETWRS 18,19,4
0002dc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x5:
0002dd 931a      	ST   -Y,R17
0002de 930a      	ST   -Y,R16
                +
0002df e0aa     +LDI R26 , 10
0002e0 9fa2     +MUL R26 , R18
0002e1 01f0     +MOVW R30 , R0
0002e2 9fa3     +MUL R26 , R19
0002e3 0df0     +ADD R31 , R0
                 	__MULBNWRU 18,19,10
0002e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0002e5 01df      	MOVW R26,R30
0002e6 deba      	RCALL _EE_WriteString
                +
0002e7 5f0c     +SUBI R16 , LOW ( - 4 )
0002e8 4f1f     +SBCI R17 , HIGH ( - 4 )
                 	__ADDWRN 16,17,4
0002e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
0002ea df4e      	RCALL __lcd_write_data
0002eb e0a3      	LDI  R26,LOW(3)
0002ec e0b0      	LDI  R27,0
0002ed c015      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x8:
0002ee e3a0      	LDI  R26,LOW(48)
0002ef df34      	RCALL __lcd_write_nibble_G100
                +
0002f0 ec88     +LDI R24 , LOW ( 200 )
0002f1 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002f2 9701     +SBIW R24 , 1
0002f3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002f4 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
0002f5 935a      	ST   -Y,R21
                 __SAVELOCR5:
0002f6 934a      	ST   -Y,R20
                 __SAVELOCR4:
0002f7 933a      	ST   -Y,R19
                 __SAVELOCR3:
0002f8 932a      	ST   -Y,R18
                 __SAVELOCR2:
0002f9 931a      	ST   -Y,R17
0002fa 930a      	ST   -Y,R16
0002fb 9508      	RET
                 
                 __LOADLOCR6:
0002fc 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0002fd 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0002fe 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0002ff 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000300 8119      	LDD  R17,Y+1
000301 8108      	LD   R16,Y
000302 9508      	RET
                 
                 _delay_ms:
000303 9610      	adiw r26,0
000304 f039      	breq __delay_ms1
                 __delay_ms0:
000305 95a8      	wdr
                +
000306 ed80     +LDI R24 , LOW ( 0x7D0 )
000307 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000308 9701     +SBIW R24 , 1
000309 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00030a 9711      	sbiw r26,1
00030b f7c9      	brne __delay_ms0
                 __delay_ms1:
00030c 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   6 r1 :   1 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  33 r17:  38 r18:  18 r19:  13 r20:   5 r21:   5 r22:   6 r23:   3 
r24:  21 r25:   5 r26:  76 r27:  14 r28:  18 r29:   1 r30: 160 r31:  36 
x  :  14 y  :  89 z  :  13 
Registers used: 24 out of 35 (68.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   5 
adiw  :  22 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   9 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  29 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   3 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   3 cpc   :   2 cpi   :  20 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   6 inc   :   2 jmp   :  22 ld    :  21 ldd   :  30 ldi   :  88 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  20 movw  :  33 
mul   :   2 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   1 out   :  15 pop   :   2 push  :   2 rcall :  69 ret   :  31 
reti  :   0 rjmp  :  35 rol   :   0 ror   :   0 sbc   :   0 sbci  :  11 
sbi   :  16 sbic  :   2 sbis  :  12 sbiw  :  13 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  43 std   :  15 sts   :   2 sub   :   1 subi  :  17 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 48 out of 116 (41.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00061a   1328    234   1562   16384   9.5%
[.dseg] 0x000060 0x0001ef      0    143    143    1024  14.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 5 warnings
