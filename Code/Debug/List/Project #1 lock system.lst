
AVRASM ver. 2.1.30  C:\Users\Specialest\Desktop\Project2\lock-system\Code\Debug\List\Project #1 lock system.asm Sun Dec 17 20:43:11 2023

C:\Users\Specialest\Desktop\Project2\lock-system\Code\Debug\List\Project #1 lock system.asm(1417): warning: Register r5 already defined by the .DEF directive
C:\Users\Specialest\Desktop\Project2\lock-system\Code\Debug\List\Project #1 lock system.asm(1418): warning: Register r4 already defined by the .DEF directive
C:\Users\Specialest\Desktop\Project2\lock-system\Code\Debug\List\Project #1 lock system.asm(1419): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.52 
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x37
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0147 	JMP  __RESET
000002 940c 024f 	JMP  _ext1
000004 940c 0197 	JMP  _SetPC
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0202 	JMP  _Reset
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G102:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G102:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000033 7250
000034 666f
000035 0000
000036 3131      	.DB  0x50,0x72,0x6F,0x66,0x0,0x0,0x31,0x31
000037 0031
000038 3032
000039 0033
00003a 6841      	.DB  0x31,0x0,0x32,0x30,0x33,0x0,0x41,0x68
00003b 656d
00003c 0064
00003d 3231
00003e 0036      	.DB  0x6D,0x65,0x64,0x0,0x31,0x32,0x36,0x0
00003f 3231
000040 0039
000041 6d41
000042 0072      	.DB  0x31,0x32,0x39,0x0,0x41,0x6D,0x72,0x0
000043 0000
000044 3231
000045 0038
000046 3233      	.DB  0x0,0x0,0x31,0x32,0x38,0x0,0x33,0x32
000047 0035
000048 6441
000049 6c65
00004a 0000      	.DB  0x35,0x0,0x41,0x64,0x65,0x6C,0x0,0x0
00004b 3331
00004c 0030
00004d 3234
00004e 0036      	.DB  0x31,0x33,0x30,0x0,0x34,0x32,0x36,0x0
00004f 6d4f
000050 7265
000051 0000
000052 3331      	.DB  0x4F,0x6D,0x65,0x72,0x0,0x0,0x31,0x33
000053 0032
000054 3730
C:\Users\Specialest\Desktop\Project2\lock-system\Code\Debug\List\Project #1 lock system.asm(1465): warning: .cseg .db misalignment - padding zero byte
000055 0039      	.DB  0x32,0x0,0x30,0x37,0x39
                 _0x0:
000056 6e45
000057 6574
000058 2072
000059 6f79      	.DB  0x45,0x6E,0x74,0x65,0x72,0x20,0x79,0x6F
00005a 7275
00005b 4920
00005c 3a44
00005d 4500      	.DB  0x75,0x72,0x20,0x49,0x44,0x3A,0x0,0x45
00005e 746e
00005f 7265
000060 6f20
000061 646c      	.DB  0x6E,0x74,0x65,0x72,0x20,0x6F,0x6C,0x64
000062 5020
000063 3a43
000064 4500
000065 746e      	.DB  0x20,0x50,0x43,0x3A,0x0,0x45,0x6E,0x74
000066 7265
000067 6e20
000068 7765
000069 5020      	.DB  0x65,0x72,0x20,0x6E,0x65,0x77,0x20,0x50
00006a 3a43
00006b 5200
00006c 2d65
00006d 6e65      	.DB  0x43,0x3A,0x0,0x52,0x65,0x2D,0x65,0x6E
00006e 6574
00006f 2072
000070 656e
000071 2077      	.DB  0x74,0x65,0x72,0x20,0x6E,0x65,0x77,0x20
000072 4350
000073 003a
000074 654e
000075 2077      	.DB  0x50,0x43,0x3A,0x0,0x4E,0x65,0x77,0x20
000076 4350
000077 7320
000078 6f74
000079 6572      	.DB  0x50,0x43,0x20,0x73,0x74,0x6F,0x72,0x65
00007a 0064
00007b 654e
00007c 2077
00007d 4350      	.DB  0x64,0x0,0x4E,0x65,0x77,0x20,0x50,0x43
00007e 6d20
00007f 7369
000080 616d
000081 6374      	.DB  0x20,0x6D,0x69,0x73,0x6D,0x61,0x74,0x63
000082 2c68
000083 4320
000084 6e6f
000085 6174      	.DB  0x68,0x2C,0x20,0x43,0x6F,0x6E,0x74,0x61
000086 7463
000087 6120
000088 6d64
000089 6e69      	.DB  0x63,0x74,0x20,0x61,0x64,0x6D,0x69,0x6E
00008a 5700
00008b 6f72
00008c 676e
00008d 6f20      	.DB  0x0,0x57,0x72,0x6F,0x6E,0x67,0x20,0x6F
00008e 646c
00008f 5020
000090 2c43
000091 2020      	.DB  0x6C,0x64,0x20,0x50,0x43,0x2C,0x20,0x20
000092 4320
000093 6e6f
000094 6174
000095 7463      	.DB  0x20,0x43,0x6F,0x6E,0x74,0x61,0x63,0x74
000096 6120
000097 6d64
000098 6e69
000099 5700      	.DB  0x20,0x61,0x64,0x6D,0x69,0x6E,0x0,0x57
00009a 6f72
00009b 676e
00009c 4920
00009d 0044      	.DB  0x72,0x6F,0x6E,0x67,0x20,0x49,0x44,0x0
00009e 6e45
00009f 6574
0000a0 2072
0000a1 6f79      	.DB  0x45,0x6E,0x74,0x65,0x72,0x20,0x79,0x6F
0000a2 7275
0000a3 4920
0000a4 3a44
0000a5 0020      	.DB  0x75,0x72,0x20,0x49,0x44,0x3A,0x20,0x0
0000a6 6e45
0000a7 6574
0000a8 2072
0000a9 6f79      	.DB  0x45,0x6E,0x74,0x65,0x72,0x20,0x79,0x6F
0000aa 7275
0000ab 5020
0000ac 3a43
0000ad 0020      	.DB  0x75,0x72,0x20,0x50,0x43,0x3A,0x20,0x0
0000ae 6557
0000af 636c
0000b0 6d6f
0000b1 2c65      	.DB  0x57,0x65,0x6C,0x63,0x6F,0x6D,0x65,0x2C
0000b2 0020
0000b3 6f53
0000b4 7272
0000b5 2079      	.DB  0x20,0x0,0x53,0x6F,0x72,0x72,0x79,0x20
0000b6 7277
0000b7 6e6f
0000b8 2067
0000b9 4350      	.DB  0x77,0x72,0x6F,0x6E,0x67,0x20,0x50,0x43
0000ba 5000
0000bb 6f72
0000bc 0066
0000bd 6e45      	.DB  0x0,0x50,0x72,0x6F,0x66,0x0,0x45,0x6E
0000be 6574
0000bf 2072
0000c0 6441
0000c1 696d      	.DB  0x74,0x65,0x72,0x20,0x41,0x64,0x6D,0x69
0000c2 206e
0000c3 4350
0000c4 203a
0000c5 4500      	.DB  0x6E,0x20,0x50,0x43,0x3A,0x20,0x0,0x45
0000c6 746e
0000c7 7265
0000c8 5320
0000c9 7574      	.DB  0x6E,0x74,0x65,0x72,0x20,0x53,0x74,0x75
0000ca 6564
0000cb 746e
0000cc 4920
0000cd 3a44      	.DB  0x64,0x65,0x6E,0x74,0x20,0x49,0x44,0x3A
0000ce 0020
0000cf 6e45
0000d0 6574
0000d1 2072      	.DB  0x20,0x0,0x45,0x6E,0x74,0x65,0x72,0x20
0000d2 7473
0000d3 6475
0000d4 6e65
0000d5 2774      	.DB  0x73,0x74,0x75,0x64,0x65,0x6E,0x74,0x27
0000d6 2073
0000d7 656e
0000d8 2077
0000d9 4350      	.DB  0x73,0x20,0x6E,0x65,0x77,0x20,0x50,0x43
0000da 203a
0000db 5300
0000dc 7574
0000dd 6564      	.DB  0x3A,0x20,0x0,0x53,0x74,0x75,0x64,0x65
0000de 746e
0000df 5020
0000e0 2043
0000e1 7369      	.DB  0x6E,0x74,0x20,0x50,0x43,0x20,0x69,0x73
0000e2 7320
0000e3 6f74
0000e4 6572
0000e5 0064      	.DB  0x20,0x73,0x74,0x6F,0x72,0x65,0x64,0x0
0000e6 6e45
0000e7 6574
0000e8 2072
0000e9 6f79      	.DB  0x45,0x6E,0x74,0x65,0x72,0x20,0x79,0x6F
0000ea 7275
0000eb 6e20
0000ec 7765
0000ed 5020      	.DB  0x75,0x72,0x20,0x6E,0x65,0x77,0x20,0x50
0000ee 3a43
0000ef 0020
0000f0 6f59
0000f1 7275      	.DB  0x43,0x3A,0x20,0x0,0x59,0x6F,0x75,0x72
0000f2 5020
0000f3 2043
0000f4 7369
0000f5 7320      	.DB  0x20,0x50,0x43,0x20,0x69,0x73,0x20,0x73
0000f6 6f74
0000f7 6572
0000f8 0064
0000f9 6f43      	.DB  0x74,0x6F,0x72,0x65,0x64,0x0,0x43,0x6F
0000fa 746e
0000fb 6361
0000fc 2074
0000fd 6441      	.DB  0x6E,0x74,0x61,0x63,0x74,0x20,0x41,0x64
0000fe 696d
0000ff 006e      	.DB  0x6D,0x69,0x6E,0x0
                 _0x2000003:
000100 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000101 0045      	.DW  0x45
000102 02bd      	.DW  _users
000103 0066      	.DW  _0x3*2
                 
000104 000f      	.DW  0x0F
000105 0160      	.DW  _0x15
000106 00ac      	.DW  _0x0*2
                 
000107 000e      	.DW  0x0E
000108 016f      	.DW  _0x15+15
000109 00bb      	.DW  _0x0*2+15
                 
00010a 000e      	.DW  0x0E
00010b 017d      	.DW  _0x15+29
00010c 00c9      	.DW  _0x0*2+29
                 
00010d 0011      	.DW  0x11
00010e 018b      	.DW  _0x15+43
00010f 00d7      	.DW  _0x0*2+43
                 
000110 000e      	.DW  0x0E
000111 019c      	.DW  _0x15+60
000112 00e8      	.DW  _0x0*2+60
                 
000113 001f      	.DW  0x1F
000114 01aa      	.DW  _0x15+74
000115 00f6      	.DW  _0x0*2+74
                 
000116 001e      	.DW  0x1E
000117 01c9      	.DW  _0x15+105
000118 0115      	.DW  _0x0*2+105
                 
000119 0009      	.DW  0x09
00011a 01e7      	.DW  _0x15+135
00011b 0133      	.DW  _0x0*2+135
                 
00011c 0010      	.DW  0x10
00011d 01f0      	.DW  _0x25
00011e 013c      	.DW  _0x0*2+144
                 
00011f 0010      	.DW  0x10
000120 0200      	.DW  _0x25+16
000121 014c      	.DW  _0x0*2+160
                 
000122 000a      	.DW  0x0A
000123 0210      	.DW  _0x25+32
000124 015c      	.DW  _0x0*2+176
                 
000125 000f      	.DW  0x0F
000126 021a      	.DW  _0x25+42
000127 0166      	.DW  _0x0*2+186
                 
000128 0009      	.DW  0x09
000129 0229      	.DW  _0x25+57
00012a 0133      	.DW  _0x0*2+135
                 
00012b 0005      	.DW  0x05
00012c 0232      	.DW  _0x37
00012d 0175      	.DW  _0x0*2+201
                 
00012e 0011      	.DW  0x11
00012f 0237      	.DW  _0x37+5
000130 017a      	.DW  _0x0*2+206
                 
000131 0013      	.DW  0x13
000132 0248      	.DW  _0x37+22
000133 018b      	.DW  _0x0*2+223
                 
000134 0019      	.DW  0x19
000135 025b      	.DW  _0x37+41
000136 019e      	.DW  _0x0*2+242
                 
000137 0015      	.DW  0x15
000138 0274      	.DW  _0x37+66
000139 01b7      	.DW  _0x0*2+267
                 
00013a 0014      	.DW  0x14
00013b 0289      	.DW  _0x37+87
00013c 01cc      	.DW  _0x0*2+288
                 
00013d 0012      	.DW  0x12
00013e 029d      	.DW  _0x37+107
00013f 01e0      	.DW  _0x0*2+308
                 
000140 000e      	.DW  0x0E
000141 02af      	.DW  _0x37+125
000142 01f2      	.DW  _0x0*2+326
                 
000143 0002      	.DW  0x02
000144 0303      	.DW  __base_y_G100
000145 0200      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000146 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000147 94f8      	CLI
000148 27ee      	CLR  R30
000149 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00014a e0f1      	LDI  R31,1
00014b bffb      	OUT  GICR,R31
00014c bfeb      	OUT  GICR,R30
00014d bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00014e e08d      	LDI  R24,(14-2)+1
00014f e0a2      	LDI  R26,2
000150 27bb      	CLR  R27
                 __CLEAR_REG:
000151 93ed      	ST   X+,R30
000152 958a      	DEC  R24
000153 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000154 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000155 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000156 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000157 93ed      	ST   X+,R30
000158 9701      	SBIW R24,1
000159 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00015a e0e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00015b e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00015c 9185      	LPM  R24,Z+
00015d 9195      	LPM  R25,Z+
00015e 9700      	SBIW R24,0
00015f f061      	BREQ __GLOBAL_INI_END
000160 91a5      	LPM  R26,Z+
000161 91b5      	LPM  R27,Z+
000162 9005      	LPM  R0,Z+
000163 9015      	LPM  R1,Z+
000164 01bf      	MOVW R22,R30
000165 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000166 9005      	LPM  R0,Z+
000167 920d      	ST   X+,R0
000168 9701      	SBIW R24,1
000169 f7e1      	BRNE __GLOBAL_INI_LOOP
00016a 01fb      	MOVW R30,R22
00016b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00016c e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00016d bfed      	OUT  SPL,R30
00016e e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00016f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000170 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000171 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000172 940c 0174 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;char keypad();
                 ;unsigned char EE_Read(unsigned int address);
                 ;void EE_Write(unsigned int address, unsigned char data);
                 ;void EE_WriteString(unsigned int address, const char *str);
                 ;void EE_ReadString(unsigned int address, char *buffer, unsigned int length);
                 ;void initializeUsers();
                 ;void displayMessage(char *message, int delay_ms_value);
                 ;int enterValueWithKeypad(char *buffer);
                 ;void generateTone();
                 
                 	.DSEG
                 ;void main(void)
                 ; 0000 002D {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 002E 
                 ; 0000 002F // Set keypad ports
                 ; 0000 0030 DDRC = 0b00000111; // 1 unused pin , 4 rows (input) , 3 cloumns (output)
000174 e0e7      	LDI  R30,LOW(7)
000175 bbe4      	OUT  0x14,R30
                 ; 0000 0031 PORTC = 0b11111000; // pull up resistance
000176 efe8      	LDI  R30,LOW(248)
000177 bbe5      	OUT  0x15,R30
                 ; 0000 0032 
                 ; 0000 0033 // Initialize the LCD
                 ; 0000 0034 lcd_init(16);
000178 e1a0      	LDI  R26,LOW(16)
000179 d2d9      	RCALL _lcd_init
                 ; 0000 0035 
                 ; 0000 0036 
                 ; 0000 0037 // Set the door as input (now by default the door is closed)
                 ; 0000 0038 DDRB .0 = 0;
00017a 98b8      	CBI  0x17,0
                 ; 0000 0039 PORTB .0 = 1; // turn on pull up resistance
00017b 9ac0      	SBI  0x18,0
                 ; 0000 003A 
                 ; 0000 003B // Set the speaker as a output
                 ; 0000 003C DDRD.7 = 1;
00017c 9a8f      	SBI  0x11,7
                 ; 0000 003D PORTD.7 = 1; // Set it to 1 initially
00017d 9a97      	SBI  0x12,7
                 ; 0000 003E 
                 ; 0000 003F // Initialize user data in EEPROM
                 ; 0000 0040 initializeUsers();
00017e d21a      	RCALL _initializeUsers
                 ; 0000 0041 
                 ; 0000 0042 PORTB.2 = 1; // turn on pull up resistance for INT2 intrrupt
00017f 9ac2      	SBI  0x18,2
                 ; 0000 0043 
                 ; 0000 0044 // actual casue INT2
                 ; 0000 0045 bit_set(MCUCSR, 6);
000180 b7e4      	IN   R30,0x34
000181 64e0      	ORI  R30,0x40
000182 bfe4      	OUT  0x34,R30
                 ; 0000 0046 
                 ; 0000 0047 PORTD.2 = 1; // turn on pull up resistance for INT0 intrrupt
000183 9a92      	SBI  0x12,2
                 ; 0000 0048 
                 ; 0000 0049 // actual casue (The falling edge of INT0)
                 ; 0000 004A bit_set(MCUCR, 1);
000184 b7e5      	IN   R30,0x35
000185 60e2      	ORI  R30,2
000186 bfe5      	OUT  0x35,R30
                 ; 0000 004B bit_clr(MCUCR, 0);
000187 b7e5      	IN   R30,0x35
000188 7fee      	ANDI R30,0xFE
000189 bfe5      	OUT  0x35,R30
                 ; 0000 004C 
                 ; 0000 004D DDRD.3=0; //make button SetPC as input
00018a 988b      	CBI  0x11,3
                 ; 0000 004E PORTD.3=1; // turn on pull up resistance
00018b 9a93      	SBI  0x12,3
                 ; 0000 004F 
                 ; 0000 0050 // Enable global interrupts
                 ; 0000 0051 #asm("sei")
00018c 9478      	SEI
                 ; 0000 0052 // GICR INT1 (bit no 7) , SetPC spacific enable
                 ; 0000 0053 bit_set(GICR,7);
00018d b7eb      	IN   R30,0x3B
00018e 68e0      	ORI  R30,0x80
00018f bfeb      	OUT  0x3B,R30
                 ; 0000 0054 
                 ; 0000 0055 // GICR INT2 (bit no 5) , EXT2 spacific enable
                 ; 0000 0056 bit_set(GICR, 5);
000190 b7eb      	IN   R30,0x3B
000191 62e0      	ORI  R30,0x20
000192 bfeb      	OUT  0x3B,R30
                 ; 0000 0057 
                 ; 0000 0058 // GICR INT0 (bit no 6) , EXT0 spacific enable
                 ; 0000 0059 bit_set(GICR, 6);
000193 b7eb      	IN   R30,0x3B
000194 64e0      	ORI  R30,0x40
000195 bfeb      	OUT  0x3B,R30
                 ; 0000 005A 
                 ; 0000 005B 
                 ; 0000 005C 
                 ; 0000 005D }
                 _0x14:
000196 cfff      	RJMP _0x14
                 ; .FEND
                 ;interrupt [3] void SetPC (void)
                 ; 0000 0060 {
                 _SetPC:
                 ; .FSTART _SetPC
000197 d2fa      	RCALL SUBOPT_0x0
                 ; 0000 0061 char enteredID[5];  // Change data type to string
                 ; 0000 0062 User currentUser;
                 ; 0000 0063 unsigned int address = 0;
                 ; 0000 0064 int userFound = 0;
                 ; 0000 0065 int i;
                 ; 0000 0066 char enteredNewPC[5]; // define enteredNewPC array to hold the new PC
                 ; 0000 0067 char reenteredNewPC[5]; // define reenteredNewPC array to hold the Re-entered new PC
                 ; 0000 0068 
                 ; 0000 0069 lcd_clear();
000198 976d      	SBIW R28,29
000199 d306      	RCALL SUBOPT_0x1
                 ;	enteredID -> Y+30
                 ;	currentUser -> Y+16
                 ;	address -> R16,R17
                 ;	userFound -> R18,R19
                 ;	i -> R20,R21
                 ;	enteredNewPC -> Y+11
                 ;	reenteredNewPC -> Y+6
00019a d28c      	RCALL _lcd_clear
                 ; 0000 006A displayMessage("Enter your ID:", 1000);
                +
00019b e6e0     +LDI R30 , LOW ( _0x15 + ( 0 ) )
00019c e0f1     +LDI R31 , HIGH ( _0x15 + ( 0 ) )
                 	__POINTW1MN _0x15,0
00019d d308      	RCALL SUBOPT_0x2
                 ; 0000 006B lcd_gotoxy(0,1);
                 ; 0000 006C if (enterValueWithKeypad(enteredID)) {
00019e 01de      	MOVW R26,R28
00019f 965e      	ADIW R26,30
0001a0 d223      	RCALL _enterValueWithKeypad
0001a1 9730      	SBIW R30,0
0001a2 f409      	BRNE PC+2
0001a3 c05b      	RJMP _0x16
                 ; 0000 006D char enteredPC[4];
                 ; 0000 006E char enteredOldPC[5];
                 ; 0000 006F // search for the entered ID in the user data
                 ; 0000 0070 for (i = 0; i < sizeof(users) / sizeof(users[0]); ++i) {
0001a4 9729      	SBIW R28,9
                 ;	enteredID -> Y+39
                 ;	currentUser -> Y+25
                 ;	enteredNewPC -> Y+20
                 ;	reenteredNewPC -> Y+15
                 ;	enteredPC -> Y+5
                 ;	enteredOldPC -> Y+0
                +
0001a5 e040     +LDI R20 , LOW ( 0 )
0001a6 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x18:
                +
0001a7 3045     +CPI R20 , LOW ( 5 )
0001a8 e0e0     +LDI R30 , HIGH ( 5 )
0001a9 075e     +CPC R21 , R30
                 	__CPWRN 20,21,5
0001aa f00c      	BRLT PC+2
0001ab c04a      	RJMP _0x19
                 ; 0000 0071 address += sizeof(users[i].name);
0001ac d302      	RCALL SUBOPT_0x3
                 ; 0000 0072 EE_ReadString(address, currentUser.id, sizeof(currentUser.id));  // Read ID as a string
0001ad 01fe      	MOVW R30,R28
0001ae 96b1      	ADIW R30,33
0001af d304      	RCALL SUBOPT_0x4
                 ; 0000 0073 
                 ; 0000 0074 if (strcmp(currentUser.id, enteredID) == 0) {
0001b0 01fe      	MOVW R30,R28
0001b1 967f      	ADIW R30,31
0001b2 93fa      	ST   -Y,R31
0001b3 93ea      	ST   -Y,R30
0001b4 01de      	MOVW R26,R28
0001b5 9699      	ADIW R26,41
0001b6 d2c7      	RCALL _strcmp
0001b7 30e0      	CPI  R30,0
0001b8 f5c9      	BRNE _0x1A
                 ; 0000 0075 // ID found, verify the old PC
                 ; 0000 0076 address += sizeof(currentUser.id);
0001b9 d2ff      	RCALL SUBOPT_0x5
                 ; 0000 0077 EE_ReadString(address, currentUser.pc, sizeof(currentUser.pc));  // Read PC as a string
0001ba 01fe      	MOVW R30,R28
0001bb 96b5      	ADIW R30,37
0001bc d2f7      	RCALL SUBOPT_0x4
                 ; 0000 0078 displayMessage("Enter old PC:", 1000);
                +
0001bd e6ef     +LDI R30 , LOW ( _0x15 + ( 15 ) )
0001be e0f1     +LDI R31 , HIGH ( _0x15 + ( 15 ) )
                 	__POINTW1MN _0x15,15
0001bf d2e6      	RCALL SUBOPT_0x2
                 ; 0000 0079 lcd_gotoxy(0,1);
                 ; 0000 007A 
                 ; 0000 007B if (enterValueWithKeypad(enteredOldPC)) {
0001c0 d2fd      	RCALL SUBOPT_0x6
0001c1 f169      	BREQ _0x1B
                 ; 0000 007C if (strcmp(currentUser.pc, enteredOldPC) == 0) {
0001c2 01fe      	MOVW R30,R28
0001c3 96b3      	ADIW R30,35
0001c4 d2fd      	RCALL SUBOPT_0x7
0001c5 f529      	BRNE _0x1C
                 ; 0000 007D // Old PC verified
                 ; 0000 007E displayMessage("Enter new PC:", 1000);
                +
0001c6 e7ed     +LDI R30 , LOW ( _0x15 + ( 29 ) )
0001c7 e0f1     +LDI R31 , HIGH ( _0x15 + ( 29 ) )
                 	__POINTW1MN _0x15,29
0001c8 d2dd      	RCALL SUBOPT_0x2
                 ; 0000 007F lcd_gotoxy(0,1);
                 ; 0000 0080 enterValueWithKeypad(enteredNewPC);
0001c9 01de      	MOVW R26,R28
0001ca 9654      	ADIW R26,20
0001cb d1f8      	RCALL _enterValueWithKeypad
                 ; 0000 0081 
                 ; 0000 0082 lcd_clear();
0001cc d25a      	RCALL _lcd_clear
                 ; 0000 0083 displayMessage("Re-enter new PC:", 1000);
                +
0001cd e8eb     +LDI R30 , LOW ( _0x15 + ( 43 ) )
0001ce e0f1     +LDI R31 , HIGH ( _0x15 + ( 43 ) )
                 	__POINTW1MN _0x15,43
0001cf d2d6      	RCALL SUBOPT_0x2
                 ; 0000 0084 lcd_gotoxy(0,1);
                 ; 0000 0085 enterValueWithKeypad(reenteredNewPC);
0001d0 01de      	MOVW R26,R28
0001d1 961f      	ADIW R26,15
0001d2 d1f1      	RCALL _enterValueWithKeypad
                 ; 0000 0086 
                 ; 0000 0087 if (strcmp(enteredNewPC, reenteredNewPC) == 0) {
0001d3 01fe      	MOVW R30,R28
0001d4 9674      	ADIW R30,20
0001d5 93fa      	ST   -Y,R31
0001d6 93ea      	ST   -Y,R30
0001d7 01de      	MOVW R26,R28
0001d8 9651      	ADIW R26,17
0001d9 d2a4      	RCALL _strcmp
0001da 30e0      	CPI  R30,0
0001db f451      	BRNE _0x1D
                 ; 0000 0088 // If new PC entered correctly, store it
                 ; 0000 0089 EE_WriteString(address,enteredNewPC);
0001dc 931a      	ST   -Y,R17
0001dd 930a      	ST   -Y,R16
0001de 01de      	MOVW R26,R28
0001df 9656      	ADIW R26,22
0001e0 d182      	RCALL _EE_WriteString
                 ; 0000 008A displayMessage("New PC stored", 1000);
                +
0001e1 e9ec     +LDI R30 , LOW ( _0x15 + ( 60 ) )
0001e2 e0f1     +LDI R31 , HIGH ( _0x15 + ( 60 ) )
                 	__POINTW1MN _0x15,60
0001e3 d2e5      	RCALL SUBOPT_0x8
                 ; 0000 008B generateTone();
                 ; 0000 008C DDRB.0 = 1;
0001e4 9ab8      	SBI  0x17,0
                 ; 0000 008D } else {
0001e5 c004      	RJMP _0x20
                 _0x1D:
                 ; 0000 008E displayMessage("New PC mismatch, Contact admin", 1000);
                +
0001e6 eaea     +LDI R30 , LOW ( _0x15 + ( 74 ) )
0001e7 e0f1     +LDI R31 , HIGH ( _0x15 + ( 74 ) )
                 	__POINTW1MN _0x15,74
0001e8 d2e0      	RCALL SUBOPT_0x8
                 ; 0000 008F generateTone();
                 ; 0000 0090 generateTone();
0001e9 d1ff      	RCALL _generateTone
                 ; 0000 0091 }
                 _0x20:
                 ; 0000 0092 } else {
0001ea c004      	RJMP _0x21
                 _0x1C:
                 ; 0000 0093 displayMessage("Wrong old PC,   Contact admin", 1000);
                +
0001eb ece9     +LDI R30 , LOW ( _0x15 + ( 105 ) )
0001ec e0f1     +LDI R31 , HIGH ( _0x15 + ( 105 ) )
                 	__POINTW1MN _0x15,105
0001ed d2db      	RCALL SUBOPT_0x8
                 ; 0000 0094 
                 ; 0000 0095 generateTone();
                 ; 0000 0096 generateTone();
0001ee d1fa      	RCALL _generateTone
                 ; 0000 0097 }
                 _0x21:
                 ; 0000 0098 }
                 ; 0000 0099 
                 ; 0000 009A userFound = 1;
                 _0x1B:
                +
0001ef e021     +LDI R18 , LOW ( 1 )
0001f0 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 009B break;
0001f1 c004      	RJMP _0x19
                 ; 0000 009C }
                 ; 0000 009D 
                 ; 0000 009E address += sizeof(users[i].id);
                 _0x1A:
0001f2 d2dc      	RCALL SUBOPT_0x9
                 ; 0000 009F address += sizeof(users[i].pc);
                 ; 0000 00A0 
                 ; 0000 00A1 }
                +
0001f3 5f4f     +SUBI R20 , LOW ( - 1 )
0001f4 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
0001f5 cfb1      	RJMP _0x18
                 _0x19:
                 ; 0000 00A2 
                 ; 0000 00A3 if (!userFound)
0001f6 2e02      	MOV  R0,R18
0001f7 2a03      	OR   R0,R19
0001f8 f421      	BRNE _0x22
                 ; 0000 00A4 {
                 ; 0000 00A5 displayMessage("Wrong ID", 1000);
                +
0001f9 eee7     +LDI R30 , LOW ( _0x15 + ( 135 ) )
0001fa e0f1     +LDI R31 , HIGH ( _0x15 + ( 135 ) )
                 	__POINTW1MN _0x15,135
0001fb d2cd      	RCALL SUBOPT_0x8
                 ; 0000 00A6 generateTone();
                 ; 0000 00A7 generateTone();
0001fc d1ec      	RCALL _generateTone
                 ; 0000 00A8 }
                 ; 0000 00A9 delay_ms(5000);
                 _0x22:
0001fd d2d6      	RCALL SUBOPT_0xA
                 ; 0000 00AA // close the door and clear lcd
                 ; 0000 00AB DDRB .0 = 0;
                 ; 0000 00AC lcd_clear();
                 ; 0000 00AD }
0001fe 9629      	ADIW R28,9
                 ; 0000 00AE }
                 _0x16:
0001ff d31c      	RCALL __LOADLOCR6
000200 96a3      	ADIW R28,35
000201 c0e8      	RJMP _0xAE
                 ; .FEND
                 
                 	.DSEG
                 _0x15:
000160           	.BYTE 0x90
                 ;interrupt [19] void Reset (void)
                 ; 0000 00B1 {
                 
                 	.CSEG
                 _Reset:
                 ; .FSTART _Reset
000202 d28f      	RCALL SUBOPT_0x0
                 ; 0000 00B2 // action on click on a button
                 ; 0000 00B3 
                 ; 0000 00B4 char enteredID[4];  // Change data type to string
                 ; 0000 00B5 User currentUser;
                 ; 0000 00B6 unsigned int address = 0;
                 ; 0000 00B7 int userFound = 0;
                 ; 0000 00B8 int i;
                 ; 0000 00B9 
                 ; 0000 00BA displayMessage("Enter your ID: ", 1000);
000203 9762      	SBIW R28,18
000204 d29b      	RCALL SUBOPT_0x1
                 ;	enteredID -> Y+20
                 ;	currentUser -> Y+6
                 ;	address -> R16,R17
                 ;	userFound -> R18,R19
                 ;	i -> R20,R21
                +
000205 efe0     +LDI R30 , LOW ( _0x25 + ( 0 ) )
000206 e0f1     +LDI R31 , HIGH ( _0x25 + ( 0 ) )
                 	__POINTW1MN _0x25,0
000207 d2d1      	RCALL SUBOPT_0xB
                 ; 0000 00BB 
                 ; 0000 00BC if (enterValueWithKeypad(enteredID))
000208 01de      	MOVW R26,R28
000209 9654      	ADIW R26,20
00020a d1b9      	RCALL _enterValueWithKeypad
00020b 9730      	SBIW R30,0
00020c f1b9      	BREQ _0x26
                 ; 0000 00BD {
                 ; 0000 00BE char enteredPC[4];
                 ; 0000 00BF for (i = 0; i < sizeof(users) / sizeof(users[0]); ++i)
00020d 9724      	SBIW R28,4
                 ;	enteredID -> Y+24
                 ;	currentUser -> Y+10
                 ;	enteredPC -> Y+0
                +
00020e e040     +LDI R20 , LOW ( 0 )
00020f e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x28:
                +
000210 3045     +CPI R20 , LOW ( 5 )
000211 e0e0     +LDI R30 , HIGH ( 5 )
000212 075e     +CPC R21 , R30
                 	__CPWRN 20,21,5
000213 f57c      	BRGE _0x29
                 ; 0000 00C0 {
                 ; 0000 00C1 EE_ReadString(address, currentUser.name, sizeof(users[i].name));
000214 931a      	ST   -Y,R17
000215 930a      	ST   -Y,R16
000216 01fe      	MOVW R30,R28
000217 963c      	ADIW R30,12
000218 d2c5      	RCALL SUBOPT_0xC
                 ; 0000 00C2 address += sizeof(users[i].name);
000219 d295      	RCALL SUBOPT_0x3
                 ; 0000 00C3 EE_ReadString(address, currentUser.id, sizeof(currentUser.id));  // Read ID as a string
00021a 01fe      	MOVW R30,R28
00021b 9672      	ADIW R30,18
00021c d297      	RCALL SUBOPT_0x4
                 ; 0000 00C4 
                 ; 0000 00C5 if (strcmp(currentUser.id, enteredID) == 0)
00021d d2c5      	RCALL SUBOPT_0xD
00021e 01de      	MOVW R26,R28
00021f 965a      	ADIW R26,26
000220 d25d      	RCALL _strcmp
000221 30e0      	CPI  R30,0
000222 f4e1      	BRNE _0x2A
                 ; 0000 00C6 {
                 ; 0000 00C7 
                 ; 0000 00C8 address += sizeof(users[i].id);
000223 d295      	RCALL SUBOPT_0x5
                 ; 0000 00C9 EE_ReadString(address, currentUser.pc, sizeof(currentUser.pc));  // Read PC as a string
000224 01fe      	MOVW R30,R28
000225 9676      	ADIW R30,22
000226 d28d      	RCALL SUBOPT_0x4
                 ; 0000 00CA 
                 ; 0000 00CB displayMessage("Enter your PC: ", 1000);
                +
000227 e0e0     +LDI R30 , LOW ( _0x25 + ( 16 ) )
000228 e0f2     +LDI R31 , HIGH ( _0x25 + ( 16 ) )
                 	__POINTW1MN _0x25,16
000229 d2af      	RCALL SUBOPT_0xB
                 ; 0000 00CC 
                 ; 0000 00CD if (enterValueWithKeypad(enteredPC))
00022a d293      	RCALL SUBOPT_0x6
00022b f081      	BREQ _0x2B
                 ; 0000 00CE {
                 ; 0000 00CF if (strcmp(currentUser.pc, enteredPC) == 0)
00022c 01fe      	MOVW R30,R28
00022d 9674      	ADIW R30,20
00022e d293      	RCALL SUBOPT_0x7
00022f f449      	BRNE _0x2C
                 ; 0000 00D0 {
                 ; 0000 00D1 lcd_clear();
000230 d1f6      	RCALL _lcd_clear
                 ; 0000 00D2 lcd_puts("Welcome, ");
                +
000231 e1a0     +LDI R26 , LOW ( _0x25 + ( 32 ) )
000232 e0b2     +LDI R27 , HIGH ( _0x25 + ( 32 ) )
                 	__POINTW2MN _0x25,32
000233 d210      	RCALL _lcd_puts
                 ; 0000 00D3 lcd_puts(currentUser.name);
000234 01de      	MOVW R26,R28
000235 961a      	ADIW R26,10
000236 d20d      	RCALL _lcd_puts
                 ; 0000 00D4 // Open the door
                 ; 0000 00D5 DDRB .0 = 1;
000237 9ab8      	SBI  0x17,0
                 ; 0000 00D6 }
                 ; 0000 00D7 else
000238 c003      	RJMP _0x2F
                 _0x2C:
                 ; 0000 00D8 {
                 ; 0000 00D9 displayMessage("Sorry wrong PC", 1000);
                +
000239 e1ea     +LDI R30 , LOW ( _0x25 + ( 42 ) )
00023a e0f2     +LDI R31 , HIGH ( _0x25 + ( 42 ) )
                 	__POINTW1MN _0x25,42
00023b d28d      	RCALL SUBOPT_0x8
                 ; 0000 00DA // one peep alarm
                 ; 0000 00DB generateTone();
                 ; 0000 00DC }
                 _0x2F:
                 ; 0000 00DD }
                 ; 0000 00DE userFound = 1;
                 _0x2B:
                +
00023c e021     +LDI R18 , LOW ( 1 )
00023d e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 00DF break;
00023e c004      	RJMP _0x29
                 ; 0000 00E0 }
                 ; 0000 00E1 
                 ; 0000 00E2 address += sizeof(users[i].id);
                 _0x2A:
00023f d28f      	RCALL SUBOPT_0x9
                 ; 0000 00E3 address += sizeof(users[i].pc);
                 ; 0000 00E4 }
                +
000240 5f4f     +SUBI R20 , LOW ( - 1 )
000241 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000242 cfcd      	RJMP _0x28
                 _0x29:
                 ; 0000 00E5 }
000243 9624      	ADIW R28,4
                 ; 0000 00E6 
                 ; 0000 00E7 if (!userFound)
                 _0x26:
000244 2e02      	MOV  R0,R18
000245 2a03      	OR   R0,R19
000246 f421      	BRNE _0x30
                 ; 0000 00E8 {
                 ; 0000 00E9 displayMessage("Wrong ID", 1000);
                +
000247 e2e9     +LDI R30 , LOW ( _0x25 + ( 57 ) )
000248 e0f2     +LDI R31 , HIGH ( _0x25 + ( 57 ) )
                 	__POINTW1MN _0x25,57
000249 d27f      	RCALL SUBOPT_0x8
                 ; 0000 00EA // Two peeps alarm
                 ; 0000 00EB generateTone();
                 ; 0000 00EC generateTone();
00024a d19e      	RCALL _generateTone
                 ; 0000 00ED }
                 ; 0000 00EE delay_ms(5000);
                 _0x30:
00024b d288      	RCALL SUBOPT_0xA
                 ; 0000 00EF // close the door and clear lcd
                 ; 0000 00F0 DDRB .0 = 0;
                 ; 0000 00F1 lcd_clear();
                 ; 0000 00F2 }
00024c d2cf      	RCALL __LOADLOCR6
00024d 9668      	ADIW R28,24
00024e c09b      	RJMP _0xAE
                 ; .FEND
                 
                 	.DSEG
                 _0x25:
0001f0           	.BYTE 0x42
                 ;interrupt [2] void ext1 (void)
                 ; 0000 00F5 {
                 
                 	.CSEG
                 _ext1:
                 ; .FSTART _ext1
00024f d242      	RCALL SUBOPT_0x0
                 ; 0000 00F6 // action on interrupt
                 ; 0000 00F7 char enteredPC[4];
                 ; 0000 00F8 char enteredStudentID[4];
                 ; 0000 00F9 char enteredNewPC[4];
                 ; 0000 00FA User student;
                 ; 0000 00FB User admin;
                 ; 0000 00FC unsigned int adminPCAddress = 0;
                 ; 0000 00FD unsigned int address = 0;
                 ; 0000 00FE int userFound = 0;
                 ; 0000 00FF int i;
                 ; 0000 0100 
                 ; 0000 0101 for (i = 0; i < sizeof(users) / sizeof(users[0]); ++i)
000250 97aa      	SBIW R28,42
000251 d24e      	RCALL SUBOPT_0x1
                 ;	enteredPC -> Y+44
                 ;	enteredStudentID -> Y+40
                 ;	enteredNewPC -> Y+36
                 ;	student -> Y+22
                 ;	admin -> Y+8
                 ;	adminPCAddress -> R16,R17
                 ;	address -> R18,R19
                 ;	userFound -> R20,R21
                 ;	i -> Y+6
                +
000252 e040     +LDI R20 , LOW ( 0 )
000253 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
000254 e0e0      	LDI  R30,LOW(0)
000255 83ee      	STD  Y+6,R30
000256 83ef      	STD  Y+6+1,R30
                 _0x34:
000257 81ae      	LDD  R26,Y+6
000258 81bf      	LDD  R27,Y+6+1
000259 9715      	SBIW R26,5
00025a f51c      	BRGE _0x35
                 ; 0000 0102 {
                 ; 0000 0103 EE_ReadString(address, admin.name, sizeof(users[i].name));
00025b 933a      	ST   -Y,R19
00025c 932a      	ST   -Y,R18
00025d 01fe      	MOVW R30,R28
00025e 963a      	ADIW R30,10
00025f d27e      	RCALL SUBOPT_0xC
                 ; 0000 0104 if (strcmp(admin.name, "Prof") == 0)
000260 01fe      	MOVW R30,R28
000261 9638      	ADIW R30,8
000262 93fa      	ST   -Y,R31
000263 93ea      	ST   -Y,R30
                +
000264 e3a2     +LDI R26 , LOW ( _0x37 + ( 0 ) )
000265 e0b2     +LDI R27 , HIGH ( _0x37 + ( 0 ) )
                 	__POINTW2MN _0x37,0
000266 d217      	RCALL _strcmp
000267 30e0      	CPI  R30,0
000268 f469      	BRNE _0x36
                 ; 0000 0105 {
                 ; 0000 0106 address += sizeof(users[i].name);
000269 d27e      	RCALL SUBOPT_0xE
                 ; 0000 0107 EE_ReadString(address, admin.id, sizeof(admin.id));
00026a 01fe      	MOVW R30,R28
00026b 9670      	ADIW R30,16
00026c d247      	RCALL SUBOPT_0x4
                 ; 0000 0108 address += sizeof(users[i].id);
                +
00026d 5f2c     +SUBI R18 , LOW ( - 4 )
00026e 4f3f     +SBCI R19 , HIGH ( - 4 )
                 	__ADDWRN 18,19,4
                 ; 0000 0109 EE_ReadString(address, admin.pc, sizeof(admin.pc));
00026f 933a      	ST   -Y,R19
000270 932a      	ST   -Y,R18
000271 01fe      	MOVW R30,R28
000272 9674      	ADIW R30,20
000273 d240      	RCALL SUBOPT_0x4
                 ; 0000 010A adminPCAddress = address;
000274 0189      	MOVW R16,R18
                 ; 0000 010B break;
000275 c008      	RJMP _0x35
                 ; 0000 010C }
                 ; 0000 010D address += sizeof(users[i].pc);
                 _0x36:
                +
000276 5f2c     +SUBI R18 , LOW ( - 4 )
000277 4f3f     +SBCI R19 , HIGH ( - 4 )
                 	__ADDWRN 18,19,4
                 ; 0000 010E }
000278 81ee      	LDD  R30,Y+6
000279 81ff      	LDD  R31,Y+6+1
00027a 9631      	ADIW R30,1
00027b 83ee      	STD  Y+6,R30
00027c 83ff      	STD  Y+6+1,R31
00027d cfd9      	RJMP _0x34
                 _0x35:
                 ; 0000 010F 
                 ; 0000 0110 address = 0; // reset the address
                +
00027e e020     +LDI R18 , LOW ( 0 )
00027f e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 0111 
                 ; 0000 0112 displayMessage("Enter Admin PC: ", 1000);
                +
000280 e3e7     +LDI R30 , LOW ( _0x37 + ( 5 ) )
000281 e0f2     +LDI R31 , HIGH ( _0x37 + ( 5 ) )
                 	__POINTW1MN _0x37,5
000282 d256      	RCALL SUBOPT_0xB
                 ; 0000 0113 
                 ; 0000 0114 if (enterValueWithKeypad(enteredPC))
000283 01de      	MOVW R26,R28
000284 969c      	ADIW R26,44
000285 d13e      	RCALL _enterValueWithKeypad
000286 9730      	SBIW R30,0
000287 f409      	BRNE PC+2
000288 c04f      	RJMP _0x38
                 ; 0000 0115 {
                 ; 0000 0116 
                 ; 0000 0117 if (strcmp(admin.pc, enteredPC) == 0)
000289 01fe      	MOVW R30,R28
00028a 9672      	ADIW R30,18
00028b 93fa      	ST   -Y,R31
00028c 93ea      	ST   -Y,R30
00028d 01de      	MOVW R26,R28
00028e 969e      	ADIW R26,46
00028f d1ee      	RCALL _strcmp
000290 30e0      	CPI  R30,0
000291 f009      	BREQ PC+2
000292 c045      	RJMP _0x39
                 ; 0000 0118 {
                 ; 0000 0119 displayMessage("Enter Student ID: ", 1000);
                +
000293 e4e8     +LDI R30 , LOW ( _0x37 + ( 22 ) )
000294 e0f2     +LDI R31 , HIGH ( _0x37 + ( 22 ) )
                 	__POINTW1MN _0x37,22
000295 d243      	RCALL SUBOPT_0xB
                 ; 0000 011A 
                 ; 0000 011B if (enterValueWithKeypad(enteredStudentID))
000296 01de      	MOVW R26,R28
000297 9698      	ADIW R26,40
000298 d12b      	RCALL _enterValueWithKeypad
000299 9730      	SBIW R30,0
00029a f1e9      	BREQ _0x3A
                 ; 0000 011C {
                 ; 0000 011D int j;
                 ; 0000 011E for (j = 0; j < sizeof(users) / sizeof(users[0]); ++j)
00029b 9722      	SBIW R28,2
                 ;	enteredPC -> Y+46
                 ;	enteredStudentID -> Y+42
                 ;	enteredNewPC -> Y+38
                 ;	student -> Y+24
                 ;	admin -> Y+10
                 ;	i -> Y+8
                 ;	j -> Y+0
00029c e0e0      	LDI  R30,LOW(0)
00029d 83e8      	STD  Y+0,R30
00029e 83e9      	STD  Y+0+1,R30
                 _0x3C:
00029f 81a8      	LD   R26,Y
0002a0 81b9      	LDD  R27,Y+1
0002a1 9715      	SBIW R26,5
0002a2 f5a4      	BRGE _0x3D
                 ; 0000 011F {
                 ; 0000 0120 address += sizeof(users[j].name);
0002a3 d244      	RCALL SUBOPT_0xE
                 ; 0000 0121 EE_ReadString(address, student.id, sizeof(student.id));
0002a4 01fe      	MOVW R30,R28
0002a5 96b0      	ADIW R30,32
0002a6 d20d      	RCALL SUBOPT_0x4
                 ; 0000 0122 address += sizeof(users[j].id);
                +
0002a7 5f2c     +SUBI R18 , LOW ( - 4 )
0002a8 4f3f     +SBCI R19 , HIGH ( - 4 )
                 	__ADDWRN 18,19,4
                 ; 0000 0123 if (strcmp(student.id, enteredStudentID) == 0)
0002a9 01fe      	MOVW R30,R28
0002aa 967e      	ADIW R30,30
0002ab 93fa      	ST   -Y,R31
0002ac 93ea      	ST   -Y,R30
0002ad d23f      	RCALL SUBOPT_0xF
0002ae f479      	BRNE _0x3E
                 ; 0000 0124 {
                 ; 0000 0125 displayMessage("Enter student's new PC: ", 1000);
                +
0002af e5eb     +LDI R30 , LOW ( _0x37 + ( 41 ) )
0002b0 e0f2     +LDI R31 , HIGH ( _0x37 + ( 41 ) )
                 	__POINTW1MN _0x37,41
0002b1 d227      	RCALL SUBOPT_0xB
                 ; 0000 0126 if (enterValueWithKeypad(enteredNewPC))
0002b2 d23f      	RCALL SUBOPT_0x10
0002b3 f049      	BREQ _0x3F
                 ; 0000 0127 {
                 ; 0000 0128 // Set the new pc for this student, address is for student PC
                 ; 0000 0129 EE_WriteString(address, enteredNewPC);
0002b4 933a      	ST   -Y,R19
0002b5 932a      	ST   -Y,R18
0002b6 01de      	MOVW R26,R28
0002b7 9698      	ADIW R26,40
0002b8 d0aa      	RCALL _EE_WriteString
                 ; 0000 012A displayMessage("Student PC is stored", 3000);
                +
0002b9 e7e4     +LDI R30 , LOW ( _0x37 + ( 66 ) )
0002ba e0f2     +LDI R31 , HIGH ( _0x37 + ( 66 ) )
                 	__POINTW1MN _0x37,66
0002bb d23b      	RCALL SUBOPT_0x11
                 ; 0000 012B userFound = 1;
                 ; 0000 012C break;
0002bc c01a      	RJMP _0x3D
                 ; 0000 012D }
                 ; 0000 012E }
                 _0x3F:
                 ; 0000 012F else if (strcmp(admin.id, enteredStudentID) == 0)
0002bd c011      	RJMP _0x40
                 _0x3E:
0002be d224      	RCALL SUBOPT_0xD
0002bf d22d      	RCALL SUBOPT_0xF
0002c0 f471      	BRNE _0x41
                 ; 0000 0130 {
                 ; 0000 0131 displayMessage("Enter your new PC: ", 1000);
                +
0002c1 e8e9     +LDI R30 , LOW ( _0x37 + ( 87 ) )
0002c2 e0f2     +LDI R31 , HIGH ( _0x37 + ( 87 ) )
                 	__POINTW1MN _0x37,87
0002c3 d215      	RCALL SUBOPT_0xB
                 ; 0000 0132 if (enterValueWithKeypad(enteredNewPC))
0002c4 d22d      	RCALL SUBOPT_0x10
0002c5 f049      	BREQ _0x42
                 ; 0000 0133 {
                 ; 0000 0134 // Set the new pc for this user (Admin),  address is for admin PC
                 ; 0000 0135 EE_WriteString(adminPCAddress, enteredNewPC);
0002c6 931a      	ST   -Y,R17
0002c7 930a      	ST   -Y,R16
0002c8 01de      	MOVW R26,R28
0002c9 9698      	ADIW R26,40
0002ca d098      	RCALL _EE_WriteString
                 ; 0000 0136 displayMessage("Your PC is stored", 3000);
                +
0002cb e9ed     +LDI R30 , LOW ( _0x37 + ( 107 ) )
0002cc e0f2     +LDI R31 , HIGH ( _0x37 + ( 107 ) )
                 	__POINTW1MN _0x37,107
0002cd d229      	RCALL SUBOPT_0x11
                 ; 0000 0137 userFound = 1;
                 ; 0000 0138 break;
0002ce c008      	RJMP _0x3D
                 ; 0000 0139 }
                 ; 0000 013A }
                 _0x42:
                 ; 0000 013B address += sizeof(users[i].pc);
                 _0x41:
                 _0x40:
                +
0002cf 5f2c     +SUBI R18 , LOW ( - 4 )
0002d0 4f3f     +SBCI R19 , HIGH ( - 4 )
                 	__ADDWRN 18,19,4
                 ; 0000 013C }
0002d1 81e8      	LD   R30,Y
0002d2 81f9      	LDD  R31,Y+1
0002d3 9631      	ADIW R30,1
0002d4 83e8      	ST   Y,R30
0002d5 83f9      	STD  Y+1,R31
0002d6 cfc8      	RJMP _0x3C
                 _0x3D:
                 ; 0000 013D }
0002d7 9622      	ADIW R28,2
                 ; 0000 013E }
                 _0x3A:
                 ; 0000 013F }
                 _0x39:
                 ; 0000 0140 
                 ; 0000 0141 if (!userFound)
                 _0x38:
0002d8 2e04      	MOV  R0,R20
0002d9 2a05      	OR   R0,R21
0002da f449      	BRNE _0x43
                 ; 0000 0142 {
                 ; 0000 0143 displayMessage("Contact Admin", 3000);
                +
0002db eaef     +LDI R30 , LOW ( _0x37 + ( 125 ) )
0002dc e0f2     +LDI R31 , HIGH ( _0x37 + ( 125 ) )
                 	__POINTW1MN _0x37,125
0002dd 93fa      	ST   -Y,R31
0002de 93ea      	ST   -Y,R30
0002df eba8      	LDI  R26,LOW(3000)
0002e0 e0bb      	LDI  R27,HIGH(3000)
0002e1 d0d9      	RCALL _displayMessage
                 ; 0000 0144 // Two peeps alarm
                 ; 0000 0145 generateTone();
0002e2 d106      	RCALL _generateTone
                 ; 0000 0146 generateTone();
0002e3 d105      	RCALL _generateTone
                 ; 0000 0147 }
                 ; 0000 0148 delay_ms(5000);
                 _0x43:
0002e4 e8a8      	LDI  R26,LOW(5000)
0002e5 e1b3      	LDI  R27,HIGH(5000)
0002e6 d23c      	RCALL _delay_ms
                 ; 0000 0149 lcd_clear();
0002e7 d13f      	RCALL _lcd_clear
                 ; 0000 014A }
0002e8 d233      	RCALL __LOADLOCR6
0002e9 96e0      	ADIW R28,48
                 _0xAE:
0002ea 91e9      	LD   R30,Y+
0002eb bfef      	OUT  SREG,R30
0002ec 91f9      	LD   R31,Y+
0002ed 91e9      	LD   R30,Y+
0002ee 91b9      	LD   R27,Y+
0002ef 91a9      	LD   R26,Y+
0002f0 9199      	LD   R25,Y+
0002f1 9189      	LD   R24,Y+
0002f2 9179      	LD   R23,Y+
0002f3 9169      	LD   R22,Y+
0002f4 90f9      	LD   R15,Y+
0002f5 9019      	LD   R1,Y+
0002f6 9009      	LD   R0,Y+
0002f7 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x37:
000232           	.BYTE 0x8B
                 ;char keypad()
                 ; 0000 014D {
                 
                 	.CSEG
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 014E while (1)
                 _0x44:
                 ; 0000 014F {
                 ; 0000 0150 PORTC .0 = 0;
0002f8 98a8      	CBI  0x15,0
                 ; 0000 0151 PORTC .1 = 1;
0002f9 9aa9      	SBI  0x15,1
                 ; 0000 0152 PORTC .2 = 1;
0002fa 9aaa      	SBI  0x15,2
                 ; 0000 0153 
                 ; 0000 0154 
                 ; 0000 0155 switch (PINC)
0002fb b3e3      	IN   R30,0x13
                 ; 0000 0156 {
                 ; 0000 0157 case 0b11110110:
0002fc 3fe6      	CPI  R30,LOW(0xF6)
0002fd f421      	BRNE _0x50
                 ; 0000 0158 while (PINC .3 == 0);
                 _0x51:
0002fe 9b9b      	SBIS 0x13,3
0002ff cffe      	RJMP _0x51
                 ; 0000 0159 return 1;
000300 e0e1      	LDI  R30,LOW(1)
000301 9508      	RET
                 ; 0000 015A case 0b11101110:
                 _0x50:
000302 3eee      	CPI  R30,LOW(0xEE)
000303 f421      	BRNE _0x54
                 ; 0000 015B while (PINC .4 == 0);
                 _0x55:
000304 9b9c      	SBIS 0x13,4
000305 cffe      	RJMP _0x55
                 ; 0000 015C return 4;
000306 e0e4      	LDI  R30,LOW(4)
000307 9508      	RET
                 ; 0000 015D case 0b11011110:
                 _0x54:
000308 3dee      	CPI  R30,LOW(0xDE)
000309 f421      	BRNE _0x58
                 ; 0000 015E while (PINC .5 == 0);
                 _0x59:
00030a 9b9d      	SBIS 0x13,5
00030b cffe      	RJMP _0x59
                 ; 0000 015F return 7;
00030c e0e7      	LDI  R30,LOW(7)
00030d 9508      	RET
                 ; 0000 0160 case 0b10111110:
                 _0x58:
00030e 3bee      	CPI  R30,LOW(0xBE)
00030f f421      	BRNE _0x4F
                 ; 0000 0161 while (PINC .6 == 0);
                 _0x5D:
000310 9b9e      	SBIS 0x13,6
000311 cffe      	RJMP _0x5D
                 ; 0000 0162 return '*';
000312 e2ea      	LDI  R30,LOW(42)
000313 9508      	RET
                 ; 0000 0163 }
                 _0x4F:
                 ; 0000 0164 
                 ; 0000 0165 PORTC .0 = 1;
000314 9aa8      	SBI  0x15,0
                 ; 0000 0166 PORTC .1 = 0;
000315 98a9      	CBI  0x15,1
                 ; 0000 0167 PORTC .2 = 1;
000316 9aaa      	SBI  0x15,2
                 ; 0000 0168 
                 ; 0000 0169 switch (PINC)
000317 b3e3      	IN   R30,0x13
                 ; 0000 016A {
                 ; 0000 016B case 0b11110101:
000318 3fe5      	CPI  R30,LOW(0xF5)
000319 f421      	BRNE _0x69
                 ; 0000 016C while (PINC .3 == 0);
                 _0x6A:
00031a 9b9b      	SBIS 0x13,3
00031b cffe      	RJMP _0x6A
                 ; 0000 016D return 2;
00031c e0e2      	LDI  R30,LOW(2)
00031d 9508      	RET
                 ; 0000 016E case 0b11101101:
                 _0x69:
00031e 3eed      	CPI  R30,LOW(0xED)
00031f f421      	BRNE _0x6D
                 ; 0000 016F while (PINC .4 == 0);
                 _0x6E:
000320 9b9c      	SBIS 0x13,4
000321 cffe      	RJMP _0x6E
                 ; 0000 0170 return 5;
000322 e0e5      	LDI  R30,LOW(5)
000323 9508      	RET
                 ; 0000 0171 case 0b11011101:
                 _0x6D:
000324 3ded      	CPI  R30,LOW(0xDD)
000325 f421      	BRNE _0x71
                 ; 0000 0172 while (PINC .5 == 0);
                 _0x72:
000326 9b9d      	SBIS 0x13,5
000327 cffe      	RJMP _0x72
                 ; 0000 0173 return 8;
000328 e0e8      	LDI  R30,LOW(8)
000329 9508      	RET
                 ; 0000 0174 case 0b10111101:
                 _0x71:
00032a 3bed      	CPI  R30,LOW(0xBD)
00032b f421      	BRNE _0x68
                 ; 0000 0175 while (PINC .6 == 0);
                 _0x76:
00032c 9b9e      	SBIS 0x13,6
00032d cffe      	RJMP _0x76
                 ; 0000 0176 return 0;
00032e e0e0      	LDI  R30,LOW(0)
00032f 9508      	RET
                 ; 0000 0177 }
                 _0x68:
                 ; 0000 0178 
                 ; 0000 0179 PORTC .0 = 1;
000330 9aa8      	SBI  0x15,0
                 ; 0000 017A PORTC .1 = 1;
000331 9aa9      	SBI  0x15,1
                 ; 0000 017B PORTC .2 = 0;
000332 98aa      	CBI  0x15,2
                 ; 0000 017C 
                 ; 0000 017D switch (PINC)
000333 b3e3      	IN   R30,0x13
                 ; 0000 017E {
                 ; 0000 017F case 0b11110011:
000334 3fe3      	CPI  R30,LOW(0xF3)
000335 f421      	BRNE _0x82
                 ; 0000 0180 while (PINC .3 == 0);
                 _0x83:
000336 9b9b      	SBIS 0x13,3
000337 cffe      	RJMP _0x83
                 ; 0000 0181 return 3;
000338 e0e3      	LDI  R30,LOW(3)
000339 9508      	RET
                 ; 0000 0182 case 0b11101011:
                 _0x82:
00033a 3eeb      	CPI  R30,LOW(0xEB)
00033b f421      	BRNE _0x86
                 ; 0000 0183 while (PINC .4 == 0);
                 _0x87:
00033c 9b9c      	SBIS 0x13,4
00033d cffe      	RJMP _0x87
                 ; 0000 0184 return 6;
00033e e0e6      	LDI  R30,LOW(6)
00033f 9508      	RET
                 ; 0000 0185 case 0b11011011:
                 _0x86:
000340 3deb      	CPI  R30,LOW(0xDB)
000341 f421      	BRNE _0x8A
                 ; 0000 0186 while (PINC .5 == 0);
                 _0x8B:
000342 9b9d      	SBIS 0x13,5
000343 cffe      	RJMP _0x8B
                 ; 0000 0187 return 9;
000344 e0e9      	LDI  R30,LOW(9)
000345 9508      	RET
                 ; 0000 0188 case 0b10111011:
                 _0x8A:
000346 3beb      	CPI  R30,LOW(0xBB)
000347 f421      	BRNE _0x81
                 ; 0000 0189 while (PINC .6 == 0);
                 _0x8F:
000348 9b9e      	SBIS 0x13,6
000349 cffe      	RJMP _0x8F
                 ; 0000 018A return 11;
00034a e0eb      	LDI  R30,LOW(11)
00034b 9508      	RET
                 ; 0000 018B }
                 _0x81:
                 ; 0000 018C }
00034c cfab      	RJMP _0x44
                 ; 0000 018D }
                 ; .FEND
                 ;unsigned char EE_Read(unsigned int address)
                 ; 0000 0190 {
                 _EE_Read:
                 ; .FSTART _EE_Read
                 ; 0000 0191 while (EECR .1 == 1); // Wait till EEPROM is ready
00034d 931a      	ST   -Y,R17
00034e 930a      	ST   -Y,R16
00034f 018d      	MOVW R16,R26
                 ;	address -> R16,R17
                 _0x92:
000350 99e1      	SBIC 0x1C,1
000351 cffe      	RJMP _0x92
                 ; 0000 0192 EEAR = address;       // Prepare the address you want to read from
                +
000352 bb1f     +OUT 30 + 1 , R17
000353 bb0e     +OUT 30 , R16
                 	__OUTWR 16,17,30
                 ; 0000 0193 EECR .0 = 1;          // Execute read command
000354 9ae0      	SBI  0x1C,0
                 ; 0000 0194 return EEDR;
000355 b3ed      	IN   R30,0x1D
000356 c08f      	RJMP _0x2080003
                 ; 0000 0195 }
                 ; .FEND
                 ;void EE_Write(unsigned int address, unsigned char data)
                 ; 0000 0198 {
                 _EE_Write:
                 ; .FSTART _EE_Write
                 ; 0000 0199 while (EECR .1 == 1); // Wait till EEPROM is ready
000357 d1bf      	RCALL __SAVELOCR4
000358 2f1a      	MOV  R17,R26
                +
000359 812c     +LDD R18 , Y + 4
00035a 813d     +LDD R19 , Y + 4 + 1
                 	__GETWRS 18,19,4
                 ;	address -> R18,R19
                 ;	data -> R17
                 _0x97:
00035b 99e1      	SBIC 0x1C,1
00035c cffe      	RJMP _0x97
                 ; 0000 019A EEAR = address;       // Prepare the address you want to read from
                +
00035d bb3f     +OUT 30 + 1 , R19
00035e bb2e     +OUT 30 , R18
                 	__OUTWR 18,19,30
                 ; 0000 019B EEDR = data;          // Prepare the data you want to write in the address above
00035f bb1d      	OUT  0x1D,R17
                 ; 0000 019C EECR .2 = 1;          // Master write enable
000360 9ae2      	SBI  0x1C,2
                 ; 0000 019D EECR .1 = 1;          // Write Enable
000361 9ae1      	SBI  0x1C,1
                 ; 0000 019E }
000362 c05e      	RJMP _0x2080004
                 ; .FEND
                 ;void EE_WriteString(unsigned int address, const char *str)
                 ; 0000 01A1 {
                 _EE_WriteString:
                 ; .FSTART _EE_WriteString
                 ; 0000 01A2 // Write each character of the string to EEPROM
                 ; 0000 01A3 while (*str)
000363 d19b      	RCALL SUBOPT_0x12
                 ;	address -> R18,R19
                 ;	*str -> R16,R17
                 _0x9E:
000364 01d8      	MOVW R26,R16
000365 91ec      	LD   R30,X
000366 30e0      	CPI  R30,0
000367 f051      	BREQ _0xA0
                 ; 0000 01A4 EE_Write(address++, *str++);
000368 01f9      	MOVW R30,R18
                +
000369 5f2f     +SUBI R18 , LOW ( - 1 )
00036a 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00036b 93fa      	ST   -Y,R31
00036c 93ea      	ST   -Y,R30
                +
00036d 5f0f     +SUBI R16 , LOW ( - 1 )
00036e 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00036f 91ac      	LD   R26,X
000370 dfe6      	RCALL _EE_Write
000371 cff2      	RJMP _0x9E
                 _0xA0:
                 ; 0000 01A6 EE_Write(address, '\0');
000372 933a      	ST   -Y,R19
000373 932a      	ST   -Y,R18
000374 e0a0      	LDI  R26,LOW(0)
000375 dfe1      	RCALL _EE_Write
                 ; 0000 01A7 }
000376 c04a      	RJMP _0x2080004
                 ; .FEND
                 ;void EE_ReadString(unsigned int address, char *buffer, unsigned int length)
                 ; 0000 01AA {
                 _EE_ReadString:
                 ; .FSTART _EE_ReadString
                 ; 0000 01AB unsigned int i;
                 ; 0000 01AC for (i = 0; i < length; ++i)
000377 d19d      	RCALL __SAVELOCR6
000378 019d      	MOVW R18,R26
                +
000379 814e     +LDD R20 , Y + 6
00037a 815f     +LDD R21 , Y + 6 + 1
                 	__GETWRS 20,21,6
                 ;	address -> Y+8
                 ;	*buffer -> R20,R21
                 ;	length -> R18,R19
                 ;	i -> R16,R17
                +
00037b e000     +LDI R16 , LOW ( 0 )
00037c e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xA2:
                +
00037d 1702     +CP R16 , R18
00037e 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
00037f f4b0      	BRSH _0xA3
                 ; 0000 01AD {
                 ; 0000 01AE buffer[i] = EE_Read(address + i);
000380 01f8      	MOVW R30,R16
000381 0fe4      	ADD  R30,R20
000382 1ff5      	ADC  R31,R21
000383 93ff      	PUSH R31
000384 93ef      	PUSH R30
000385 85a8      	LDD  R26,Y+8
000386 85b9      	LDD  R27,Y+8+1
000387 0fa0      	ADD  R26,R16
000388 1fb1      	ADC  R27,R17
000389 dfc3      	RCALL _EE_Read
00038a 91af      	POP  R26
00038b 91bf      	POP  R27
00038c 93ec      	ST   X,R30
                 ; 0000 01AF if (buffer[i] == '\0')
00038d 01f8      	MOVW R30,R16
00038e 0fe4      	ADD  R30,R20
00038f 1ff5      	ADC  R31,R21
000390 81e0      	LD   R30,Z
000391 30e0      	CPI  R30,0
000392 f019      	BREQ _0xA3
                 ; 0000 01B0 break;
                 ; 0000 01B1 }
                +
000393 5f0f     +SUBI R16 , LOW ( - 1 )
000394 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000395 cfe7      	RJMP _0xA2
                 _0xA3:
                 ; 0000 01B2 }
000396 d185      	RCALL __LOADLOCR6
000397 962a      	ADIW R28,10
000398 9508      	RET
                 ; .FEND
                 ;void initializeUsers()
                 ; 0000 01B5 {
                 _initializeUsers:
                 ; .FSTART _initializeUsers
                 ; 0000 01B6 unsigned int address = 0;
                 ; 0000 01B7 int i;
                 ; 0000 01B8 for (i = 0; i < sizeof(users) / sizeof(users[0]); ++i)
000399 d17d      	RCALL __SAVELOCR4
                 ;	address -> R16,R17
                 ;	i -> R18,R19
                +
00039a e000     +LDI R16 , LOW ( 0 )
00039b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
00039c e020     +LDI R18 , LOW ( 0 )
00039d e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0xA6:
                +
00039e 3025     +CPI R18 , LOW ( 5 )
00039f e0e0     +LDI R30 , HIGH ( 5 )
0003a0 073e     +CPC R19 , R30
                 	__CPWRN 18,19,5
0003a1 f4c4      	BRGE _0xA7
                 ; 0000 01B9 {
                 ; 0000 01BA EE_WriteString(address, users[i].name);
0003a2 931a      	ST   -Y,R17
0003a3 930a      	ST   -Y,R16
0003a4 d15f      	RCALL SUBOPT_0x13
0003a5 54e3      	SUBI R30,LOW(-_users)
0003a6 4ffd      	SBCI R31,HIGH(-_users)
0003a7 01df      	MOVW R26,R30
0003a8 dfba      	RCALL _EE_WriteString
                 ; 0000 01BB address += sizeof(users[i].name);
0003a9 d105      	RCALL SUBOPT_0x3
                 ; 0000 01BC 
                 ; 0000 01BD EE_WriteString(address, users[i].id);
0003aa d159      	RCALL SUBOPT_0x13
                +
0003ab 53ed     +SUBI R30 , LOW ( - _users - ( 6 ) )
0003ac 4ffd     +SBCI R31 , HIGH ( - _users - ( 6 ) )
                 	__ADDW1MN _users,6
0003ad 01df      	MOVW R26,R30
0003ae dfb4      	RCALL _EE_WriteString
                 ; 0000 01BE address += sizeof(users[i].id);
0003af d109      	RCALL SUBOPT_0x5
                 ; 0000 01BF 
                 ; 0000 01C0 EE_WriteString(address, users[i].pc);
0003b0 d153      	RCALL SUBOPT_0x13
                +
0003b1 53e9     +SUBI R30 , LOW ( - _users - ( 10 ) )
0003b2 4ffd     +SBCI R31 , HIGH ( - _users - ( 10 ) )
                 	__ADDW1MN _users,10
0003b3 01df      	MOVW R26,R30
0003b4 dfae      	RCALL _EE_WriteString
                 ; 0000 01C1 address += sizeof(users[i].pc);
                +
0003b5 5f0c     +SUBI R16 , LOW ( - 4 )
0003b6 4f1f     +SBCI R17 , HIGH ( - 4 )
                 	__ADDWRN 16,17,4
                 ; 0000 01C2 }
                +
0003b7 5f2f     +SUBI R18 , LOW ( - 1 )
0003b8 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0003b9 cfe4      	RJMP _0xA6
                 _0xA7:
                 ; 0000 01C3 }
0003ba c095      	RJMP _0x2080002
                 ; .FEND
                 ;void displayMessage(char *message, int delay_ms_value)
                 ; 0000 01C6 {
                 _displayMessage:
                 ; .FSTART _displayMessage
                 ; 0000 01C7 lcd_clear();
0003bb d143      	RCALL SUBOPT_0x12
                 ;	*message -> R18,R19
                 ;	delay_ms_value -> R16,R17
0003bc d06a      	RCALL _lcd_clear
                 ; 0000 01C8 lcd_puts(message);
0003bd 01d9      	MOVW R26,R18
0003be d085      	RCALL _lcd_puts
                 ; 0000 01C9 delay_ms(delay_ms_value);
0003bf 01d8      	MOVW R26,R16
0003c0 d162      	RCALL _delay_ms
                 ; 0000 01CA }
                 _0x2080004:
0003c1 d15c      	RCALL __LOADLOCR4
0003c2 9626      	ADIW R28,6
0003c3 9508      	RET
                 ; .FEND
                 ;int enterValueWithKeypad(char *buffer)
                 ; 0000 01CD {
                 _enterValueWithKeypad:
                 ; .FSTART _enterValueWithKeypad
                 ; 0000 01CE buffer[0] = keypad() + '0';
0003c4 931a      	ST   -Y,R17
0003c5 930a      	ST   -Y,R16
0003c6 018d      	MOVW R16,R26
                 ;	*buffer -> R16,R17
0003c7 df30      	RCALL _keypad
0003c8 5de0      	SUBI R30,-LOW(48)
0003c9 01d8      	MOVW R26,R16
0003ca 93ec      	ST   X,R30
                 ; 0000 01CF lcd_putchar(buffer[0]);
0003cb 91ac      	LD   R26,X
0003cc d064      	RCALL _lcd_putchar
                 ; 0000 01D0 buffer[1] = keypad() + '0';
0003cd df2a      	RCALL _keypad
0003ce 5de0      	SUBI R30,-LOW(48)
                +
0003cf 01d8     +MOVW R26 , R16
0003d0 9611     +ADIW R26 , 1
0003d1 93ec     +ST X , R30
                 	__PUTB1RNS 16,1
                 ; 0000 01D1 lcd_putchar(buffer[1]);
0003d2 01f8      	MOVW R30,R16
0003d3 81a1      	LDD  R26,Z+1
0003d4 d05c      	RCALL _lcd_putchar
                 ; 0000 01D2 buffer[2] = keypad() + '0';
0003d5 df22      	RCALL _keypad
0003d6 5de0      	SUBI R30,-LOW(48)
                +
0003d7 01d8     +MOVW R26 , R16
0003d8 9612     +ADIW R26 , 2
0003d9 93ec     +ST X , R30
                 	__PUTB1RNS 16,2
                 ; 0000 01D3 lcd_putchar(buffer[2]);
0003da 01f8      	MOVW R30,R16
0003db 81a2      	LDD  R26,Z+2
0003dc d054      	RCALL _lcd_putchar
                 ; 0000 01D4 buffer[3] = '\0';  // Null-terminate the string
0003dd 01f8      	MOVW R30,R16
0003de 9633      	ADIW R30,3
0003df e0a0      	LDI  R26,LOW(0)
0003e0 83a0      	STD  Z+0,R26
                 ; 0000 01D5 
                 ; 0000 01D6 delay_ms(1000);
0003e1 eea8      	LDI  R26,LOW(1000)
0003e2 e0b3      	LDI  R27,HIGH(1000)
0003e3 d13f      	RCALL _delay_ms
                 ; 0000 01D7 
                 ; 0000 01D8 return 1;  // Return a non-zero value to indicate success
0003e4 e0e1      	LDI  R30,LOW(1)
0003e5 e0f0      	LDI  R31,HIGH(1)
                 _0x2080003:
0003e6 9109      	LD   R16,Y+
0003e7 9119      	LD   R17,Y+
0003e8 9508      	RET
                 ; 0000 01D9 }
                 ; .FEND
                 ;void generateTone()
                 ; 0000 01DC {
                 _generateTone:
                 ; .FSTART _generateTone
                 ; 0000 01DD PORTD.7 = 1;  // Set PD7 HIGH
0003e9 9a97      	SBI  0x12,7
                 ; 0000 01DE delay_ms(500);  // Adjust duration as needed
0003ea efa4      	LDI  R26,LOW(500)
0003eb e0b1      	LDI  R27,HIGH(500)
0003ec d136      	RCALL _delay_ms
                 ; 0000 01DF PORTD.7 = 0;  // Set PD7 LOW
0003ed 9897      	CBI  0x12,7
                 ; 0000 01E0 delay_ms(500);  // Pause between tones
0003ee efa4      	LDI  R26,LOW(500)
0003ef e0b1      	LDI  R27,HIGH(500)
0003f0 d132      	RCALL _delay_ms
                 ; 0000 01E1 PORTD.7 = 1;  // Set PD7 HIGH (optional: restore to high for a brief moment)
0003f1 9a97      	SBI  0x12,7
                 ; 0000 01E2 }
0003f2 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0003f3 931a      	ST   -Y,R17
0003f4 2f1a      	MOV  R17,R26
0003f5 b3eb      	IN   R30,0x1B
0003f6 70ef      	ANDI R30,LOW(0xF)
0003f7 2fae      	MOV  R26,R30
0003f8 2fe1      	MOV  R30,R17
0003f9 7fe0      	ANDI R30,LOW(0xF0)
0003fa 2bea      	OR   R30,R26
0003fb bbeb      	OUT  0x1B,R30
                +
0003fc e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0003fd 958a     +DEC R24
0003fe f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0003ff 9ada      	SBI  0x1B,2
                +
000400 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000401 958a     +DEC R24
000402 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000403 98da      	CBI  0x1B,2
                +
000404 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000405 958a     +DEC R24
000406 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000407 c074      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000408 93aa      	ST   -Y,R26
000409 81a8      	LD   R26,Y
00040a dfe8      	RCALL __lcd_write_nibble_G100
00040b 81e8          ld    r30,y
00040c 95e2          swap  r30
00040d 83e8          st    y,r30
00040e 81a8      	LD   R26,Y
00040f dfe3      	RCALL __lcd_write_nibble_G100
                +
000410 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000411 958a     +DEC R24
000412 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000413 9621      	ADIW R28,1
000414 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000415 931a      	ST   -Y,R17
000416 930a      	ST   -Y,R16
000417 2f1a      	MOV  R17,R26
000418 810a      	LDD  R16,Y+2
000419 2fe1      	MOV  R30,R17
00041a e0f0      	LDI  R31,0
00041b 5fed      	SUBI R30,LOW(-__base_y_G100)
00041c 4ffc      	SBCI R31,HIGH(-__base_y_G100)
00041d 81e0      	LD   R30,Z
00041e 0fe0      	ADD  R30,R16
00041f 2fae      	MOV  R26,R30
000420 dfe7      	RCALL __lcd_write_data
000421 2e50      	MOV  R5,R16
000422 2e41      	MOV  R4,R17
000423 8119      	LDD  R17,Y+1
000424 8108      	LDD  R16,Y+0
000425 9623      	ADIW R28,3
000426 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000427 e0a2      	LDI  R26,LOW(2)
000428 d0e1      	RCALL SUBOPT_0x14
000429 e0ac      	LDI  R26,LOW(12)
00042a dfdd      	RCALL __lcd_write_data
00042b e0a1      	LDI  R26,LOW(1)
00042c d0dd      	RCALL SUBOPT_0x14
00042d e0e0      	LDI  R30,LOW(0)
00042e 2e4e      	MOV  R4,R30
00042f 2e5e      	MOV  R5,R30
000430 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000431 931a      	ST   -Y,R17
000432 2f1a      	MOV  R17,R26
000433 301a      	CPI  R17,10
000434 f011      	BREQ _0x2000005
000435 1457      	CP   R5,R7
000436 f038      	BRLO _0x2000004
                 _0x2000005:
000437 e0e0      	LDI  R30,LOW(0)
000438 93ea      	ST   -Y,R30
000439 9443      	INC  R4
00043a 2da4      	MOV  R26,R4
00043b dfd9      	RCALL _lcd_gotoxy
00043c 301a      	CPI  R17,10
00043d f1f1      	BREQ _0x2080001
                 _0x2000004:
00043e 9453      	INC  R5
00043f 9ad8      	SBI  0x1B,0
000440 2fa1      	MOV  R26,R17
000441 dfc6      	RCALL __lcd_write_data
000442 98d8      	CBI  0x1B,0
000443 c038      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000444 d0d2      	RCALL __SAVELOCR4
000445 019d      	MOVW R18,R26
                 _0x2000008:
000446 01d9      	MOVW R26,R18
                +
000447 5f2f     +SUBI R18 , LOW ( - 1 )
000448 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000449 91ec      	LD   R30,X
00044a 2f1e      	MOV  R17,R30
00044b 30e0      	CPI  R30,0
00044c f019      	BREQ _0x200000A
00044d 2fa1      	MOV  R26,R17
00044e dfe2      	RCALL _lcd_putchar
00044f cff6      	RJMP _0x2000008
                 _0x200000A:
                 _0x2080002:
000450 d0cd      	RCALL __LOADLOCR4
000451 9624      	ADIW R28,4
000452 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000453 931a      	ST   -Y,R17
000454 2f1a      	MOV  R17,R26
000455 b3ea      	IN   R30,0x1A
000456 6fe0      	ORI  R30,LOW(0xF0)
000457 bbea      	OUT  0x1A,R30
000458 9ad2      	SBI  0x1A,2
000459 9ad0      	SBI  0x1A,0
00045a 9ad1      	SBI  0x1A,1
00045b 98da      	CBI  0x1B,2
00045c 98d8      	CBI  0x1B,0
00045d 98d9      	CBI  0x1B,1
00045e 2e71      	MOV  R7,R17
00045f 2fe1      	MOV  R30,R17
000460 58e0      	SUBI R30,-LOW(128)
                +
000461 93e0 0305+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
000463 2fe1      	MOV  R30,R17
000464 54e0      	SUBI R30,-LOW(192)
                +
000465 93e0 0306+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000467 e1a4      	LDI  R26,LOW(20)
000468 e0b0      	LDI  R27,0
000469 d0b9      	RCALL _delay_ms
00046a d0a3      	RCALL SUBOPT_0x15
00046b d0a2      	RCALL SUBOPT_0x15
00046c d0a1      	RCALL SUBOPT_0x15
00046d e2a0      	LDI  R26,LOW(32)
00046e df84      	RCALL __lcd_write_nibble_G100
                +
00046f ec88     +LDI R24 , LOW ( 200 )
000470 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000471 9701     +SBIW R24 , 1
000472 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000473 e2a8      	LDI  R26,LOW(40)
000474 df93      	RCALL __lcd_write_data
000475 e0a4      	LDI  R26,LOW(4)
000476 df91      	RCALL __lcd_write_data
000477 e8a5      	LDI  R26,LOW(133)
000478 df8f      	RCALL __lcd_write_data
000479 e0a6      	LDI  R26,LOW(6)
00047a df8d      	RCALL __lcd_write_data
00047b dfab      	RCALL _lcd_clear
                 _0x2080001:
00047c 9119      	LD   R17,Y+
00047d 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcmp:
                 ; .FSTART _strcmp
00047e 93ba      	ST   -Y,R27
00047f 93aa      	ST   -Y,R26
000480 91e9          ld   r30,y+
000481 91f9          ld   r31,y+
000482 91a9          ld   r26,y+
000483 91b9          ld   r27,y+
                 strcmp0:
000484 916d          ld   r22,x+
000485 9171          ld   r23,z+
000486 1767          cp   r22,r23
000487 f421          brne strcmp1
000488 2366          tst  r22
000489 f7d1          brne strcmp0
                 strcmp3:
00048a 27ee          clr  r30
00048b 9508          ret
                 strcmp1:
00048c 1b67          sub  r22,r23
00048d f3e1          breq strcmp3
00048e e0e1          ldi  r30,1
00048f f408          brcc strcmp2
000490 50e2          subi r30,2
                 strcmp2:
000491 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _users:
0002bd           	.BYTE 0x46
                 __base_y_G100:
000303           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x0:
000492 920a      	ST   -Y,R0
000493 921a      	ST   -Y,R1
000494 92fa      	ST   -Y,R15
000495 936a      	ST   -Y,R22
000496 937a      	ST   -Y,R23
000497 938a      	ST   -Y,R24
000498 939a      	ST   -Y,R25
000499 93aa      	ST   -Y,R26
00049a 93ba      	ST   -Y,R27
00049b 93ea      	ST   -Y,R30
00049c 93fa      	ST   -Y,R31
00049d b7ef      	IN   R30,SREG
00049e 93ea      	ST   -Y,R30
00049f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
0004a0 d074      	RCALL __SAVELOCR6
                +
0004a1 e000     +LDI R16 , LOW ( 0 )
0004a2 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0004a3 e020     +LDI R18 , LOW ( 0 )
0004a4 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0004a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x2:
0004a6 93fa      	ST   -Y,R31
0004a7 93ea      	ST   -Y,R30
0004a8 eea8      	LDI  R26,LOW(1000)
0004a9 e0b3      	LDI  R27,HIGH(1000)
0004aa df10      	RCALL _displayMessage
0004ab e0e0      	LDI  R30,LOW(0)
0004ac 93ea      	ST   -Y,R30
0004ad e0a1      	LDI  R26,LOW(1)
0004ae cf66      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
                +
0004af 5f0a     +SUBI R16 , LOW ( - 6 )
0004b0 4f1f     +SBCI R17 , HIGH ( - 6 )
                 	__ADDWRN 16,17,6
0004b1 931a      	ST   -Y,R17
0004b2 930a      	ST   -Y,R16
0004b3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x4:
0004b4 93fa      	ST   -Y,R31
0004b5 93ea      	ST   -Y,R30
0004b6 e0a4      	LDI  R26,LOW(4)
0004b7 e0b0      	LDI  R27,0
0004b8 cebe      	RJMP _EE_ReadString
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
                +
0004b9 5f0c     +SUBI R16 , LOW ( - 4 )
0004ba 4f1f     +SBCI R17 , HIGH ( - 4 )
                 	__ADDWRN 16,17,4
0004bb 931a      	ST   -Y,R17
0004bc 930a      	ST   -Y,R16
0004bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0004be 01de      	MOVW R26,R28
0004bf df04      	RCALL _enterValueWithKeypad
0004c0 9730      	SBIW R30,0
0004c1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
0004c2 93fa      	ST   -Y,R31
0004c3 93ea      	ST   -Y,R30
0004c4 01de      	MOVW R26,R28
0004c5 9612      	ADIW R26,2
0004c6 dfb7      	RCALL _strcmp
0004c7 30e0      	CPI  R30,0
0004c8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x8:
0004c9 93fa      	ST   -Y,R31
0004ca 93ea      	ST   -Y,R30
0004cb eea8      	LDI  R26,LOW(1000)
0004cc e0b3      	LDI  R27,HIGH(1000)
0004cd deed      	RCALL _displayMessage
0004ce cf1a      	RJMP _generateTone
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
                +
0004cf 5f0c     +SUBI R16 , LOW ( - 4 )
0004d0 4f1f     +SBCI R17 , HIGH ( - 4 )
                 	__ADDWRN 16,17,4
                +
0004d1 5f0c     +SUBI R16 , LOW ( - 4 )
0004d2 4f1f     +SBCI R17 , HIGH ( - 4 )
                 	__ADDWRN 16,17,4
0004d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xA:
0004d4 e8a8      	LDI  R26,LOW(5000)
0004d5 e1b3      	LDI  R27,HIGH(5000)
0004d6 d04c      	RCALL _delay_ms
0004d7 98b8      	CBI  0x17,0
0004d8 cf4e      	RJMP _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0xB:
0004d9 93fa      	ST   -Y,R31
0004da 93ea      	ST   -Y,R30
0004db eea8      	LDI  R26,LOW(1000)
0004dc e0b3      	LDI  R27,HIGH(1000)
0004dd cedd      	RJMP _displayMessage
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xC:
0004de 93fa      	ST   -Y,R31
0004df 93ea      	ST   -Y,R30
0004e0 e0a6      	LDI  R26,LOW(6)
0004e1 e0b0      	LDI  R27,0
0004e2 ce94      	RJMP _EE_ReadString
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
0004e3 01fe      	MOVW R30,R28
0004e4 9670      	ADIW R30,16
0004e5 93fa      	ST   -Y,R31
0004e6 93ea      	ST   -Y,R30
0004e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
                +
0004e8 5f2a     +SUBI R18 , LOW ( - 6 )
0004e9 4f3f     +SBCI R19 , HIGH ( - 6 )
                 	__ADDWRN 18,19,6
0004ea 933a      	ST   -Y,R19
0004eb 932a      	ST   -Y,R18
0004ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
0004ed 01de      	MOVW R26,R28
0004ee 969c      	ADIW R26,44
0004ef df8e      	RCALL _strcmp
0004f0 30e0      	CPI  R30,0
0004f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
0004f2 01de      	MOVW R26,R28
0004f3 9696      	ADIW R26,38
0004f4 decf      	RCALL _enterValueWithKeypad
0004f5 9730      	SBIW R30,0
0004f6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x11:
0004f7 93fa      	ST   -Y,R31
0004f8 93ea      	ST   -Y,R30
0004f9 eba8      	LDI  R26,LOW(3000)
0004fa e0bb      	LDI  R27,HIGH(3000)
0004fb debf      	RCALL _displayMessage
                +
0004fc e041     +LDI R20 , LOW ( 1 )
0004fd e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
0004fe 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x12:
0004ff d017      	RCALL __SAVELOCR4
000500 018d      	MOVW R16,R26
                +
000501 812c     +LDD R18 , Y + 4
000502 813d     +LDD R19 , Y + 4 + 1
                 	__GETWRS 18,19,4
000503 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x13:
                +
000504 e0ae     +LDI R26 , 14
000505 9fa2     +MUL R26 , R18
000506 01f0     +MOVW R30 , R0
000507 9fa3     +MUL R26 , R19
000508 0df0     +ADD R31 , R0
                 	__MULBNWRU 18,19,14
000509 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
00050a defd      	RCALL __lcd_write_data
00050b e0a3      	LDI  R26,LOW(3)
00050c e0b0      	LDI  R27,0
00050d c015      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x15:
00050e e3a0      	LDI  R26,LOW(48)
00050f dee3      	RCALL __lcd_write_nibble_G100
                +
000510 ec88     +LDI R24 , LOW ( 200 )
000511 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000512 9701     +SBIW R24 , 1
000513 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000514 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000515 935a      	ST   -Y,R21
                 __SAVELOCR5:
000516 934a      	ST   -Y,R20
                 __SAVELOCR4:
000517 933a      	ST   -Y,R19
                 __SAVELOCR3:
000518 932a      	ST   -Y,R18
                 __SAVELOCR2:
000519 931a      	ST   -Y,R17
00051a 930a      	ST   -Y,R16
00051b 9508      	RET
                 
                 __LOADLOCR6:
00051c 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00051d 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00051e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00051f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000520 8119      	LDD  R17,Y+1
000521 8108      	LD   R16,Y
000522 9508      	RET
                 
                 _delay_ms:
000523 9610      	adiw r26,0
000524 f039      	breq __delay_ms1
                 __delay_ms0:
000525 95a8      	wdr
                +
000526 ed80     +LDI R24 , LOW ( 0x7D0 )
000527 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000528 9701     +SBIW R24 , 1
000529 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00052a 9711      	sbiw r26,1
00052b f7c9      	brne __delay_ms0
                 __delay_ms1:
00052c 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  14 r1 :   3 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  43 r17:  47 r18:  34 r19:  28 r20:  14 r21:  14 r22:   8 r23:   5 
r24:  23 r25:   7 r26: 119 r27:  27 r28:  53 r29:   1 r30: 236 r31:  54 
x  :  12 y  : 140 z  :  13 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   5 
adiw  :  51 and   :   0 andi  :   3 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  15 
brge  :   4 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   1 brmi  :   0 brne  :  38 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :  12 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   3 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   3 cpc   :   4 cpi   :  27 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  13 inc   :   2 jmp   :  22 ld    :  33 ldd   :  24 ldi   : 156 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  23 movw  :  61 
mul   :   2 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   4 
ori   :   6 out   :  22 pop   :   2 push  :   2 rcall : 149 ret   :  41 
reti  :   1 rjmp  :  53 rol   :   0 ror   :   0 sbc   :   0 sbci  :  21 
sbi   :  24 sbic  :   2 sbis  :  12 sbiw  :  21 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  93 std   :   8 sts   :   2 sub   :   1 subi  :  27 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 51 out of 116 (44.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a5a   2080    570   2650   16384  16.2%
[.dseg] 0x000060 0x000307      0    423    423    1024  41.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 4 warnings
