
AVRASM ver. 2.1.30  E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm Sun Dec 17 16:26:46 2023

E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm(1417): warning: Register r5 already defined by the .DEF directive
E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm(1418): warning: Register r4 already defined by the .DEF directive
E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm(1419): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.52 
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x37
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 008e 	JMP  __RESET
000002 940c 00d2 	JMP  _Reset
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G102:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G102:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000033 7250
000034 666f
000035 0000
000036 3131      	.DB  0x50,0x72,0x6F,0x66,0x0,0x0,0x31,0x31
000037 0031
000038 3032
000039 0033
00003a 6841      	.DB  0x31,0x0,0x32,0x30,0x33,0x0,0x41,0x68
00003b 656d
00003c 0064
00003d 3231
00003e 0036      	.DB  0x6D,0x65,0x64,0x0,0x31,0x32,0x36,0x0
00003f 3231
000040 0039
000041 6d41
000042 0072      	.DB  0x31,0x32,0x39,0x0,0x41,0x6D,0x72,0x0
000043 0000
000044 3231
000045 0038
000046 3233      	.DB  0x0,0x0,0x31,0x32,0x38,0x0,0x33,0x32
000047 0035
000048 6441
000049 6c65
00004a 0000      	.DB  0x35,0x0,0x41,0x64,0x65,0x6C,0x0,0x0
00004b 3331
00004c 0030
00004d 3234
00004e 0036      	.DB  0x31,0x33,0x30,0x0,0x34,0x32,0x36,0x0
00004f 6d4f
000050 7265
000051 0000
000052 3331      	.DB  0x4F,0x6D,0x65,0x72,0x0,0x0,0x31,0x33
000053 0032
000054 3730
E:\Seventh term\Embedded Systems\Project #1\Simulation & Code\Code\Debug\List\Project #1 lock system.asm(1465): warning: .cseg .db misalignment - padding zero byte
000055 0039      	.DB  0x32,0x0,0x30,0x37,0x39
                 _0x0:
000056 6e45
000057 6574
000058 2072
000059 6f79      	.DB  0x45,0x6E,0x74,0x65,0x72,0x20,0x79,0x6F
00005a 7275
00005b 4920
00005c 3a44
00005d 0020      	.DB  0x75,0x72,0x20,0x49,0x44,0x3A,0x20,0x0
00005e 6e45
00005f 6574
000060 2072
000061 6f79      	.DB  0x45,0x6E,0x74,0x65,0x72,0x20,0x79,0x6F
000062 7275
000063 5020
000064 3a43
000065 0020      	.DB  0x75,0x72,0x20,0x50,0x43,0x3A,0x20,0x0
000066 6557
000067 636c
000068 6d6f
000069 2c65      	.DB  0x57,0x65,0x6C,0x63,0x6F,0x6D,0x65,0x2C
00006a 0020
00006b 6f53
00006c 7272
00006d 2079      	.DB  0x20,0x0,0x53,0x6F,0x72,0x72,0x79,0x20
00006e 7277
00006f 6e6f
000070 2067
000071 4350      	.DB  0x77,0x72,0x6F,0x6E,0x67,0x20,0x50,0x43
000072 5700
000073 6f72
000074 676e
000075 4920      	.DB  0x0,0x57,0x72,0x6F,0x6E,0x67,0x20,0x49
000076 0044      	.DB  0x44,0x0
                 _0x2000003:
000077 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000078 0045      	.DW  0x45
000079 01a2      	.DW  _users
00007a 0066      	.DW  _0x3*2
                 
00007b 0010      	.DW  0x10
00007c 0160      	.DW  _0xF
00007d 00ac      	.DW  _0x0*2
                 
00007e 0010      	.DW  0x10
00007f 0170      	.DW  _0xF+16
000080 00bc      	.DW  _0x0*2+16
                 
000081 000a      	.DW  0x0A
000082 0180      	.DW  _0xF+32
000083 00cc      	.DW  _0x0*2+32
                 
000084 000f      	.DW  0x0F
000085 018a      	.DW  _0xF+42
000086 00d6      	.DW  _0x0*2+42
                 
000087 0009      	.DW  0x09
000088 0199      	.DW  _0xF+57
000089 00e5      	.DW  _0x0*2+57
                 
00008a 0002      	.DW  0x02
00008b 01e8      	.DW  __base_y_G100
00008c 00ee      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
00008d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00008e 94f8      	CLI
00008f 27ee      	CLR  R30
000090 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000091 e0f1      	LDI  R31,1
000092 bffb      	OUT  GICR,R31
000093 bfeb      	OUT  GICR,R30
000094 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000095 e08d      	LDI  R24,(14-2)+1
000096 e0a2      	LDI  R26,2
000097 27bb      	CLR  R27
                 __CLEAR_REG:
000098 93ed      	ST   X+,R30
000099 958a      	DEC  R24
00009a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00009b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00009c e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00009d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00009e 93ed      	ST   X+,R30
00009f 9701      	SBIW R24,1
0000a0 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000a1 efe0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000a2 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000a3 9185      	LPM  R24,Z+
0000a4 9195      	LPM  R25,Z+
0000a5 9700      	SBIW R24,0
0000a6 f061      	BREQ __GLOBAL_INI_END
0000a7 91a5      	LPM  R26,Z+
0000a8 91b5      	LPM  R27,Z+
0000a9 9005      	LPM  R0,Z+
0000aa 9015      	LPM  R1,Z+
0000ab 01bf      	MOVW R22,R30
0000ac 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000ad 9005      	LPM  R0,Z+
0000ae 920d      	ST   X+,R0
0000af 9701      	SBIW R24,1
0000b0 f7e1      	BRNE __GLOBAL_INI_LOOP
0000b1 01fb      	MOVW R30,R22
0000b2 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000b3 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000b4 bfed      	OUT  SPL,R30
0000b5 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000b6 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000b7 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000b8 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000b9 940c 00bb 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;char keypad();
                 ;unsigned char EE_Read(unsigned int address);
                 ;void EE_Write(unsigned int address, unsigned char data);
                 ;void EE_WriteString(unsigned int address, const char *str);
                 ;void EE_ReadString(unsigned int address, char *buffer, unsigned int length);
                 ;void initializeUsers();
                 ;void displayMessage(char *message, int delay_ms_value);
                 ;int enterValueWithKeypad(char *buffer);
                 ;void generateTone();
                 
                 	.DSEG
                 ;void main(void)
                 ; 0000 002D {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 002E 
                 ; 0000 002F // Set keypad ports
                 ; 0000 0030 DDRC = 0b00000111; // 1 unused pin , 4 rows (input) , 3 cloumns (output)
0000bb e0e7      	LDI  R30,LOW(7)
0000bc bbe4      	OUT  0x14,R30
                 ; 0000 0031 PORTC = 0b11111000; // pull up resistance
0000bd efe8      	LDI  R30,LOW(248)
0000be bbe5      	OUT  0x15,R30
                 ; 0000 0032 
                 ; 0000 0033 // Initialize the LCD
                 ; 0000 0034 lcd_init(16);
0000bf e1a0      	LDI  R26,LOW(16)
0000c0 d1e9      	RCALL _lcd_init
                 ; 0000 0035 
                 ; 0000 0036 
                 ; 0000 0037 // Set the door as input (now by default the door is closed)
                 ; 0000 0038 DDRB .0 = 0;
0000c1 98b8      	CBI  0x17,0
                 ; 0000 0039 PORTB .0 = 1; // turn on pull up resistance
0000c2 9ac0      	SBI  0x18,0
                 ; 0000 003A 
                 ; 0000 003B // Set the speaker as a output
                 ; 0000 003C DDRD.7 = 1;
0000c3 9a8f      	SBI  0x11,7
                 ; 0000 003D PORTD.7 = 1; // Set it to 1 initially
0000c4 9a97      	SBI  0x12,7
                 ; 0000 003E 
                 ; 0000 003F // Initialize user data in EEPROM
                 ; 0000 0040 initializeUsers();
0000c5 d12d      	RCALL _initializeUsers
                 ; 0000 0041 
                 ; 0000 0042 PORTD.2 = 1; // turn on pull up resistance for INT0 intrrupt
0000c6 9a92      	SBI  0x12,2
                 ; 0000 0043 
                 ; 0000 0044 // actual casue (The falling edge of INT0)
                 ; 0000 0045 bit_set(MCUCR, 1);
0000c7 b7e5      	IN   R30,0x35
0000c8 60e2      	ORI  R30,2
0000c9 bfe5      	OUT  0x35,R30
                 ; 0000 0046 bit_clr(MCUCR, 0);
0000ca b7e5      	IN   R30,0x35
0000cb 7fee      	ANDI R30,0xFE
0000cc bfe5      	OUT  0x35,R30
                 ; 0000 0047 
                 ; 0000 0048 // Enable global interrupts
                 ; 0000 0049 #asm("sei")
0000cd 9478      	SEI
                 ; 0000 004A 
                 ; 0000 004B // GICR INT0 (bit no 6) , EXT0 spacific enable
                 ; 0000 004C bit_set(GICR, 6);
0000ce b7eb      	IN   R30,0x3B
0000cf 64e0      	ORI  R30,0x40
0000d0 bfeb      	OUT  0x3B,R30
                 ; 0000 004D 
                 ; 0000 004E }
                 _0xE:
0000d1 cfff      	RJMP _0xE
                 ; .FEND
                 ;interrupt [2] void Reset (void)
                 ; 0000 0052 {
                 _Reset:
                 ; .FSTART _Reset
0000d2 920a      	ST   -Y,R0
0000d3 921a      	ST   -Y,R1
0000d4 92fa      	ST   -Y,R15
0000d5 936a      	ST   -Y,R22
0000d6 937a      	ST   -Y,R23
0000d7 938a      	ST   -Y,R24
0000d8 939a      	ST   -Y,R25
0000d9 93aa      	ST   -Y,R26
0000da 93ba      	ST   -Y,R27
0000db 93ea      	ST   -Y,R30
0000dc 93fa      	ST   -Y,R31
0000dd b7ef      	IN   R30,SREG
0000de 93ea      	ST   -Y,R30
                 ; 0000 0053 // action on click on a button
                 ; 0000 0054 
                 ; 0000 0055 char enteredID[4];  // Change data type to string
                 ; 0000 0056 User currentUser;
                 ; 0000 0057 unsigned int address = 0;
                 ; 0000 0058 int userFound = 0;
                 ; 0000 0059 int i;
                 ; 0000 005A 
                 ; 0000 005B displayMessage("Enter your ID: ", 1000);
0000df 9762      	SBIW R28,18
0000e0 d237      	RCALL __SAVELOCR6
                 ;	enteredID -> Y+20
                 ;	currentUser -> Y+6
                 ;	address -> R16,R17
                 ;	userFound -> R18,R19
                 ;	i -> R20,R21
0000e1 d207      	RCALL SUBOPT_0x0
                +
0000e2 e6e0     +LDI R30 , LOW ( _0xF + ( 0 ) )
0000e3 e0f1     +LDI R31 , HIGH ( _0xF + ( 0 ) )
                 	__POINTW1MN _0xF,0
0000e4 d209      	RCALL SUBOPT_0x1
                 ; 0000 005C 
                 ; 0000 005D if (enterValueWithKeypad(enteredID))
0000e5 01de      	MOVW R26,R28
0000e6 9654      	ADIW R26,20
0000e7 d133      	RCALL _enterValueWithKeypad
0000e8 9730      	SBIW R30,0
0000e9 f409      	BRNE PC+2
0000ea c04a      	RJMP _0x10
                 ; 0000 005E {
                 ; 0000 005F char enteredPC[4];
                 ; 0000 0060 for (i = 0; i < sizeof(users) / sizeof(users[0]); ++i)
0000eb 9724      	SBIW R28,4
                 ;	enteredID -> Y+24
                 ;	currentUser -> Y+10
                 ;	enteredPC -> Y+0
                +
0000ec e040     +LDI R20 , LOW ( 0 )
0000ed e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x12:
                +
0000ee 3045     +CPI R20 , LOW ( 5 )
0000ef e0e0     +LDI R30 , HIGH ( 5 )
0000f0 075e     +CPC R21 , R30
                 	__CPWRN 20,21,5
0000f1 f00c      	BRLT PC+2
0000f2 c041      	RJMP _0x13
                 ; 0000 0061 {
                 ; 0000 0062 EE_ReadString(address, currentUser.name, sizeof(users[i].name));
0000f3 931a      	ST   -Y,R17
0000f4 930a      	ST   -Y,R16
0000f5 01fe      	MOVW R30,R28
0000f6 963c      	ADIW R30,12
0000f7 93fa      	ST   -Y,R31
0000f8 93ea      	ST   -Y,R30
0000f9 e0a6      	LDI  R26,LOW(6)
0000fa e0b0      	LDI  R27,0
0000fb d0d5      	RCALL _EE_ReadString
                 ; 0000 0063 address += sizeof(users[i].name);
0000fc d1f6      	RCALL SUBOPT_0x2
                 ; 0000 0064 EE_ReadString(address, currentUser.id, sizeof(currentUser.id));  // Read ID as a string
0000fd 01fe      	MOVW R30,R28
0000fe 9672      	ADIW R30,18
0000ff d1f8      	RCALL SUBOPT_0x3
                 ; 0000 0065 
                 ; 0000 0066 if (strcmp(currentUser.id, enteredID) == 0)
000100 01fe      	MOVW R30,R28
000101 9670      	ADIW R30,16
000102 93fa      	ST   -Y,R31
000103 93ea      	ST   -Y,R30
000104 01de      	MOVW R26,R28
000105 965a      	ADIW R26,26
000106 d1ce      	RCALL _strcmp
000107 30e0      	CPI  R30,0
000108 f521      	BRNE _0x14
                 ; 0000 0067 {
                 ; 0000 0068 
                 ; 0000 0069 address += sizeof(users[i].id);
000109 d1f3      	RCALL SUBOPT_0x4
                 ; 0000 006A EE_ReadString(address, currentUser.pc, sizeof(currentUser.pc));  // Read PC as a string
00010a 01fe      	MOVW R30,R28
00010b 9676      	ADIW R30,22
00010c d1eb      	RCALL SUBOPT_0x3
                 ; 0000 006B 
                 ; 0000 006C displayMessage("Enter your PC: ", 1000);
                +
00010d e7e0     +LDI R30 , LOW ( _0xF + ( 16 ) )
00010e e0f1     +LDI R31 , HIGH ( _0xF + ( 16 ) )
                 	__POINTW1MN _0xF,16
00010f d1de      	RCALL SUBOPT_0x1
                 ; 0000 006D 
                 ; 0000 006E if (enterValueWithKeypad(enteredPC))
000110 01de      	MOVW R26,R28
000111 d109      	RCALL _enterValueWithKeypad
000112 9730      	SBIW R30,0
000113 f0b1      	BREQ _0x15
                 ; 0000 006F {
                 ; 0000 0070 if (strcmp(currentUser.pc, enteredPC) == 0)
000114 01fe      	MOVW R30,R28
000115 9674      	ADIW R30,20
000116 93fa      	ST   -Y,R31
000117 93ea      	ST   -Y,R30
000118 01de      	MOVW R26,R28
000119 9612      	ADIW R26,2
00011a d1ba      	RCALL _strcmp
00011b 30e0      	CPI  R30,0
00011c f449      	BRNE _0x16
                 ; 0000 0071 {
                 ; 0000 0072 lcd_clear();
00011d d160      	RCALL _lcd_clear
                 ; 0000 0073 lcd_puts("Welcome, ");
                +
00011e e8a0     +LDI R26 , LOW ( _0xF + ( 32 ) )
00011f e0b1     +LDI R27 , HIGH ( _0xF + ( 32 ) )
                 	__POINTW2MN _0xF,32
000120 d17a      	RCALL _lcd_puts
                 ; 0000 0074 lcd_puts(currentUser.name);
000121 01de      	MOVW R26,R28
000122 961a      	ADIW R26,10
000123 d177      	RCALL _lcd_puts
                 ; 0000 0075 // Open the door
                 ; 0000 0076 DDRB .0 = 1;
000124 9ab8      	SBI  0x17,0
                 ; 0000 0077 }
                 ; 0000 0078 else
000125 c004      	RJMP _0x19
                 _0x16:
                 ; 0000 0079 {
                 ; 0000 007A displayMessage("Sorry wrong PC", 1000);
                +
000126 e8ea     +LDI R30 , LOW ( _0xF + ( 42 ) )
000127 e0f1     +LDI R31 , HIGH ( _0xF + ( 42 ) )
                 	__POINTW1MN _0xF,42
000128 d1c5      	RCALL SUBOPT_0x1
                 ; 0000 007B // one peep alarm
                 ; 0000 007C generateTone();
000129 d116      	RCALL _generateTone
                 ; 0000 007D }
                 _0x19:
                 ; 0000 007E }
                 ; 0000 007F userFound = 1;
                 _0x15:
                +
00012a e021     +LDI R18 , LOW ( 1 )
00012b e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 0080 break;
00012c c007      	RJMP _0x13
                 ; 0000 0081 }
                 ; 0000 0082 
                 ; 0000 0083 address += sizeof(users[i].id);
                 _0x14:
                +
00012d 5f0c     +SUBI R16 , LOW ( - 4 )
00012e 4f1f     +SBCI R17 , HIGH ( - 4 )
                 	__ADDWRN 16,17,4
                 ; 0000 0084 address += sizeof(users[i].pc);
                +
00012f 5f0c     +SUBI R16 , LOW ( - 4 )
000130 4f1f     +SBCI R17 , HIGH ( - 4 )
                 	__ADDWRN 16,17,4
                 ; 0000 0085 }
                +
000131 5f4f     +SUBI R20 , LOW ( - 1 )
000132 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
000133 cfba      	RJMP _0x12
                 _0x13:
                 ; 0000 0086 }
000134 9624      	ADIW R28,4
                 ; 0000 0087 
                 ; 0000 0088 if (!userFound)
                 _0x10:
000135 2e02      	MOV  R0,R18
000136 2a03      	OR   R0,R19
000137 f429      	BRNE _0x1A
                 ; 0000 0089 {
                 ; 0000 008A displayMessage("Wrong ID", 1000);
                +
000138 e9e9     +LDI R30 , LOW ( _0xF + ( 57 ) )
000139 e0f1     +LDI R31 , HIGH ( _0xF + ( 57 ) )
                 	__POINTW1MN _0xF,57
00013a d1b3      	RCALL SUBOPT_0x1
                 ; 0000 008B // Two peeps alarm
                 ; 0000 008C generateTone();
00013b d104      	RCALL _generateTone
                 ; 0000 008D generateTone();
00013c d103      	RCALL _generateTone
                 ; 0000 008E }
                 ; 0000 008F delay_ms(5000);
                 _0x1A:
00013d e8a8      	LDI  R26,LOW(5000)
00013e e1b3      	LDI  R27,HIGH(5000)
00013f d1e6      	RCALL _delay_ms
                 ; 0000 0090 // close the door and clear lcd
                 ; 0000 0091 DDRB .0 = 0;
000140 98b8      	CBI  0x17,0
                 ; 0000 0092 lcd_clear();
000141 d13c      	RCALL _lcd_clear
                 ; 0000 0093 }
000142 d1dc      	RCALL __LOADLOCR6
000143 9668      	ADIW R28,24
000144 91e9      	LD   R30,Y+
000145 bfef      	OUT  SREG,R30
000146 91f9      	LD   R31,Y+
000147 91e9      	LD   R30,Y+
000148 91b9      	LD   R27,Y+
000149 91a9      	LD   R26,Y+
00014a 9199      	LD   R25,Y+
00014b 9189      	LD   R24,Y+
00014c 9179      	LD   R23,Y+
00014d 9169      	LD   R22,Y+
00014e 90f9      	LD   R15,Y+
00014f 9019      	LD   R1,Y+
000150 9009      	LD   R0,Y+
000151 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0xF:
000160           	.BYTE 0x42
                 ;char keypad()
                 ; 0000 0097 {
                 
                 	.CSEG
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 0098 while (1)
                 _0x1D:
                 ; 0000 0099 {
                 ; 0000 009A PORTC .0 = 0;
000152 98a8      	CBI  0x15,0
                 ; 0000 009B PORTC .1 = 1;
000153 9aa9      	SBI  0x15,1
                 ; 0000 009C PORTC .2 = 1;
000154 9aaa      	SBI  0x15,2
                 ; 0000 009D 
                 ; 0000 009E 
                 ; 0000 009F switch (PINC)
000155 b3e3      	IN   R30,0x13
                 ; 0000 00A0 {
                 ; 0000 00A1 case 0b11110110:
000156 3fe6      	CPI  R30,LOW(0xF6)
000157 f421      	BRNE _0x29
                 ; 0000 00A2 while (PINC .3 == 0);
                 _0x2A:
000158 9b9b      	SBIS 0x13,3
000159 cffe      	RJMP _0x2A
                 ; 0000 00A3 return 1;
00015a e0e1      	LDI  R30,LOW(1)
00015b 9508      	RET
                 ; 0000 00A4 case 0b11101110:
                 _0x29:
00015c 3eee      	CPI  R30,LOW(0xEE)
00015d f421      	BRNE _0x2D
                 ; 0000 00A5 while (PINC .4 == 0);
                 _0x2E:
00015e 9b9c      	SBIS 0x13,4
00015f cffe      	RJMP _0x2E
                 ; 0000 00A6 return 4;
000160 e0e4      	LDI  R30,LOW(4)
000161 9508      	RET
                 ; 0000 00A7 case 0b11011110:
                 _0x2D:
000162 3dee      	CPI  R30,LOW(0xDE)
000163 f421      	BRNE _0x31
                 ; 0000 00A8 while (PINC .5 == 0);
                 _0x32:
000164 9b9d      	SBIS 0x13,5
000165 cffe      	RJMP _0x32
                 ; 0000 00A9 return 7;
000166 e0e7      	LDI  R30,LOW(7)
000167 9508      	RET
                 ; 0000 00AA case 0b10111110:
                 _0x31:
000168 3bee      	CPI  R30,LOW(0xBE)
000169 f421      	BRNE _0x28
                 ; 0000 00AB while (PINC .6 == 0);
                 _0x36:
00016a 9b9e      	SBIS 0x13,6
00016b cffe      	RJMP _0x36
                 ; 0000 00AC return '*';
00016c e2ea      	LDI  R30,LOW(42)
00016d 9508      	RET
                 ; 0000 00AD }
                 _0x28:
                 ; 0000 00AE 
                 ; 0000 00AF PORTC .0 = 1;
00016e 9aa8      	SBI  0x15,0
                 ; 0000 00B0 PORTC .1 = 0;
00016f 98a9      	CBI  0x15,1
                 ; 0000 00B1 PORTC .2 = 1;
000170 9aaa      	SBI  0x15,2
                 ; 0000 00B2 
                 ; 0000 00B3 switch (PINC)
000171 b3e3      	IN   R30,0x13
                 ; 0000 00B4 {
                 ; 0000 00B5 case 0b11110101:
000172 3fe5      	CPI  R30,LOW(0xF5)
000173 f421      	BRNE _0x42
                 ; 0000 00B6 while (PINC .3 == 0);
                 _0x43:
000174 9b9b      	SBIS 0x13,3
000175 cffe      	RJMP _0x43
                 ; 0000 00B7 return 2;
000176 e0e2      	LDI  R30,LOW(2)
000177 9508      	RET
                 ; 0000 00B8 case 0b11101101:
                 _0x42:
000178 3eed      	CPI  R30,LOW(0xED)
000179 f421      	BRNE _0x46
                 ; 0000 00B9 while (PINC .4 == 0);
                 _0x47:
00017a 9b9c      	SBIS 0x13,4
00017b cffe      	RJMP _0x47
                 ; 0000 00BA return 5;
00017c e0e5      	LDI  R30,LOW(5)
00017d 9508      	RET
                 ; 0000 00BB case 0b11011101:
                 _0x46:
00017e 3ded      	CPI  R30,LOW(0xDD)
00017f f421      	BRNE _0x4A
                 ; 0000 00BC while (PINC .5 == 0);
                 _0x4B:
000180 9b9d      	SBIS 0x13,5
000181 cffe      	RJMP _0x4B
                 ; 0000 00BD return 8;
000182 e0e8      	LDI  R30,LOW(8)
000183 9508      	RET
                 ; 0000 00BE case 0b10111101:
                 _0x4A:
000184 3bed      	CPI  R30,LOW(0xBD)
000185 f421      	BRNE _0x41
                 ; 0000 00BF while (PINC .6 == 0);
                 _0x4F:
000186 9b9e      	SBIS 0x13,6
000187 cffe      	RJMP _0x4F
                 ; 0000 00C0 return 0;
000188 e0e0      	LDI  R30,LOW(0)
000189 9508      	RET
                 ; 0000 00C1 }
                 _0x41:
                 ; 0000 00C2 
                 ; 0000 00C3 PORTC .0 = 1;
00018a 9aa8      	SBI  0x15,0
                 ; 0000 00C4 PORTC .1 = 1;
00018b 9aa9      	SBI  0x15,1
                 ; 0000 00C5 PORTC .2 = 0;
00018c 98aa      	CBI  0x15,2
                 ; 0000 00C6 
                 ; 0000 00C7 switch (PINC)
00018d b3e3      	IN   R30,0x13
                 ; 0000 00C8 {
                 ; 0000 00C9 case 0b11110011:
00018e 3fe3      	CPI  R30,LOW(0xF3)
00018f f421      	BRNE _0x5B
                 ; 0000 00CA while (PINC .3 == 0);
                 _0x5C:
000190 9b9b      	SBIS 0x13,3
000191 cffe      	RJMP _0x5C
                 ; 0000 00CB return 3;
000192 e0e3      	LDI  R30,LOW(3)
000193 9508      	RET
                 ; 0000 00CC case 0b11101011:
                 _0x5B:
000194 3eeb      	CPI  R30,LOW(0xEB)
000195 f421      	BRNE _0x5F
                 ; 0000 00CD while (PINC .4 == 0);
                 _0x60:
000196 9b9c      	SBIS 0x13,4
000197 cffe      	RJMP _0x60
                 ; 0000 00CE return 6;
000198 e0e6      	LDI  R30,LOW(6)
000199 9508      	RET
                 ; 0000 00CF case 0b11011011:
                 _0x5F:
00019a 3deb      	CPI  R30,LOW(0xDB)
00019b f421      	BRNE _0x63
                 ; 0000 00D0 while (PINC .5 == 0);
                 _0x64:
00019c 9b9d      	SBIS 0x13,5
00019d cffe      	RJMP _0x64
                 ; 0000 00D1 return 9;
00019e e0e9      	LDI  R30,LOW(9)
00019f 9508      	RET
                 ; 0000 00D2 case 0b10111011:
                 _0x63:
0001a0 3beb      	CPI  R30,LOW(0xBB)
0001a1 f421      	BRNE _0x5A
                 ; 0000 00D3 while (PINC .6 == 0);
                 _0x68:
0001a2 9b9e      	SBIS 0x13,6
0001a3 cffe      	RJMP _0x68
                 ; 0000 00D4 return 11;
0001a4 e0eb      	LDI  R30,LOW(11)
0001a5 9508      	RET
                 ; 0000 00D5 }
                 _0x5A:
                 ; 0000 00D6 }
0001a6 cfab      	RJMP _0x1D
                 ; 0000 00D7 }
                 ; .FEND
                 ;unsigned char EE_Read(unsigned int address)
                 ; 0000 00DA {
                 _EE_Read:
                 ; .FSTART _EE_Read
                 ; 0000 00DB while (EECR .1 == 1); // Wait till EEPROM is ready
0001a7 931a      	ST   -Y,R17
0001a8 930a      	ST   -Y,R16
0001a9 018d      	MOVW R16,R26
                 ;	address -> R16,R17
                 _0x6B:
0001aa 99e1      	SBIC 0x1C,1
0001ab cffe      	RJMP _0x6B
                 ; 0000 00DC EEAR = address;       // Prepare the address you want to read from
                +
0001ac bb1f     +OUT 30 + 1 , R17
0001ad bb0e     +OUT 30 , R16
                 	__OUTWR 16,17,30
                 ; 0000 00DD EECR .0 = 1;          // Execute read command
0001ae 9ae0      	SBI  0x1C,0
                 ; 0000 00DE return EEDR;
0001af b3ed      	IN   R30,0x1D
0001b0 c08c      	RJMP _0x2080003
                 ; 0000 00DF }
                 ; .FEND
                 ;void EE_Write(unsigned int address, unsigned char data)
                 ; 0000 00E2 {
                 _EE_Write:
                 ; .FSTART _EE_Write
                 ; 0000 00E3 while (EECR .1 == 1); // Wait till EEPROM is ready
0001b1 d168      	RCALL __SAVELOCR4
0001b2 2f1a      	MOV  R17,R26
                +
0001b3 812c     +LDD R18 , Y + 4
0001b4 813d     +LDD R19 , Y + 4 + 1
                 	__GETWRS 18,19,4
                 ;	address -> R18,R19
                 ;	data -> R17
                 _0x70:
0001b5 99e1      	SBIC 0x1C,1
0001b6 cffe      	RJMP _0x70
                 ; 0000 00E4 EEAR = address;       // Prepare the address you want to read from
                +
0001b7 bb3f     +OUT 30 + 1 , R19
0001b8 bb2e     +OUT 30 , R18
                 	__OUTWR 18,19,30
                 ; 0000 00E5 EEDR = data;          // Prepare the data you want to write in the address above
0001b9 bb1d      	OUT  0x1D,R17
                 ; 0000 00E6 EECR .2 = 1;          // Master write enable
0001ba 9ae2      	SBI  0x1C,2
                 ; 0000 00E7 EECR .1 = 1;          // Write Enable
0001bb 9ae1      	SBI  0x1C,1
                 ; 0000 00E8 }
0001bc c05b      	RJMP _0x2080004
                 ; .FEND
                 ;void EE_WriteString(unsigned int address, const char *str)
                 ; 0000 00EB {
                 _EE_WriteString:
                 ; .FSTART _EE_WriteString
                 ; 0000 00EC // Write each character of the string to EEPROM
                 ; 0000 00ED while (*str)
0001bd d144      	RCALL SUBOPT_0x5
                 ;	address -> R18,R19
                 ;	*str -> R16,R17
                 _0x77:
0001be 01d8      	MOVW R26,R16
0001bf 91ec      	LD   R30,X
0001c0 30e0      	CPI  R30,0
0001c1 f051      	BREQ _0x79
                 ; 0000 00EE EE_Write(address++, *str++);
0001c2 01f9      	MOVW R30,R18
                +
0001c3 5f2f     +SUBI R18 , LOW ( - 1 )
0001c4 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0001c5 93fa      	ST   -Y,R31
0001c6 93ea      	ST   -Y,R30
                +
0001c7 5f0f     +SUBI R16 , LOW ( - 1 )
0001c8 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001c9 91ac      	LD   R26,X
0001ca dfe6      	RCALL _EE_Write
0001cb cff2      	RJMP _0x77
                 _0x79:
                 ; 0000 00F0 EE_Write(address, '\0');
0001cc 933a      	ST   -Y,R19
0001cd 932a      	ST   -Y,R18
0001ce e0a0      	LDI  R26,LOW(0)
0001cf dfe1      	RCALL _EE_Write
                 ; 0000 00F1 }
0001d0 c047      	RJMP _0x2080004
                 ; .FEND
                 ;void EE_ReadString(unsigned int address, char *buffer, unsigned int length)
                 ; 0000 00F4 {
                 _EE_ReadString:
                 ; .FSTART _EE_ReadString
                 ; 0000 00F5 unsigned int i;
                 ; 0000 00F6 for (i = 0; i < length; ++i)
0001d1 d146      	RCALL __SAVELOCR6
0001d2 019d      	MOVW R18,R26
                +
0001d3 814e     +LDD R20 , Y + 6
0001d4 815f     +LDD R21 , Y + 6 + 1
                 	__GETWRS 20,21,6
                 ;	address -> Y+8
                 ;	*buffer -> R20,R21
                 ;	length -> R18,R19
                 ;	i -> R16,R17
                +
0001d5 e000     +LDI R16 , LOW ( 0 )
0001d6 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x7B:
                +
0001d7 1702     +CP R16 , R18
0001d8 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
0001d9 f4b0      	BRSH _0x7C
                 ; 0000 00F7 {
                 ; 0000 00F8 buffer[i] = EE_Read(address + i);
0001da 01f8      	MOVW R30,R16
0001db 0fe4      	ADD  R30,R20
0001dc 1ff5      	ADC  R31,R21
0001dd 93ff      	PUSH R31
0001de 93ef      	PUSH R30
0001df 85a8      	LDD  R26,Y+8
0001e0 85b9      	LDD  R27,Y+8+1
0001e1 0fa0      	ADD  R26,R16
0001e2 1fb1      	ADC  R27,R17
0001e3 dfc3      	RCALL _EE_Read
0001e4 91af      	POP  R26
0001e5 91bf      	POP  R27
0001e6 93ec      	ST   X,R30
                 ; 0000 00F9 if (buffer[i] == '\0')
0001e7 01f8      	MOVW R30,R16
0001e8 0fe4      	ADD  R30,R20
0001e9 1ff5      	ADC  R31,R21
0001ea 81e0      	LD   R30,Z
0001eb 30e0      	CPI  R30,0
0001ec f019      	BREQ _0x7C
                 ; 0000 00FA break;
                 ; 0000 00FB }
                +
0001ed 5f0f     +SUBI R16 , LOW ( - 1 )
0001ee 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0001ef cfe7      	RJMP _0x7B
                 _0x7C:
                 ; 0000 00FC }
0001f0 d12e      	RCALL __LOADLOCR6
0001f1 962a      	ADIW R28,10
0001f2 9508      	RET
                 ; .FEND
                 ;void initializeUsers()
                 ; 0000 00FF {
                 _initializeUsers:
                 ; .FSTART _initializeUsers
                 ; 0000 0100 unsigned int address = 0;
                 ; 0000 0101 int i;
                 ; 0000 0102 for (i = 0; i < sizeof(users) / sizeof(users[0]); ++i)
0001f3 d126      	RCALL __SAVELOCR4
                 ;	address -> R16,R17
                 ;	i -> R18,R19
0001f4 d0f4      	RCALL SUBOPT_0x0
                 _0x7F:
                +
0001f5 3025     +CPI R18 , LOW ( 5 )
0001f6 e0e0     +LDI R30 , HIGH ( 5 )
0001f7 073e     +CPC R19 , R30
                 	__CPWRN 18,19,5
0001f8 f4c4      	BRGE _0x80
                 ; 0000 0103 {
                 ; 0000 0104 EE_WriteString(address, users[i].name);
0001f9 931a      	ST   -Y,R17
0001fa 930a      	ST   -Y,R16
0001fb d10b      	RCALL SUBOPT_0x6
0001fc 55ee      	SUBI R30,LOW(-_users)
0001fd 4ffe      	SBCI R31,HIGH(-_users)
0001fe 01df      	MOVW R26,R30
0001ff dfbd      	RCALL _EE_WriteString
                 ; 0000 0105 address += sizeof(users[i].name);
000200 d0f2      	RCALL SUBOPT_0x2
                 ; 0000 0106 
                 ; 0000 0107 EE_WriteString(address, users[i].id);
000201 d105      	RCALL SUBOPT_0x6
                +
000202 55e8     +SUBI R30 , LOW ( - _users - ( 6 ) )
000203 4ffe     +SBCI R31 , HIGH ( - _users - ( 6 ) )
                 	__ADDW1MN _users,6
000204 01df      	MOVW R26,R30
000205 dfb7      	RCALL _EE_WriteString
                 ; 0000 0108 address += sizeof(users[i].id);
000206 d0f6      	RCALL SUBOPT_0x4
                 ; 0000 0109 
                 ; 0000 010A EE_WriteString(address, users[i].pc);
000207 d0ff      	RCALL SUBOPT_0x6
                +
000208 55e4     +SUBI R30 , LOW ( - _users - ( 10 ) )
000209 4ffe     +SBCI R31 , HIGH ( - _users - ( 10 ) )
                 	__ADDW1MN _users,10
00020a 01df      	MOVW R26,R30
00020b dfb1      	RCALL _EE_WriteString
                 ; 0000 010B address += sizeof(users[i].pc);
                +
00020c 5f0c     +SUBI R16 , LOW ( - 4 )
00020d 4f1f     +SBCI R17 , HIGH ( - 4 )
                 	__ADDWRN 16,17,4
                 ; 0000 010C }
                +
00020e 5f2f     +SUBI R18 , LOW ( - 1 )
00020f 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000210 cfe4      	RJMP _0x7F
                 _0x80:
                 ; 0000 010D }
000211 c095      	RJMP _0x2080002
                 ; .FEND
                 ;void displayMessage(char *message, int delay_ms_value)
                 ; 0000 0110 {
                 _displayMessage:
                 ; .FSTART _displayMessage
                 ; 0000 0111 lcd_clear();
000212 d0ef      	RCALL SUBOPT_0x5
                 ;	*message -> R18,R19
                 ;	delay_ms_value -> R16,R17
000213 d06a      	RCALL _lcd_clear
                 ; 0000 0112 lcd_puts(message);
000214 01d9      	MOVW R26,R18
000215 d085      	RCALL _lcd_puts
                 ; 0000 0113 delay_ms(delay_ms_value);
000216 01d8      	MOVW R26,R16
000217 d10e      	RCALL _delay_ms
                 ; 0000 0114 }
                 _0x2080004:
000218 d108      	RCALL __LOADLOCR4
000219 9626      	ADIW R28,6
00021a 9508      	RET
                 ; .FEND
                 ;int enterValueWithKeypad(char *buffer)
                 ; 0000 0117 {
                 _enterValueWithKeypad:
                 ; .FSTART _enterValueWithKeypad
                 ; 0000 0118 buffer[0] = keypad() + '0';
00021b 931a      	ST   -Y,R17
00021c 930a      	ST   -Y,R16
00021d 018d      	MOVW R16,R26
                 ;	*buffer -> R16,R17
00021e df33      	RCALL _keypad
00021f 5de0      	SUBI R30,-LOW(48)
000220 01d8      	MOVW R26,R16
000221 93ec      	ST   X,R30
                 ; 0000 0119 lcd_putchar(buffer[0]);
000222 91ac      	LD   R26,X
000223 d064      	RCALL _lcd_putchar
                 ; 0000 011A buffer[1] = keypad() + '0';
000224 df2d      	RCALL _keypad
000225 5de0      	SUBI R30,-LOW(48)
                +
000226 01d8     +MOVW R26 , R16
000227 9611     +ADIW R26 , 1
000228 93ec     +ST X , R30
                 	__PUTB1RNS 16,1
                 ; 0000 011B lcd_putchar(buffer[1]);
000229 01f8      	MOVW R30,R16
00022a 81a1      	LDD  R26,Z+1
00022b d05c      	RCALL _lcd_putchar
                 ; 0000 011C buffer[2] = keypad() + '0';
00022c df25      	RCALL _keypad
00022d 5de0      	SUBI R30,-LOW(48)
                +
00022e 01d8     +MOVW R26 , R16
00022f 9612     +ADIW R26 , 2
000230 93ec     +ST X , R30
                 	__PUTB1RNS 16,2
                 ; 0000 011D lcd_putchar(buffer[2]);
000231 01f8      	MOVW R30,R16
000232 81a2      	LDD  R26,Z+2
000233 d054      	RCALL _lcd_putchar
                 ; 0000 011E buffer[3] = '\0';  // Null-terminate the string
000234 01f8      	MOVW R30,R16
000235 9633      	ADIW R30,3
000236 e0a0      	LDI  R26,LOW(0)
000237 83a0      	STD  Z+0,R26
                 ; 0000 011F 
                 ; 0000 0120 delay_ms(1000);
000238 eea8      	LDI  R26,LOW(1000)
000239 e0b3      	LDI  R27,HIGH(1000)
00023a d0eb      	RCALL _delay_ms
                 ; 0000 0121 
                 ; 0000 0122 return 1;  // Return a non-zero value to indicate success
00023b e0e1      	LDI  R30,LOW(1)
00023c e0f0      	LDI  R31,HIGH(1)
                 _0x2080003:
00023d 9109      	LD   R16,Y+
00023e 9119      	LD   R17,Y+
00023f 9508      	RET
                 ; 0000 0123 }
                 ; .FEND
                 ;void generateTone()
                 ; 0000 0125 {
                 _generateTone:
                 ; .FSTART _generateTone
                 ; 0000 0126 PORTD.7 = 1;  // Set PD7 HIGH
000240 9a97      	SBI  0x12,7
                 ; 0000 0127 delay_ms(500);  // Adjust duration as needed
000241 efa4      	LDI  R26,LOW(500)
000242 e0b1      	LDI  R27,HIGH(500)
000243 d0e2      	RCALL _delay_ms
                 ; 0000 0128 PORTD.7 = 0;  // Set PD7 LOW
000244 9897      	CBI  0x12,7
                 ; 0000 0129 delay_ms(500);  // Pause between tones
000245 efa4      	LDI  R26,LOW(500)
000246 e0b1      	LDI  R27,HIGH(500)
000247 d0de      	RCALL _delay_ms
                 ; 0000 012A PORTD.7 = 1;  // Set PD7 HIGH (optional: restore to high for a brief moment)
000248 9a97      	SBI  0x12,7
                 ; 0000 012B }
000249 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00024a 931a      	ST   -Y,R17
00024b 2f1a      	MOV  R17,R26
00024c b3eb      	IN   R30,0x1B
00024d 70ef      	ANDI R30,LOW(0xF)
00024e 2fae      	MOV  R26,R30
00024f 2fe1      	MOV  R30,R17
000250 7fe0      	ANDI R30,LOW(0xF0)
000251 2bea      	OR   R30,R26
000252 bbeb      	OUT  0x1B,R30
                +
000253 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000254 958a     +DEC R24
000255 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000256 9ada      	SBI  0x1B,2
                +
000257 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000258 958a     +DEC R24
000259 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00025a 98da      	CBI  0x1B,2
                +
00025b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00025c 958a     +DEC R24
00025d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00025e c074      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00025f 93aa      	ST   -Y,R26
000260 81a8      	LD   R26,Y
000261 dfe8      	RCALL __lcd_write_nibble_G100
000262 81e8          ld    r30,y
000263 95e2          swap  r30
000264 83e8          st    y,r30
000265 81a8      	LD   R26,Y
000266 dfe3      	RCALL __lcd_write_nibble_G100
                +
000267 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000268 958a     +DEC R24
000269 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00026a 9621      	ADIW R28,1
00026b 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00026c 931a      	ST   -Y,R17
00026d 930a      	ST   -Y,R16
00026e 2f1a      	MOV  R17,R26
00026f 810a      	LDD  R16,Y+2
000270 2fe1      	MOV  R30,R17
000271 e0f0      	LDI  R31,0
000272 51e8      	SUBI R30,LOW(-__base_y_G100)
000273 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000274 81e0      	LD   R30,Z
000275 0fe0      	ADD  R30,R16
000276 2fae      	MOV  R26,R30
000277 dfe7      	RCALL __lcd_write_data
000278 2e50      	MOV  R5,R16
000279 2e41      	MOV  R4,R17
00027a 8119      	LDD  R17,Y+1
00027b 8108      	LDD  R16,Y+0
00027c 9623      	ADIW R28,3
00027d 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00027e e0a2      	LDI  R26,LOW(2)
00027f d08d      	RCALL SUBOPT_0x7
000280 e0ac      	LDI  R26,LOW(12)
000281 dfdd      	RCALL __lcd_write_data
000282 e0a1      	LDI  R26,LOW(1)
000283 d089      	RCALL SUBOPT_0x7
000284 e0e0      	LDI  R30,LOW(0)
000285 2e4e      	MOV  R4,R30
000286 2e5e      	MOV  R5,R30
000287 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000288 931a      	ST   -Y,R17
000289 2f1a      	MOV  R17,R26
00028a 301a      	CPI  R17,10
00028b f011      	BREQ _0x2000005
00028c 1457      	CP   R5,R7
00028d f038      	BRLO _0x2000004
                 _0x2000005:
00028e e0e0      	LDI  R30,LOW(0)
00028f 93ea      	ST   -Y,R30
000290 9443      	INC  R4
000291 2da4      	MOV  R26,R4
000292 dfd9      	RCALL _lcd_gotoxy
000293 301a      	CPI  R17,10
000294 f1f1      	BREQ _0x2080001
                 _0x2000004:
000295 9453      	INC  R5
000296 9ad8      	SBI  0x1B,0
000297 2fa1      	MOV  R26,R17
000298 dfc6      	RCALL __lcd_write_data
000299 98d8      	CBI  0x1B,0
00029a c038      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00029b d07e      	RCALL __SAVELOCR4
00029c 019d      	MOVW R18,R26
                 _0x2000008:
00029d 01d9      	MOVW R26,R18
                +
00029e 5f2f     +SUBI R18 , LOW ( - 1 )
00029f 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0002a0 91ec      	LD   R30,X
0002a1 2f1e      	MOV  R17,R30
0002a2 30e0      	CPI  R30,0
0002a3 f019      	BREQ _0x200000A
0002a4 2fa1      	MOV  R26,R17
0002a5 dfe2      	RCALL _lcd_putchar
0002a6 cff6      	RJMP _0x2000008
                 _0x200000A:
                 _0x2080002:
0002a7 d079      	RCALL __LOADLOCR4
0002a8 9624      	ADIW R28,4
0002a9 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
0002aa 931a      	ST   -Y,R17
0002ab 2f1a      	MOV  R17,R26
0002ac b3ea      	IN   R30,0x1A
0002ad 6fe0      	ORI  R30,LOW(0xF0)
0002ae bbea      	OUT  0x1A,R30
0002af 9ad2      	SBI  0x1A,2
0002b0 9ad0      	SBI  0x1A,0
0002b1 9ad1      	SBI  0x1A,1
0002b2 98da      	CBI  0x1B,2
0002b3 98d8      	CBI  0x1B,0
0002b4 98d9      	CBI  0x1B,1
0002b5 2e71      	MOV  R7,R17
0002b6 2fe1      	MOV  R30,R17
0002b7 58e0      	SUBI R30,-LOW(128)
                +
0002b8 93e0 01ea+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0002ba 2fe1      	MOV  R30,R17
0002bb 54e0      	SUBI R30,-LOW(192)
                +
0002bc 93e0 01eb+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0002be e1a4      	LDI  R26,LOW(20)
0002bf e0b0      	LDI  R27,0
0002c0 d065      	RCALL _delay_ms
0002c1 d04f      	RCALL SUBOPT_0x8
0002c2 d04e      	RCALL SUBOPT_0x8
0002c3 d04d      	RCALL SUBOPT_0x8
0002c4 e2a0      	LDI  R26,LOW(32)
0002c5 df84      	RCALL __lcd_write_nibble_G100
                +
0002c6 ec88     +LDI R24 , LOW ( 200 )
0002c7 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002c8 9701     +SBIW R24 , 1
0002c9 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002ca e2a8      	LDI  R26,LOW(40)
0002cb df93      	RCALL __lcd_write_data
0002cc e0a4      	LDI  R26,LOW(4)
0002cd df91      	RCALL __lcd_write_data
0002ce e8a5      	LDI  R26,LOW(133)
0002cf df8f      	RCALL __lcd_write_data
0002d0 e0a6      	LDI  R26,LOW(6)
0002d1 df8d      	RCALL __lcd_write_data
0002d2 dfab      	RCALL _lcd_clear
                 _0x2080001:
0002d3 9119      	LD   R17,Y+
0002d4 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcmp:
                 ; .FSTART _strcmp
0002d5 93ba      	ST   -Y,R27
0002d6 93aa      	ST   -Y,R26
0002d7 91e9          ld   r30,y+
0002d8 91f9          ld   r31,y+
0002d9 91a9          ld   r26,y+
0002da 91b9          ld   r27,y+
                 strcmp0:
0002db 916d          ld   r22,x+
0002dc 9171          ld   r23,z+
0002dd 1767          cp   r22,r23
0002de f421          brne strcmp1
0002df 2366          tst  r22
0002e0 f7d1          brne strcmp0
                 strcmp3:
0002e1 27ee          clr  r30
0002e2 9508          ret
                 strcmp1:
0002e3 1b67          sub  r22,r23
0002e4 f3e1          breq strcmp3
0002e5 e0e1          ldi  r30,1
0002e6 f408          brcc strcmp2
0002e7 50e2          subi r30,2
                 strcmp2:
0002e8 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _users:
0001a2           	.BYTE 0x46
                 __base_y_G100:
0001e8           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
                +
0002e9 e000     +LDI R16 , LOW ( 0 )
0002ea e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0002eb e020     +LDI R18 , LOW ( 0 )
0002ec e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0002ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1:
0002ee 93fa      	ST   -Y,R31
0002ef 93ea      	ST   -Y,R30
0002f0 eea8      	LDI  R26,LOW(1000)
0002f1 e0b3      	LDI  R27,HIGH(1000)
0002f2 cf1f      	RJMP _displayMessage
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
                +
0002f3 5f0a     +SUBI R16 , LOW ( - 6 )
0002f4 4f1f     +SBCI R17 , HIGH ( - 6 )
                 	__ADDWRN 16,17,6
0002f5 931a      	ST   -Y,R17
0002f6 930a      	ST   -Y,R16
0002f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
0002f8 93fa      	ST   -Y,R31
0002f9 93ea      	ST   -Y,R30
0002fa e0a4      	LDI  R26,LOW(4)
0002fb e0b0      	LDI  R27,0
0002fc ced4      	RJMP _EE_ReadString
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
                +
0002fd 5f0c     +SUBI R16 , LOW ( - 4 )
0002fe 4f1f     +SBCI R17 , HIGH ( - 4 )
                 	__ADDWRN 16,17,4
0002ff 931a      	ST   -Y,R17
000300 930a      	ST   -Y,R16
000301 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000302 d017      	RCALL __SAVELOCR4
000303 018d      	MOVW R16,R26
                +
000304 812c     +LDD R18 , Y + 4
000305 813d     +LDD R19 , Y + 4 + 1
                 	__GETWRS 18,19,4
000306 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x6:
                +
000307 e0ae     +LDI R26 , 14
000308 9fa2     +MUL R26 , R18
000309 01f0     +MOVW R30 , R0
00030a 9fa3     +MUL R26 , R19
00030b 0df0     +ADD R31 , R0
                 	__MULBNWRU 18,19,14
00030c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
00030d df51      	RCALL __lcd_write_data
00030e e0a3      	LDI  R26,LOW(3)
00030f e0b0      	LDI  R27,0
000310 c015      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x8:
000311 e3a0      	LDI  R26,LOW(48)
000312 df37      	RCALL __lcd_write_nibble_G100
                +
000313 ec88     +LDI R24 , LOW ( 200 )
000314 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000315 9701     +SBIW R24 , 1
000316 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000317 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000318 935a      	ST   -Y,R21
                 __SAVELOCR5:
000319 934a      	ST   -Y,R20
                 __SAVELOCR4:
00031a 933a      	ST   -Y,R19
                 __SAVELOCR3:
00031b 932a      	ST   -Y,R18
                 __SAVELOCR2:
00031c 931a      	ST   -Y,R17
00031d 930a      	ST   -Y,R16
00031e 9508      	RET
                 
                 __LOADLOCR6:
00031f 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000320 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000321 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000322 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000323 8119      	LDD  R17,Y+1
000324 8108      	LD   R16,Y
000325 9508      	RET
                 
                 _delay_ms:
000326 9610      	adiw r26,0
000327 f039      	breq __delay_ms1
                 __delay_ms0:
000328 95a8      	wdr
                +
000329 ed80     +LDI R24 , LOW ( 0x7D0 )
00032a e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00032b 9701     +SBIW R24 , 1
00032c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00032d 9711      	sbiw r26,1
00032e f7c9      	brne __delay_ms0
                 __delay_ms1:
00032f 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  10 r1 :   3 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  39 r17:  44 r18:  20 r19:  15 r20:   8 r21:   8 r22:   8 r23:   5 
r24:  23 r25:   7 r26:  82 r27:  19 r28:  20 r29:   1 r30: 154 r31:  26 
x  :  12 y  :  93 z  :  13 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   5 
adiw  :  20 and   :   0 andi  :   3 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   9 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   1 brmi  :   0 brne  :  29 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :  11 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   3 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   3 cpc   :   3 cpi   :  21 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  10 inc   :   2 jmp   :  22 ld    :  31 ldd   :  18 ldi   :  95 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  21 movw  :  35 
mul   :   2 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   2 
ori   :   3 out   :  19 pop   :   2 push  :   2 rcall :  81 ret   :  32 
reti  :   1 rjmp  :  35 rol   :   0 ror   :   0 sbc   :   0 sbci  :  15 
sbi   :  21 sbic  :   2 sbis  :  12 sbiw  :  11 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  61 std   :   1 sts   :   2 sub   :   1 subi  :  21 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 51 out of 116 (44.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000660   1432    200   1632   16384  10.0%
[.dseg] 0x000060 0x0001ec      0    140    140    1024  13.7%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 4 warnings
