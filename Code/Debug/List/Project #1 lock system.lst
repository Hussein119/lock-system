
AVRASM ver. 2.1.30  E:\Seventh term\Embedded Systems\Project #1\Simulation & Code (main)\lock-system\Code\Debug\List\Project #1 lock system.asm Sun Dec 17 22:05:25 2023

E:\Seventh term\Embedded Systems\Project #1\Simulation & Code (main)\lock-system\Code\Debug\List\Project #1 lock system.asm(1418): warning: Register r5 already defined by the .DEF directive
E:\Seventh term\Embedded Systems\Project #1\Simulation & Code (main)\lock-system\Code\Debug\List\Project #1 lock system.asm(1419): warning: Register r4 already defined by the .DEF directive
E:\Seventh term\Embedded Systems\Project #1\Simulation & Code (main)\lock-system\Code\Debug\List\Project #1 lock system.asm(1420): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V4.00a 
                 ;(C) Copyright 1998-2023 Pavel Haiduc, HP InfoTech S.R.L.
                 ;http://www.hpinfotech.ro
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Mode 2
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPMCSR=0x37
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.EQU __FLASH_PAGE_SIZE=0x40
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETW1P
                 	LD   R30,X+
                 	LD   R31,X
                 	SBIW R26,1
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD1P_INC
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X+
                 	LD   R23,X+
                 	.ENDM
                 
                 	.MACRO __GETD1P_DEC
                 	LD   R23,-X
                 	LD   R22,-X
                 	LD   R31,-X
                 	LD   R30,-X
                 	.ENDM
                 
                 	.MACRO __PUTDP1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTDP1_DEC
                 	ST   -X,R23
                 	ST   -X,R22
                 	ST   -X,R31
                 	ST   -X,R30
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __CPD10
                 	SBIW R30,0
                 	SBCI R22,0
                 	SBCI R23,0
                 	.ENDM
                 
                 	.MACRO __CPD20
                 	SBIW R26,0
                 	SBCI R24,0
                 	SBCI R25,0
                 	.ENDM
                 
                 	.MACRO __ADDD12
                 	ADD  R30,R26
                 	ADC  R31,R27
                 	ADC  R22,R24
                 	ADC  R23,R25
                 	.ENDM
                 
                 	.MACRO __ADDD21
                 	ADD  R26,R30
                 	ADC  R27,R31
                 	ADC  R24,R22
                 	ADC  R25,R23
                 	.ENDM
                 
                 	.MACRO __SUBD12
                 	SUB  R30,R26
                 	SBC  R31,R27
                 	SBC  R22,R24
                 	SBC  R23,R25
                 	.ENDM
                 
                 	.MACRO __SUBD21
                 	SUB  R26,R30
                 	SBC  R27,R31
                 	SBC  R24,R22
                 	SBC  R25,R23
                 	.ENDM
                 
                 	.MACRO __ANDD12
                 	AND  R30,R26
                 	AND  R31,R27
                 	AND  R22,R24
                 	AND  R23,R25
                 	.ENDM
                 
                 	.MACRO __ORD12
                 	OR   R30,R26
                 	OR   R31,R27
                 	OR   R22,R24
                 	OR   R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD12
                 	EOR  R30,R26
                 	EOR  R31,R27
                 	EOR  R22,R24
                 	EOR  R23,R25
                 	.ENDM
                 
                 	.MACRO __XORD21
                 	EOR  R26,R30
                 	EOR  R27,R31
                 	EOR  R24,R22
                 	EOR  R25,R23
                 	.ENDM
                 
                 	.MACRO __COMD1
                 	COM  R30
                 	COM  R31
                 	COM  R22
                 	COM  R23
                 	.ENDM
                 
                 	.MACRO __MULD2_2
                 	LSL  R26
                 	ROL  R27
                 	ROL  R24
                 	ROL  R25
                 	.ENDM
                 
                 	.MACRO __LSRD1
                 	LSR  R23
                 	ROR  R22
                 	ROR  R31
                 	ROR  R30
                 	.ENDM
                 
                 	.MACRO __LSLD1
                 	LSL  R30
                 	ROL  R31
                 	ROL  R22
                 	ROL  R23
                 	.ENDM
                 
                 	.MACRO __ASRB4
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	ASR  R30
                 	.ENDM
                 
                 	.MACRO __ASRW8
                 	MOV  R30,R31
                 	CLR  R31
                 	SBRC R30,7
                 	SER  R31
                 	.ENDM
                 
                 	.MACRO __LSRD16
                 	MOV  R30,R22
                 	MOV  R31,R23
                 	LDI  R22,0
                 	LDI  R23,0
                 	.ENDM
                 
                 	.MACRO __LSLD16
                 	MOV  R22,R30
                 	MOV  R23,R31
                 	LDI  R30,0
                 	LDI  R31,0
                 	.ENDM
                 
                 	.MACRO __CWD1
                 	MOV  R22,R31
                 	ADD  R22,R22
                 	SBC  R22,R22
                 	MOV  R23,R22
                 	.ENDM
                 
                 	.MACRO __CWD2
                 	MOV  R24,R27
                 	ADD  R24,R24
                 	SBC  R24,R24
                 	MOV  R25,R24
                 	.ENDM
                 
                 	.MACRO __SETMSD1
                 	SER  R31
                 	SER  R22
                 	SER  R23
                 	.ENDM
                 
                 	.MACRO __ADDW1R15
                 	CLR  R0
                 	ADD  R30,R15
                 	ADC  R31,R0
                 	.ENDM
                 
                 	.MACRO __ADDW2R15
                 	CLR  R0
                 	ADD  R26,R15
                 	ADC  R27,R0
                 	.ENDM
                 
                 	.MACRO __EQB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __NEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRNE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRGE PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLT PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LEB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GEB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRSH PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LTB12U
                 	CP   R26,R30
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __GTB12U
                 	CP   R30,R26
                 	LDI  R30,1
                 	BRLO PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __CPW01
                 	CLR  R0
                 	CP   R0,R30
                 	CPC  R0,R31
                 	.ENDM
                 
                 	.MACRO __CPW02
                 	CLR  R0
                 	CP   R0,R26
                 	CPC  R0,R27
                 	.ENDM
                 
                 	.MACRO __CPD12
                 	CP   R30,R26
                 	CPC  R31,R27
                 	CPC  R22,R24
                 	CPC  R23,R25
                 	.ENDM
                 
                 	.MACRO __CPD21
                 	CP   R26,R30
                 	CPC  R27,R31
                 	CPC  R24,R22
                 	CPC  R25,R23
                 	.ENDM
                 
                 	.MACRO __BSTB1
                 	CLT
                 	TST  R30
                 	BREQ PC+2
                 	SET
                 	.ENDM
                 
                 	.MACRO __LNEGB1
                 	TST  R30
                 	LDI  R30,1
                 	BREQ PC+2
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __LNEGW1
                 	OR   R30,R31
                 	LDI  R30,1
                 	BREQ PC+2
                 	LDI  R30,0
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2M
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETW1Z
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	CALL __GETD1Z
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETW2X
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __GETD2X
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF __lcd_x=R5
                 	.DEF __lcd_y=R4
                 	.DEF __lcd_maxx=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0147 	JMP  __RESET
000002 940c 0259 	JMP  _admin
000004 940c 019f 	JMP  _SetPC
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 020a 	JMP  _open
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G102:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G102:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x3:
000033 7250
000034 666f
000035 0000
000036 3131      	.DB  0x50,0x72,0x6F,0x66,0x0,0x0,0x31,0x31
000037 0031
000038 3032
000039 0033
00003a 6841      	.DB  0x31,0x0,0x32,0x30,0x33,0x0,0x41,0x68
00003b 656d
00003c 0064
00003d 3231
00003e 0036      	.DB  0x6D,0x65,0x64,0x0,0x31,0x32,0x36,0x0
00003f 3231
000040 0039
000041 6d41
000042 0072      	.DB  0x31,0x32,0x39,0x0,0x41,0x6D,0x72,0x0
000043 0000
000044 3231
000045 0038
000046 3233      	.DB  0x0,0x0,0x31,0x32,0x38,0x0,0x33,0x32
000047 0035
000048 6441
000049 6c65
00004a 0000      	.DB  0x35,0x0,0x41,0x64,0x65,0x6C,0x0,0x0
00004b 3331
00004c 0030
00004d 3234
00004e 0036      	.DB  0x31,0x33,0x30,0x0,0x34,0x32,0x36,0x0
00004f 6d4f
000050 7265
000051 0000
000052 3331      	.DB  0x4F,0x6D,0x65,0x72,0x0,0x0,0x31,0x33
000053 0032
000054 3730
E:\Seventh term\Embedded Systems\Project #1\Simulation & Code (main)\lock-system\Code\Debug\List\Project #1 lock system.asm(1466): warning: .cseg .db misalignment - padding zero byte
000055 0039      	.DB  0x32,0x0,0x30,0x37,0x39
                 _0x0:
000056 6e45
000057 6574
000058 2072
000059 6f79      	.DB  0x45,0x6E,0x74,0x65,0x72,0x20,0x79,0x6F
00005a 7275
00005b 4920
00005c 3a44
00005d 4500      	.DB  0x75,0x72,0x20,0x49,0x44,0x3A,0x0,0x45
00005e 746e
00005f 7265
000060 6f20
000061 646c      	.DB  0x6E,0x74,0x65,0x72,0x20,0x6F,0x6C,0x64
000062 5020
000063 3a43
000064 4500
000065 746e      	.DB  0x20,0x50,0x43,0x3A,0x0,0x45,0x6E,0x74
000066 7265
000067 6e20
000068 7765
000069 5020      	.DB  0x65,0x72,0x20,0x6E,0x65,0x77,0x20,0x50
00006a 3a43
00006b 5200
00006c 2d65
00006d 6e65      	.DB  0x43,0x3A,0x0,0x52,0x65,0x2D,0x65,0x6E
00006e 6574
00006f 2072
000070 656e
000071 2077      	.DB  0x74,0x65,0x72,0x20,0x6E,0x65,0x77,0x20
000072 4350
000073 003a
000074 654e
000075 2077      	.DB  0x50,0x43,0x3A,0x0,0x4E,0x65,0x77,0x20
000076 4350
000077 7320
000078 6f74
000079 6572      	.DB  0x50,0x43,0x20,0x73,0x74,0x6F,0x72,0x65
00007a 0064
00007b 654e
00007c 2077
00007d 4350      	.DB  0x64,0x0,0x4E,0x65,0x77,0x20,0x50,0x43
00007e 6d20
00007f 7369
000080 616d
000081 6374      	.DB  0x20,0x6D,0x69,0x73,0x6D,0x61,0x74,0x63
000082 2c68
000083 4320
000084 6e6f
000085 6174      	.DB  0x68,0x2C,0x20,0x43,0x6F,0x6E,0x74,0x61
000086 7463
000087 6120
000088 6d64
000089 6e69      	.DB  0x63,0x74,0x20,0x61,0x64,0x6D,0x69,0x6E
00008a 5700
00008b 6f72
00008c 676e
00008d 6f20      	.DB  0x0,0x57,0x72,0x6F,0x6E,0x67,0x20,0x6F
00008e 646c
00008f 5020
000090 2c43
000091 2020      	.DB  0x6C,0x64,0x20,0x50,0x43,0x2C,0x20,0x20
000092 4320
000093 6e6f
000094 6174
000095 7463      	.DB  0x20,0x43,0x6F,0x6E,0x74,0x61,0x63,0x74
000096 6120
000097 6d64
000098 6e69
000099 5700      	.DB  0x20,0x61,0x64,0x6D,0x69,0x6E,0x0,0x57
00009a 6f72
00009b 676e
00009c 4920
00009d 0044      	.DB  0x72,0x6F,0x6E,0x67,0x20,0x49,0x44,0x0
00009e 6e45
00009f 6574
0000a0 2072
0000a1 6f79      	.DB  0x45,0x6E,0x74,0x65,0x72,0x20,0x79,0x6F
0000a2 7275
0000a3 4920
0000a4 3a44
0000a5 0020      	.DB  0x75,0x72,0x20,0x49,0x44,0x3A,0x20,0x0
0000a6 6e45
0000a7 6574
0000a8 2072
0000a9 6f79      	.DB  0x45,0x6E,0x74,0x65,0x72,0x20,0x79,0x6F
0000aa 7275
0000ab 5020
0000ac 3a43
0000ad 0020      	.DB  0x75,0x72,0x20,0x50,0x43,0x3A,0x20,0x0
0000ae 6557
0000af 636c
0000b0 6d6f
0000b1 2c65      	.DB  0x57,0x65,0x6C,0x63,0x6F,0x6D,0x65,0x2C
0000b2 0020
0000b3 6f53
0000b4 7272
0000b5 2079      	.DB  0x20,0x0,0x53,0x6F,0x72,0x72,0x79,0x20
0000b6 7277
0000b7 6e6f
0000b8 2067
0000b9 4350      	.DB  0x77,0x72,0x6F,0x6E,0x67,0x20,0x50,0x43
0000ba 5000
0000bb 6f72
0000bc 0066
0000bd 6e45      	.DB  0x0,0x50,0x72,0x6F,0x66,0x0,0x45,0x6E
0000be 6574
0000bf 2072
0000c0 6441
0000c1 696d      	.DB  0x74,0x65,0x72,0x20,0x41,0x64,0x6D,0x69
0000c2 206e
0000c3 4350
0000c4 203a
0000c5 4500      	.DB  0x6E,0x20,0x50,0x43,0x3A,0x20,0x0,0x45
0000c6 746e
0000c7 7265
0000c8 5320
0000c9 7574      	.DB  0x6E,0x74,0x65,0x72,0x20,0x53,0x74,0x75
0000ca 6564
0000cb 746e
0000cc 4920
0000cd 3a44      	.DB  0x64,0x65,0x6E,0x74,0x20,0x49,0x44,0x3A
0000ce 0020
0000cf 6e45
0000d0 6574
0000d1 2072      	.DB  0x20,0x0,0x45,0x6E,0x74,0x65,0x72,0x20
0000d2 7473
0000d3 6475
0000d4 6e65
0000d5 2774      	.DB  0x73,0x74,0x75,0x64,0x65,0x6E,0x74,0x27
0000d6 2073
0000d7 656e
0000d8 2077
0000d9 4350      	.DB  0x73,0x20,0x6E,0x65,0x77,0x20,0x50,0x43
0000da 203a
0000db 5300
0000dc 7574
0000dd 6564      	.DB  0x3A,0x20,0x0,0x53,0x74,0x75,0x64,0x65
0000de 746e
0000df 5020
0000e0 2043
0000e1 7369      	.DB  0x6E,0x74,0x20,0x50,0x43,0x20,0x69,0x73
0000e2 7320
0000e3 6f74
0000e4 6572
0000e5 0064      	.DB  0x20,0x73,0x74,0x6F,0x72,0x65,0x64,0x0
0000e6 6e45
0000e7 6574
0000e8 2072
0000e9 6f79      	.DB  0x45,0x6E,0x74,0x65,0x72,0x20,0x79,0x6F
0000ea 7275
0000eb 6e20
0000ec 7765
0000ed 5020      	.DB  0x75,0x72,0x20,0x6E,0x65,0x77,0x20,0x50
0000ee 3a43
0000ef 0020
0000f0 6f59
0000f1 7275      	.DB  0x43,0x3A,0x20,0x0,0x59,0x6F,0x75,0x72
0000f2 5020
0000f3 2043
0000f4 7369
0000f5 7320      	.DB  0x20,0x50,0x43,0x20,0x69,0x73,0x20,0x73
0000f6 6f74
0000f7 6572
0000f8 0064
0000f9 6f43      	.DB  0x74,0x6F,0x72,0x65,0x64,0x0,0x43,0x6F
0000fa 746e
0000fb 6361
0000fc 2074
0000fd 6441      	.DB  0x6E,0x74,0x61,0x63,0x74,0x20,0x41,0x64
0000fe 696d
0000ff 006e      	.DB  0x6D,0x69,0x6E,0x0
                 _0x2000003:
000100 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000101 0045      	.DW  0x45
000102 02bd      	.DW  _users
000103 0066      	.DW  _0x3*2
                 
000104 000f      	.DW  0x0F
000105 0160      	.DW  _0x19
000106 00ac      	.DW  _0x0*2
                 
000107 000e      	.DW  0x0E
000108 016f      	.DW  _0x19+15
000109 00bb      	.DW  _0x0*2+15
                 
00010a 000e      	.DW  0x0E
00010b 017d      	.DW  _0x19+29
00010c 00c9      	.DW  _0x0*2+29
                 
00010d 0011      	.DW  0x11
00010e 018b      	.DW  _0x19+43
00010f 00d7      	.DW  _0x0*2+43
                 
000110 000e      	.DW  0x0E
000111 019c      	.DW  _0x19+60
000112 00e8      	.DW  _0x0*2+60
                 
000113 001f      	.DW  0x1F
000114 01aa      	.DW  _0x19+74
000115 00f6      	.DW  _0x0*2+74
                 
000116 001e      	.DW  0x1E
000117 01c9      	.DW  _0x19+105
000118 0115      	.DW  _0x0*2+105
                 
000119 0009      	.DW  0x09
00011a 01e7      	.DW  _0x19+135
00011b 0133      	.DW  _0x0*2+135
                 
00011c 0010      	.DW  0x10
00011d 01f0      	.DW  _0x29
00011e 013c      	.DW  _0x0*2+144
                 
00011f 0010      	.DW  0x10
000120 0200      	.DW  _0x29+16
000121 014c      	.DW  _0x0*2+160
                 
000122 000a      	.DW  0x0A
000123 0210      	.DW  _0x29+32
000124 015c      	.DW  _0x0*2+176
                 
000125 000f      	.DW  0x0F
000126 021a      	.DW  _0x29+42
000127 0166      	.DW  _0x0*2+186
                 
000128 0009      	.DW  0x09
000129 0229      	.DW  _0x29+57
00012a 0133      	.DW  _0x0*2+135
                 
00012b 0005      	.DW  0x05
00012c 0232      	.DW  _0x3B
00012d 0175      	.DW  _0x0*2+201
                 
00012e 0011      	.DW  0x11
00012f 0237      	.DW  _0x3B+5
000130 017a      	.DW  _0x0*2+206
                 
000131 0013      	.DW  0x13
000132 0248      	.DW  _0x3B+22
000133 018b      	.DW  _0x0*2+223
                 
000134 0019      	.DW  0x19
000135 025b      	.DW  _0x3B+41
000136 019e      	.DW  _0x0*2+242
                 
000137 0015      	.DW  0x15
000138 0274      	.DW  _0x3B+66
000139 01b7      	.DW  _0x0*2+267
                 
00013a 0014      	.DW  0x14
00013b 0289      	.DW  _0x3B+87
00013c 01cc      	.DW  _0x0*2+288
                 
00013d 0012      	.DW  0x12
00013e 029d      	.DW  _0x3B+107
00013f 01e0      	.DW  _0x0*2+308
                 
000140 000e      	.DW  0x0E
000141 02af      	.DW  _0x3B+125
000142 01f2      	.DW  _0x0*2+326
                 
000143 0002      	.DW  0x02
000144 0303      	.DW  __base_y_G100
000145 0200      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000146 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000147 94f8      	CLI
                 
000148 27ee      	CLR  R30
000149 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00014a e0f1      	LDI  R31,1
00014b bffb      	OUT  GICR,R31
00014c bfeb      	OUT  GICR,R30
00014d bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00014e e08d      	LDI  R24,(14-2)+1
00014f e0a2      	LDI  R26,2
000150 27bb      	CLR  R27
                 __CLEAR_REG:
000151 93ed      	ST   X+,R30
000152 958a      	DEC  R24
000153 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000154 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000155 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000156 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000157 93ed      	ST   X+,R30
000158 9701      	SBIW R24,1
000159 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00015a e0e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00015b e0f2      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00015c 9185      	LPM  R24,Z+
00015d 9195      	LPM  R25,Z+
00015e 9700      	SBIW R24,0
00015f f061      	BREQ __GLOBAL_INI_END
000160 91a5      	LPM  R26,Z+
000161 91b5      	LPM  R27,Z+
000162 9005      	LPM  R0,Z+
000163 9015      	LPM  R1,Z+
000164 01bf      	MOVW R22,R30
000165 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000166 9005      	LPM  R0,Z+
000167 920d      	ST   X+,R0
000168 9701      	SBIW R24,1
000169 f7e1      	BRNE __GLOBAL_INI_LOOP
00016a 01fb      	MOVW R30,R22
00016b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00016c e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00016d bfed      	OUT  SPL,R30
00016e e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00016f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000170 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000171 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000172 940c 0174 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0x00
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;char keypad();
                 ;unsigned char EE_Read(unsigned int address);
                 ;void EE_Write(unsigned int address, unsigned char data);
                 ;void EE_WriteString(unsigned int address, const char *str);
                 ;void EE_ReadString(unsigned int address, char *buffer, unsigned int length);
                 ;void initializeUsers();
                 ;void displayMessage(char *message, int delay_ms_value);
                 ;int enterValueWithKeypad(char *buffer);
                 ;void generateTone();
                 
                 	.DSEG
                 ;void main(void)
                 ; 0000 002D {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 002E 
                 ; 0000 002F // Set keypad ports
                 ; 0000 0030 DDRC = 0b00000111; // 1 unused pin , 4 rows (input) , 3 cloumns (output)
000174 e0e7      	LDI  R30,LOW(7)
000175 bbe4      	OUT  0x14,R30
                 ; 0000 0031 PORTC = 0b11111000; // pull up resistance
000176 efe8      	LDI  R30,LOW(248)
000177 bbe5      	OUT  0x15,R30
                 ; 0000 0032 
                 ; 0000 0033 // Initialize the LCD
                 ; 0000 0034 lcd_init(16);
000178 e1a0      	LDI  R26,LOW(16)
000179 d2e3      	RCALL _lcd_init
                 ; 0000 0035 
                 ; 0000 0036 
                 ; 0000 0037 // Set the door as input (now by default the door is closed)
                 ; 0000 0038 DDRB .0 = 0;
00017a 98b8      	CBI  0x17,0
                 ; 0000 0039 PORTB .0 = 1; // turn on pull up resistance
00017b 9ac0      	SBI  0x18,0
                 ; 0000 003A 
                 ; 0000 003B // Set the speaker as a output
                 ; 0000 003C DDRD.7 = 1;
00017c 9a8f      	SBI  0x11,7
                 ; 0000 003D PORTD.7 = 1; // Set it to 1 initially
00017d 9a97      	SBI  0x12,7
                 ; 0000 003E 
                 ; 0000 003F // Initialize user data in EEPROM
                 ; 0000 0040 initializeUsers();
00017e d224      	RCALL _initializeUsers
                 ; 0000 0041 
                 ; 0000 0042 DDRB.2 = 0; // make button as input
00017f 98ba      	CBI  0x17,2
                 ; 0000 0043 PORTB.2 = 1; // turn on pull up resistance for INT2 intrrupt
000180 9ac2      	SBI  0x18,2
                 ; 0000 0044 
                 ; 0000 0045 // actual casue INT2
                 ; 0000 0046 bit_set(MCUCSR, 6);
000181 b7e4      	IN   R30,0x34
000182 64e0      	ORI  R30,0x40
000183 bfe4      	OUT  0x34,R30
                 ; 0000 0047 
                 ; 0000 0048 DDRD.2 = 0; // make button as input
000184 988a      	CBI  0x11,2
                 ; 0000 0049 PORTD.2 = 1; // turn on pull up resistance for INT0 intrrupt
000185 9a92      	SBI  0x12,2
                 ; 0000 004A 
                 ; 0000 004B // actual casue (The falling edge of INT0)
                 ; 0000 004C bit_set(MCUCR, 1);
000186 b7e5      	IN   R30,0x35
000187 60e2      	ORI  R30,2
000188 bfe5      	OUT  0x35,R30
                 ; 0000 004D bit_clr(MCUCR, 0);
000189 b7e5      	IN   R30,0x35
00018a 7fee      	ANDI R30,0xFE
00018b bfe5      	OUT  0x35,R30
                 ; 0000 004E 
                 ; 0000 004F // actual casue (The falling edge of INT1)
                 ; 0000 0050 bit_set(MCUCR, 3);
00018c b7e5      	IN   R30,0x35
00018d 60e8      	ORI  R30,8
00018e bfe5      	OUT  0x35,R30
                 ; 0000 0051 bit_clr(MCUCR, 2);
00018f b7e5      	IN   R30,0x35
000190 7feb      	ANDI R30,0xFB
000191 bfe5      	OUT  0x35,R30
                 ; 0000 0052 
                 ; 0000 0053 DDRD.3 = 0; // make button SetPC as input
000192 988b      	CBI  0x11,3
                 ; 0000 0054 PORTD.3 = 1; // turn on pull up resistance
000193 9a93      	SBI  0x12,3
                 ; 0000 0055 
                 ; 0000 0056 // Enable global interrupts
                 ; 0000 0057 #asm("sei")
000194 9478      	SEI
                 ; 0000 0058 
                 ; 0000 0059 // GICR INT1 (bit no 7) , SetPC spacific enable
                 ; 0000 005A bit_set(GICR, 7);
000195 b7eb      	IN   R30,0x3B
000196 68e0      	ORI  R30,0x80
000197 bfeb      	OUT  0x3B,R30
                 ; 0000 005B 
                 ; 0000 005C // GICR INT2 (bit no 5) , open spacific enable
                 ; 0000 005D bit_set(GICR, 5);
000198 b7eb      	IN   R30,0x3B
000199 62e0      	ORI  R30,0x20
00019a bfeb      	OUT  0x3B,R30
                 ; 0000 005E 
                 ; 0000 005F // GICR INT0 (bit no 6) , admin spacific enable
                 ; 0000 0060 bit_set(GICR, 6);
00019b b7eb      	IN   R30,0x3B
00019c 64e0      	ORI  R30,0x40
00019d bfeb      	OUT  0x3B,R30
                 ; 0000 0061 }
                 _0x18:
00019e cfff      	RJMP _0x18
                 ; .FEND
                 ;interrupt [3] void SetPC (void)
                 ; 0000 0064 {
                 _SetPC:
                 ; .FSTART _SetPC
00019f d2fc      	RCALL SUBOPT_0x0
                 ; 0000 0065 char enteredID[5];  // Change data type to string
                 ; 0000 0066 User currentUser;
                 ; 0000 0067 unsigned int address = 0;
                 ; 0000 0068 int userFound = 0;
                 ; 0000 0069 int i;
                 ; 0000 006A char enteredNewPC[5]; // define enteredNewPC array to hold the new PC
                 ; 0000 006B char reenteredNewPC[5]; // define reenteredNewPC array to hold the Re-entered new PC
                 ; 0000 006C 
                 ; 0000 006D lcd_clear();
0001a0 976d      	SBIW R28,29
0001a1 d308      	RCALL SUBOPT_0x1
                 ;	enteredID -> Y+30
                 ;	currentUser -> Y+16
                 ;	address -> R16,R17
                 ;	userFound -> R18,R19
                 ;	i -> R20,R21
                 ;	enteredNewPC -> Y+11
                 ;	reenteredNewPC -> Y+6
0001a2 d28e      	RCALL _lcd_clear
                 ; 0000 006E displayMessage("Enter your ID:", 1000);
                +
0001a3 e6e0     +LDI R30 , LOW ( _0x19 + ( 0 ) )
0001a4 e0f1     +LDI R31 , HIGH ( _0x19 + ( 0 ) )
                 	__POINTW1MN _0x19,0
0001a5 d30a      	RCALL SUBOPT_0x2
                 ; 0000 006F lcd_gotoxy(0, 1);
                 ; 0000 0070 if (enterValueWithKeypad(enteredID))
0001a6 01de      	MOVW R26,R28
0001a7 965e      	ADIW R26,30
0001a8 d225      	RCALL _enterValueWithKeypad
0001a9 9730      	SBIW R30,0
0001aa f409      	BRNE PC+2
0001ab c05b      	RJMP _0x1A
                 ; 0000 0071 {
                 ; 0000 0072 // char enteredPC[4];
                 ; 0000 0073 char enteredOldPC[5];
                 ; 0000 0074 // search for the entered ID in the user data
                 ; 0000 0075 for (i = 0; i < sizeof(users) / sizeof(users[0]); ++i)
0001ac 9725      	SBIW R28,5
                 ;	enteredID -> Y+35
                 ;	currentUser -> Y+21
                 ;	enteredNewPC -> Y+16
                 ;	reenteredNewPC -> Y+11
                 ;	enteredOldPC -> Y+0
                +
0001ad e040     +LDI R20 , LOW ( 0 )
0001ae e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x1C:
                +
0001af 3045     +CPI R20 , LOW ( 5 )
0001b0 e0e0     +LDI R30 , HIGH ( 5 )
0001b1 075e     +CPC R21 , R30
                 	__CPWRN 20,21,5
0001b2 f00c      	BRLT PC+2
0001b3 c049      	RJMP _0x1D
                 ; 0000 0076 {
                 ; 0000 0077 address += sizeof(users[i].name);
0001b4 d304      	RCALL SUBOPT_0x3
                 ; 0000 0078 EE_ReadString(address, currentUser.id, sizeof(currentUser.id));  // Read ID as a string
0001b5 01fe      	MOVW R30,R28
0001b6 967d      	ADIW R30,29
0001b7 d306      	RCALL SUBOPT_0x4
                 ; 0000 0079 
                 ; 0000 007A if (strcmp(currentUser.id, enteredID) == 0)
0001b8 01fe      	MOVW R30,R28
0001b9 967b      	ADIW R30,27
0001ba 93fa      	ST   -Y,R31
0001bb 93ea      	ST   -Y,R30
0001bc 01de      	MOVW R26,R28
0001bd 9695      	ADIW R26,37
0001be d2c9      	RCALL _strcmp
0001bf 30e0      	CPI  R30,0
0001c0 f5c1      	BRNE _0x1E
                 ; 0000 007B {
                 ; 0000 007C // ID found, verify the old PC
                 ; 0000 007D address += sizeof(currentUser.id);
0001c1 d301      	RCALL SUBOPT_0x5
                 ; 0000 007E EE_ReadString(address, currentUser.pc, sizeof(currentUser.pc));  // Read PC as a string
0001c2 01fe      	MOVW R30,R28
0001c3 96b1      	ADIW R30,33
0001c4 d2f9      	RCALL SUBOPT_0x4
                 ; 0000 007F displayMessage("Enter old PC:", 1000);
                +
0001c5 e6ef     +LDI R30 , LOW ( _0x19 + ( 15 ) )
0001c6 e0f1     +LDI R31 , HIGH ( _0x19 + ( 15 ) )
                 	__POINTW1MN _0x19,15
0001c7 d2e8      	RCALL SUBOPT_0x2
                 ; 0000 0080 lcd_gotoxy(0, 1);
                 ; 0000 0081 
                 ; 0000 0082 if (enterValueWithKeypad(enteredOldPC))
0001c8 d2ff      	RCALL SUBOPT_0x6
0001c9 f161      	BREQ _0x1F
                 ; 0000 0083 {
                 ; 0000 0084 if (strcmp(currentUser.pc, enteredOldPC) == 0)
0001ca 01fe      	MOVW R30,R28
0001cb 967f      	ADIW R30,31
0001cc d2ff      	RCALL SUBOPT_0x7
0001cd f519      	BRNE _0x20
                 ; 0000 0085 {
                 ; 0000 0086 // Old PC verified
                 ; 0000 0087 displayMessage("Enter new PC:", 1000);
                +
0001ce e7ed     +LDI R30 , LOW ( _0x19 + ( 29 ) )
0001cf e0f1     +LDI R31 , HIGH ( _0x19 + ( 29 ) )
                 	__POINTW1MN _0x19,29
0001d0 d2df      	RCALL SUBOPT_0x2
                 ; 0000 0088 lcd_gotoxy(0, 1);
                 ; 0000 0089 enterValueWithKeypad(enteredNewPC);
0001d1 01de      	MOVW R26,R28
0001d2 9650      	ADIW R26,16
0001d3 d1fa      	RCALL _enterValueWithKeypad
                 ; 0000 008A 
                 ; 0000 008B lcd_clear();
0001d4 d25c      	RCALL _lcd_clear
                 ; 0000 008C displayMessage("Re-enter new PC:", 1000);
                +
0001d5 e8eb     +LDI R30 , LOW ( _0x19 + ( 43 ) )
0001d6 e0f1     +LDI R31 , HIGH ( _0x19 + ( 43 ) )
                 	__POINTW1MN _0x19,43
0001d7 d2d8      	RCALL SUBOPT_0x2
                 ; 0000 008D lcd_gotoxy(0, 1);
                 ; 0000 008E enterValueWithKeypad(reenteredNewPC);
0001d8 01de      	MOVW R26,R28
0001d9 961b      	ADIW R26,11
0001da d1f3      	RCALL _enterValueWithKeypad
                 ; 0000 008F 
                 ; 0000 0090 if (strcmp(enteredNewPC, reenteredNewPC) == 0)
0001db d2f7      	RCALL SUBOPT_0x8
0001dc 01de      	MOVW R26,R28
0001dd 961d      	ADIW R26,13
0001de d2a9      	RCALL _strcmp
0001df 30e0      	CPI  R30,0
0001e0 f451      	BRNE _0x21
                 ; 0000 0091 {
                 ; 0000 0092 // If new PC entered correctly, store it
                 ; 0000 0093 EE_WriteString(address, enteredNewPC);
0001e1 931a      	ST   -Y,R17
0001e2 930a      	ST   -Y,R16
0001e3 01de      	MOVW R26,R28
0001e4 9652      	ADIW R26,18
0001e5 d187      	RCALL _EE_WriteString
                 ; 0000 0094 displayMessage("New PC stored", 1000);
                +
0001e6 e9ec     +LDI R30 , LOW ( _0x19 + ( 60 ) )
0001e7 e0f1     +LDI R31 , HIGH ( _0x19 + ( 60 ) )
                 	__POINTW1MN _0x19,60
0001e8 d2ef      	RCALL SUBOPT_0x9
                 ; 0000 0095 DDRB.0 = 1;
0001e9 9ab8      	SBI  0x17,0
                 ; 0000 0096 }
                 ; 0000 0097 else
0001ea c005      	RJMP _0x24
                 _0x21:
                 ; 0000 0098 {
                 ; 0000 0099 displayMessage("New PC mismatch, Contact admin", 1000);
                +
0001eb eaea     +LDI R30 , LOW ( _0x19 + ( 74 ) )
0001ec e0f1     +LDI R31 , HIGH ( _0x19 + ( 74 ) )
                 	__POINTW1MN _0x19,74
0001ed d2ea      	RCALL SUBOPT_0x9
                 ; 0000 009A generateTone();
0001ee d204      	RCALL _generateTone
                 ; 0000 009B generateTone();
0001ef d203      	RCALL _generateTone
                 ; 0000 009C }
                 _0x24:
                 ; 0000 009D }
                 ; 0000 009E else
0001f0 c005      	RJMP _0x25
                 _0x20:
                 ; 0000 009F {
                 ; 0000 00A0 displayMessage("Wrong old PC,   Contact admin", 1000);
                +
0001f1 ece9     +LDI R30 , LOW ( _0x19 + ( 105 ) )
0001f2 e0f1     +LDI R31 , HIGH ( _0x19 + ( 105 ) )
                 	__POINTW1MN _0x19,105
0001f3 d2e4      	RCALL SUBOPT_0x9
                 ; 0000 00A1 
                 ; 0000 00A2 generateTone();
0001f4 d1fe      	RCALL _generateTone
                 ; 0000 00A3 generateTone();
0001f5 d1fd      	RCALL _generateTone
                 ; 0000 00A4 }
                 _0x25:
                 ; 0000 00A5 }
                 ; 0000 00A6 
                 ; 0000 00A7 userFound = 1;
                 _0x1F:
                +
0001f6 e021     +LDI R18 , LOW ( 1 )
0001f7 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 00A8 break;
0001f8 c004      	RJMP _0x1D
                 ; 0000 00A9 }
                 ; 0000 00AA 
                 ; 0000 00AB address += sizeof(users[i].id);
                 _0x1E:
0001f9 d2e3      	RCALL SUBOPT_0xA
                 ; 0000 00AC address += sizeof(users[i].pc);
                 ; 0000 00AD 
                 ; 0000 00AE }
                +
0001fa 5f4f     +SUBI R20 , LOW ( - 1 )
0001fb 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
0001fc cfb2      	RJMP _0x1C
                 _0x1D:
                 ; 0000 00AF 
                 ; 0000 00B0 if (!userFound)
0001fd 2e02      	MOV  R0,R18
0001fe 2a03      	OR   R0,R19
0001ff f429      	BRNE _0x26
                 ; 0000 00B1 {
                 ; 0000 00B2 displayMessage("Wrong ID", 1000);
                +
000200 eee7     +LDI R30 , LOW ( _0x19 + ( 135 ) )
000201 e0f1     +LDI R31 , HIGH ( _0x19 + ( 135 ) )
                 	__POINTW1MN _0x19,135
000202 d2d5      	RCALL SUBOPT_0x9
                 ; 0000 00B3 generateTone();
000203 d1ef      	RCALL _generateTone
                 ; 0000 00B4 generateTone();
000204 d1ee      	RCALL _generateTone
                 ; 0000 00B5 }
                 ; 0000 00B6 delay_ms(5000);
                 _0x26:
000205 d2dc      	RCALL SUBOPT_0xB
                 ; 0000 00B7 // close the door and clear lcd
                 ; 0000 00B8 DDRB .0 = 0;
                 ; 0000 00B9 lcd_clear();
                 ; 0000 00BA }
000206 9625      	ADIW R28,5
                 ; 0000 00BB }
                 _0x1A:
000207 d318      	RCALL __LOADLOCR6
000208 96a3      	ADIW R28,35
000209 c0ea      	RJMP _0xB2
                 ; .FEND
                 
                 	.DSEG
                 _0x19:
000160           	.BYTE 0x90
                 ;interrupt [19] void open (void)
                 ; 0000 00BE {
                 
                 	.CSEG
                 _open:
                 ; .FSTART _open
00020a d291      	RCALL SUBOPT_0x0
                 ; 0000 00BF // action on click on a button
                 ; 0000 00C0 
                 ; 0000 00C1 char enteredID[4];  // Change data type to string
                 ; 0000 00C2 User currentUser;
                 ; 0000 00C3 unsigned int address = 0;
                 ; 0000 00C4 int userFound = 0;
                 ; 0000 00C5 int i;
                 ; 0000 00C6 
                 ; 0000 00C7 displayMessage("Enter your ID: ", 1000);
00020b 9762      	SBIW R28,18
00020c d29d      	RCALL SUBOPT_0x1
                 ;	enteredID -> Y+20
                 ;	currentUser -> Y+6
                 ;	address -> R16,R17
                 ;	userFound -> R18,R19
                 ;	i -> R20,R21
                +
00020d efe0     +LDI R30 , LOW ( _0x29 + ( 0 ) )
00020e e0f1     +LDI R31 , HIGH ( _0x29 + ( 0 ) )
                 	__POINTW1MN _0x29,0
00020f d2a0      	RCALL SUBOPT_0x2
                 ; 0000 00C8 lcd_gotoxy(0, 1);
                 ; 0000 00C9 
                 ; 0000 00CA if (enterValueWithKeypad(enteredID))
000210 01de      	MOVW R26,R28
000211 9654      	ADIW R26,20
000212 d1bb      	RCALL _enterValueWithKeypad
000213 9730      	SBIW R30,0
000214 f1c1      	BREQ _0x2A
                 ; 0000 00CB {
                 ; 0000 00CC char enteredPC[4];
                 ; 0000 00CD for (i = 0; i < sizeof(users) / sizeof(users[0]); ++i)
000215 9724      	SBIW R28,4
                 ;	enteredID -> Y+24
                 ;	currentUser -> Y+10
                 ;	enteredPC -> Y+0
                +
000216 e040     +LDI R20 , LOW ( 0 )
000217 e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
                 _0x2C:
                +
000218 3045     +CPI R20 , LOW ( 5 )
000219 e0e0     +LDI R30 , HIGH ( 5 )
00021a 075e     +CPC R21 , R30
                 	__CPWRN 20,21,5
00021b f584      	BRGE _0x2D
                 ; 0000 00CE {
                 ; 0000 00CF EE_ReadString(address, currentUser.name, sizeof(users[i].name));
00021c 931a      	ST   -Y,R17
00021d 930a      	ST   -Y,R16
00021e 01fe      	MOVW R30,R28
00021f 963c      	ADIW R30,12
000220 d2c6      	RCALL SUBOPT_0xC
                 ; 0000 00D0 address += sizeof(users[i].name);
000221 d297      	RCALL SUBOPT_0x3
                 ; 0000 00D1 EE_ReadString(address, currentUser.id, sizeof(currentUser.id));  // Read ID as a string
000222 01fe      	MOVW R30,R28
000223 9672      	ADIW R30,18
000224 d299      	RCALL SUBOPT_0x4
                 ; 0000 00D2 
                 ; 0000 00D3 if (strcmp(currentUser.id, enteredID) == 0)
000225 d2ad      	RCALL SUBOPT_0x8
000226 01de      	MOVW R26,R28
000227 965a      	ADIW R26,26
000228 d25f      	RCALL _strcmp
000229 30e0      	CPI  R30,0
00022a f4e9      	BRNE _0x2E
                 ; 0000 00D4 {
                 ; 0000 00D5 
                 ; 0000 00D6 address += sizeof(users[i].id);
00022b d297      	RCALL SUBOPT_0x5
                 ; 0000 00D7 EE_ReadString(address, currentUser.pc, sizeof(currentUser.pc));  // Read PC as a string
00022c 01fe      	MOVW R30,R28
00022d 9676      	ADIW R30,22
00022e d28f      	RCALL SUBOPT_0x4
                 ; 0000 00D8 
                 ; 0000 00D9 displayMessage("Enter your PC: ", 1000);
                +
00022f e0e0     +LDI R30 , LOW ( _0x29 + ( 16 ) )
000230 e0f2     +LDI R31 , HIGH ( _0x29 + ( 16 ) )
                 	__POINTW1MN _0x29,16
000231 d27e      	RCALL SUBOPT_0x2
                 ; 0000 00DA lcd_gotoxy(0, 1);
                 ; 0000 00DB 
                 ; 0000 00DC if (enterValueWithKeypad(enteredPC))
000232 d295      	RCALL SUBOPT_0x6
000233 f089      	BREQ _0x2F
                 ; 0000 00DD {
                 ; 0000 00DE if (strcmp(currentUser.pc, enteredPC) == 0)
000234 01fe      	MOVW R30,R28
000235 9674      	ADIW R30,20
000236 d295      	RCALL SUBOPT_0x7
000237 f449      	BRNE _0x30
                 ; 0000 00DF {
                 ; 0000 00E0 lcd_clear();
000238 d1f8      	RCALL _lcd_clear
                 ; 0000 00E1 lcd_puts("Welcome, ");
                +
000239 e1a0     +LDI R26 , LOW ( _0x29 + ( 32 ) )
00023a e0b2     +LDI R27 , HIGH ( _0x29 + ( 32 ) )
                 	__POINTW2MN _0x29,32
00023b d212      	RCALL _lcd_puts
                 ; 0000 00E2 lcd_puts(currentUser.name);
00023c 01de      	MOVW R26,R28
00023d 961a      	ADIW R26,10
00023e d20f      	RCALL _lcd_puts
                 ; 0000 00E3 // Open the door
                 ; 0000 00E4 DDRB .0 = 1;
00023f 9ab8      	SBI  0x17,0
                 ; 0000 00E5 }
                 ; 0000 00E6 else
000240 c004      	RJMP _0x33
                 _0x30:
                 ; 0000 00E7 {
                 ; 0000 00E8 displayMessage("Sorry wrong PC", 1000);
                +
000241 e1ea     +LDI R30 , LOW ( _0x29 + ( 42 ) )
000242 e0f2     +LDI R31 , HIGH ( _0x29 + ( 42 ) )
                 	__POINTW1MN _0x29,42
000243 d294      	RCALL SUBOPT_0x9
                 ; 0000 00E9 // one peep alarm
                 ; 0000 00EA generateTone();
000244 d1ae      	RCALL _generateTone
                 ; 0000 00EB }
                 _0x33:
                 ; 0000 00EC }
                 ; 0000 00ED userFound = 1;
                 _0x2F:
                +
000245 e021     +LDI R18 , LOW ( 1 )
000246 e030     +LDI R19 , HIGH ( 1 )
                 	__GETWRN 18,19,1
                 ; 0000 00EE break;
000247 c004      	RJMP _0x2D
                 ; 0000 00EF }
                 ; 0000 00F0 
                 ; 0000 00F1 address += sizeof(users[i].id);
                 _0x2E:
000248 d294      	RCALL SUBOPT_0xA
                 ; 0000 00F2 address += sizeof(users[i].pc);
                 ; 0000 00F3 }
                +
000249 5f4f     +SUBI R20 , LOW ( - 1 )
00024a 4f5f     +SBCI R21 , HIGH ( - 1 )
                 	__ADDWRN 20,21,1
00024b cfcc      	RJMP _0x2C
                 _0x2D:
                 ; 0000 00F4 }
00024c 9624      	ADIW R28,4
                 ; 0000 00F5 
                 ; 0000 00F6 if (!userFound)
                 _0x2A:
00024d 2e02      	MOV  R0,R18
00024e 2a03      	OR   R0,R19
00024f f429      	BRNE _0x34
                 ; 0000 00F7 {
                 ; 0000 00F8 displayMessage("Wrong ID", 1000);
                +
000250 e2e9     +LDI R30 , LOW ( _0x29 + ( 57 ) )
000251 e0f2     +LDI R31 , HIGH ( _0x29 + ( 57 ) )
                 	__POINTW1MN _0x29,57
000252 d285      	RCALL SUBOPT_0x9
                 ; 0000 00F9 // Two peeps alarm
                 ; 0000 00FA generateTone();
000253 d19f      	RCALL _generateTone
                 ; 0000 00FB generateTone();
000254 d19e      	RCALL _generateTone
                 ; 0000 00FC }
                 ; 0000 00FD delay_ms(5000);
                 _0x34:
000255 d28c      	RCALL SUBOPT_0xB
                 ; 0000 00FE // close the door and clear lcd
                 ; 0000 00FF DDRB .0 = 0;
                 ; 0000 0100 lcd_clear();
                 ; 0000 0101 }
000256 d2c9      	RCALL __LOADLOCR6
000257 9668      	ADIW R28,24
000258 c09b      	RJMP _0xB2
                 ; .FEND
                 
                 	.DSEG
                 _0x29:
0001f0           	.BYTE 0x42
                 ;interrupt [2] void admin (void)
                 ; 0000 0104 {
                 
                 	.CSEG
                 _admin:
                 ; .FSTART _admin
000259 d242      	RCALL SUBOPT_0x0
                 ; 0000 0105 // action on interrupt
                 ; 0000 0106 char enteredPC[4];
                 ; 0000 0107 char enteredStudentID[4];
                 ; 0000 0108 char enteredNewPC[4];
                 ; 0000 0109 User student;
                 ; 0000 010A User admin;
                 ; 0000 010B unsigned int adminPCAddress = 0;
                 ; 0000 010C unsigned int address = 0;
                 ; 0000 010D int userFound = 0;
                 ; 0000 010E int i;
                 ; 0000 010F 
                 ; 0000 0110 for (i = 0; i < sizeof(users) / sizeof(users[0]); ++i)
00025a 97aa      	SBIW R28,42
00025b d24e      	RCALL SUBOPT_0x1
                 ;	enteredPC -> Y+44
                 ;	enteredStudentID -> Y+40
                 ;	enteredNewPC -> Y+36
                 ;	student -> Y+22
                 ;	admin -> Y+8
                 ;	adminPCAddress -> R16,R17
                 ;	address -> R18,R19
                 ;	userFound -> R20,R21
                 ;	i -> Y+6
                +
00025c e040     +LDI R20 , LOW ( 0 )
00025d e050     +LDI R21 , HIGH ( 0 )
                 	__GETWRN 20,21,0
00025e e0e0      	LDI  R30,LOW(0)
00025f 83ee      	STD  Y+6,R30
000260 83ef      	STD  Y+6+1,R30
                 _0x38:
000261 81ae      	LDD  R26,Y+6
000262 81bf      	LDD  R27,Y+6+1
000263 9715      	SBIW R26,5
000264 f51c      	BRGE _0x39
                 ; 0000 0111 {
                 ; 0000 0112 EE_ReadString(address, admin.name, sizeof(users[i].name));
000265 933a      	ST   -Y,R19
000266 932a      	ST   -Y,R18
000267 01fe      	MOVW R30,R28
000268 963a      	ADIW R30,10
000269 d27d      	RCALL SUBOPT_0xC
                 ; 0000 0113 if (strcmp(admin.name, "Prof") == 0)
00026a 01fe      	MOVW R30,R28
00026b 9638      	ADIW R30,8
00026c 93fa      	ST   -Y,R31
00026d 93ea      	ST   -Y,R30
                +
00026e e3a2     +LDI R26 , LOW ( _0x3B + ( 0 ) )
00026f e0b2     +LDI R27 , HIGH ( _0x3B + ( 0 ) )
                 	__POINTW2MN _0x3B,0
000270 d217      	RCALL _strcmp
000271 30e0      	CPI  R30,0
000272 f469      	BRNE _0x3A
                 ; 0000 0114 {
                 ; 0000 0115 address += sizeof(users[i].name);
000273 d278      	RCALL SUBOPT_0xD
                 ; 0000 0116 EE_ReadString(address, admin.id, sizeof(admin.id));
000274 01fe      	MOVW R30,R28
000275 9670      	ADIW R30,16
000276 d247      	RCALL SUBOPT_0x4
                 ; 0000 0117 address += sizeof(users[i].id);
                +
000277 5f2c     +SUBI R18 , LOW ( - 4 )
000278 4f3f     +SBCI R19 , HIGH ( - 4 )
                 	__ADDWRN 18,19,4
                 ; 0000 0118 EE_ReadString(address, admin.pc, sizeof(admin.pc));
000279 933a      	ST   -Y,R19
00027a 932a      	ST   -Y,R18
00027b 01fe      	MOVW R30,R28
00027c 9674      	ADIW R30,20
00027d d240      	RCALL SUBOPT_0x4
                 ; 0000 0119 adminPCAddress = address;
00027e 0189      	MOVW R16,R18
                 ; 0000 011A break;
00027f c008      	RJMP _0x39
                 ; 0000 011B }
                 ; 0000 011C address += sizeof(users[i].pc);
                 _0x3A:
                +
000280 5f2c     +SUBI R18 , LOW ( - 4 )
000281 4f3f     +SBCI R19 , HIGH ( - 4 )
                 	__ADDWRN 18,19,4
                 ; 0000 011D }
000282 81ee      	LDD  R30,Y+6
000283 81ff      	LDD  R31,Y+6+1
000284 9631      	ADIW R30,1
000285 83ee      	STD  Y+6,R30
000286 83ff      	STD  Y+6+1,R31
000287 cfd9      	RJMP _0x38
                 _0x39:
                 ; 0000 011E 
                 ; 0000 011F address = 0; // reset the address
                +
000288 e020     +LDI R18 , LOW ( 0 )
000289 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 ; 0000 0120 
                 ; 0000 0121 displayMessage("Enter Admin PC: ", 1000);
                +
00028a e3e7     +LDI R30 , LOW ( _0x3B + ( 5 ) )
00028b e0f2     +LDI R31 , HIGH ( _0x3B + ( 5 ) )
                 	__POINTW1MN _0x3B,5
00028c d223      	RCALL SUBOPT_0x2
                 ; 0000 0122 lcd_gotoxy(0, 1);
                 ; 0000 0123 
                 ; 0000 0124 if (enterValueWithKeypad(enteredPC))
00028d 01de      	MOVW R26,R28
00028e 969c      	ADIW R26,44
00028f d13e      	RCALL _enterValueWithKeypad
000290 9730      	SBIW R30,0
000291 f409      	BRNE PC+2
000292 c04f      	RJMP _0x3C
                 ; 0000 0125 {
                 ; 0000 0126 
                 ; 0000 0127 if (strcmp(admin.pc, enteredPC) == 0)
000293 01fe      	MOVW R30,R28
000294 9672      	ADIW R30,18
000295 93fa      	ST   -Y,R31
000296 93ea      	ST   -Y,R30
000297 01de      	MOVW R26,R28
000298 969e      	ADIW R26,46
000299 d1ee      	RCALL _strcmp
00029a 30e0      	CPI  R30,0
00029b f009      	BREQ PC+2
00029c c045      	RJMP _0x3D
                 ; 0000 0128 {
                 ; 0000 0129 displayMessage("Enter Student ID: ", 1000);
                +
00029d e4e8     +LDI R30 , LOW ( _0x3B + ( 22 ) )
00029e e0f2     +LDI R31 , HIGH ( _0x3B + ( 22 ) )
                 	__POINTW1MN _0x3B,22
00029f d238      	RCALL SUBOPT_0x9
                 ; 0000 012A 
                 ; 0000 012B if (enterValueWithKeypad(enteredStudentID))
0002a0 01de      	MOVW R26,R28
0002a1 9698      	ADIW R26,40
0002a2 d12b      	RCALL _enterValueWithKeypad
0002a3 9730      	SBIW R30,0
0002a4 f1e9      	BREQ _0x3E
                 ; 0000 012C {
                 ; 0000 012D int j;
                 ; 0000 012E for (j = 0; j < sizeof(users) / sizeof(users[0]); ++j)
0002a5 9722      	SBIW R28,2
                 ;	enteredPC -> Y+46
                 ;	enteredStudentID -> Y+42
                 ;	enteredNewPC -> Y+38
                 ;	student -> Y+24
                 ;	admin -> Y+10
                 ;	i -> Y+8
                 ;	j -> Y+0
0002a6 e0e0      	LDI  R30,LOW(0)
0002a7 83e8      	STD  Y+0,R30
0002a8 83e9      	STD  Y+0+1,R30
                 _0x40:
0002a9 81a8      	LD   R26,Y
0002aa 81b9      	LDD  R27,Y+1
0002ab 9715      	SBIW R26,5
0002ac f5a4      	BRGE _0x41
                 ; 0000 012F {
                 ; 0000 0130 address += sizeof(users[j].name);
0002ad d23e      	RCALL SUBOPT_0xD
                 ; 0000 0131 EE_ReadString(address, student.id, sizeof(student.id));
0002ae 01fe      	MOVW R30,R28
0002af 96b0      	ADIW R30,32
0002b0 d20d      	RCALL SUBOPT_0x4
                 ; 0000 0132 address += sizeof(users[j].id);
                +
0002b1 5f2c     +SUBI R18 , LOW ( - 4 )
0002b2 4f3f     +SBCI R19 , HIGH ( - 4 )
                 	__ADDWRN 18,19,4
                 ; 0000 0133 if (strcmp(student.id, enteredStudentID) == 0)
0002b3 01fe      	MOVW R30,R28
0002b4 967e      	ADIW R30,30
0002b5 93fa      	ST   -Y,R31
0002b6 93ea      	ST   -Y,R30
0002b7 d239      	RCALL SUBOPT_0xE
0002b8 f479      	BRNE _0x42
                 ; 0000 0134 {
                 ; 0000 0135 displayMessage("Enter student's new PC: ", 1000);
                +
0002b9 e5eb     +LDI R30 , LOW ( _0x3B + ( 41 ) )
0002ba e0f2     +LDI R31 , HIGH ( _0x3B + ( 41 ) )
                 	__POINTW1MN _0x3B,41
0002bb d21c      	RCALL SUBOPT_0x9
                 ; 0000 0136 if (enterValueWithKeypad(enteredNewPC))
0002bc d239      	RCALL SUBOPT_0xF
0002bd f049      	BREQ _0x43
                 ; 0000 0137 {
                 ; 0000 0138 // Set the new pc for this student, address is for student PC
                 ; 0000 0139 EE_WriteString(address, enteredNewPC);
0002be 933a      	ST   -Y,R19
0002bf 932a      	ST   -Y,R18
0002c0 01de      	MOVW R26,R28
0002c1 9698      	ADIW R26,40
0002c2 d0aa      	RCALL _EE_WriteString
                 ; 0000 013A displayMessage("Student PC is stored", 3000);
                +
0002c3 e7e4     +LDI R30 , LOW ( _0x3B + ( 66 ) )
0002c4 e0f2     +LDI R31 , HIGH ( _0x3B + ( 66 ) )
                 	__POINTW1MN _0x3B,66
0002c5 d235      	RCALL SUBOPT_0x10
                 ; 0000 013B userFound = 1;
                 ; 0000 013C break;
0002c6 c01a      	RJMP _0x41
                 ; 0000 013D }
                 ; 0000 013E }
                 _0x43:
                 ; 0000 013F else if (strcmp(admin.id, enteredStudentID) == 0)
0002c7 c011      	RJMP _0x44
                 _0x42:
0002c8 d20a      	RCALL SUBOPT_0x8
0002c9 d227      	RCALL SUBOPT_0xE
0002ca f471      	BRNE _0x45
                 ; 0000 0140 {
                 ; 0000 0141 displayMessage("Enter your new PC: ", 1000);
                +
0002cb e8e9     +LDI R30 , LOW ( _0x3B + ( 87 ) )
0002cc e0f2     +LDI R31 , HIGH ( _0x3B + ( 87 ) )
                 	__POINTW1MN _0x3B,87
0002cd d1e2      	RCALL SUBOPT_0x2
                 ; 0000 0142 lcd_gotoxy(0, 1);
                 ; 0000 0143 if (enterValueWithKeypad(enteredNewPC))
0002ce d227      	RCALL SUBOPT_0xF
0002cf f049      	BREQ _0x46
                 ; 0000 0144 {
                 ; 0000 0145 // Set the new pc for this user (Admin),  address is for admin PC
                 ; 0000 0146 EE_WriteString(adminPCAddress, enteredNewPC);
0002d0 931a      	ST   -Y,R17
0002d1 930a      	ST   -Y,R16
0002d2 01de      	MOVW R26,R28
0002d3 9698      	ADIW R26,40
0002d4 d098      	RCALL _EE_WriteString
                 ; 0000 0147 displayMessage("Your PC is stored", 3000);
                +
0002d5 e9ed     +LDI R30 , LOW ( _0x3B + ( 107 ) )
0002d6 e0f2     +LDI R31 , HIGH ( _0x3B + ( 107 ) )
                 	__POINTW1MN _0x3B,107
0002d7 d223      	RCALL SUBOPT_0x10
                 ; 0000 0148 userFound = 1;
                 ; 0000 0149 break;
0002d8 c008      	RJMP _0x41
                 ; 0000 014A }
                 ; 0000 014B }
                 _0x46:
                 ; 0000 014C address += sizeof(users[i].pc);
                 _0x45:
                 _0x44:
                +
0002d9 5f2c     +SUBI R18 , LOW ( - 4 )
0002da 4f3f     +SBCI R19 , HIGH ( - 4 )
                 	__ADDWRN 18,19,4
                 ; 0000 014D }
0002db 81e8      	LD   R30,Y
0002dc 81f9      	LDD  R31,Y+1
0002dd 9631      	ADIW R30,1
0002de 83e8      	ST   Y,R30
0002df 83f9      	STD  Y+1,R31
0002e0 cfc8      	RJMP _0x40
                 _0x41:
                 ; 0000 014E }
0002e1 9622      	ADIW R28,2
                 ; 0000 014F }
                 _0x3E:
                 ; 0000 0150 }
                 _0x3D:
                 ; 0000 0151 
                 ; 0000 0152 if (!userFound)
                 _0x3C:
0002e2 2e04      	MOV  R0,R20
0002e3 2a05      	OR   R0,R21
0002e4 f449      	BRNE _0x47
                 ; 0000 0153 {
                 ; 0000 0154 displayMessage("Contact Admin", 3000);
                +
0002e5 eaef     +LDI R30 , LOW ( _0x3B + ( 125 ) )
0002e6 e0f2     +LDI R31 , HIGH ( _0x3B + ( 125 ) )
                 	__POINTW1MN _0x3B,125
0002e7 93fa      	ST   -Y,R31
0002e8 93ea      	ST   -Y,R30
0002e9 eba8      	LDI  R26,LOW(3000)
0002ea e0bb      	LDI  R27,HIGH(3000)
0002eb d0d9      	RCALL _displayMessage
                 ; 0000 0155 // Two peeps alarm
                 ; 0000 0156 generateTone();
0002ec d106      	RCALL _generateTone
                 ; 0000 0157 generateTone();
0002ed d105      	RCALL _generateTone
                 ; 0000 0158 }
                 ; 0000 0159 delay_ms(5000);
                 _0x47:
0002ee e8a8      	LDI  R26,LOW(5000)
0002ef e1b3      	LDI  R27,HIGH(5000)
0002f0 d236      	RCALL _delay_ms
                 ; 0000 015A lcd_clear();
0002f1 d13f      	RCALL _lcd_clear
                 ; 0000 015B }
0002f2 d22d      	RCALL __LOADLOCR6
0002f3 96e0      	ADIW R28,48
                 _0xB2:
0002f4 91e9      	LD   R30,Y+
0002f5 bfef      	OUT  SREG,R30
0002f6 91f9      	LD   R31,Y+
0002f7 91e9      	LD   R30,Y+
0002f8 91b9      	LD   R27,Y+
0002f9 91a9      	LD   R26,Y+
0002fa 9199      	LD   R25,Y+
0002fb 9189      	LD   R24,Y+
0002fc 9179      	LD   R23,Y+
0002fd 9169      	LD   R22,Y+
0002fe 90f9      	LD   R15,Y+
0002ff 9019      	LD   R1,Y+
000300 9009      	LD   R0,Y+
000301 9518      	RETI
                 ; .FEND
                 
                 	.DSEG
                 _0x3B:
000232           	.BYTE 0x8B
                 ;char keypad()
                 ; 0000 015E {
                 
                 	.CSEG
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 015F while (1)
                 _0x48:
                 ; 0000 0160 {
                 ; 0000 0161 PORTC .0 = 0;
000302 98a8      	CBI  0x15,0
                 ; 0000 0162 PORTC .1 = 1;
000303 9aa9      	SBI  0x15,1
                 ; 0000 0163 PORTC .2 = 1;
000304 9aaa      	SBI  0x15,2
                 ; 0000 0164 
                 ; 0000 0165 
                 ; 0000 0166 switch (PINC)
000305 b3e3      	IN   R30,0x13
                 ; 0000 0167 {
                 ; 0000 0168 case 0b11110110:
000306 3fe6      	CPI  R30,LOW(0xF6)
000307 f421      	BRNE _0x54
                 ; 0000 0169 while (PINC .3 == 0);
                 _0x55:
000308 9b9b      	SBIS 0x13,3
000309 cffe      	RJMP _0x55
                 ; 0000 016A return 1;
00030a e0e1      	LDI  R30,LOW(1)
00030b 9508      	RET
                 ; 0000 016B case 0b11101110:
                 _0x54:
00030c 3eee      	CPI  R30,LOW(0xEE)
00030d f421      	BRNE _0x58
                 ; 0000 016C while (PINC .4 == 0);
                 _0x59:
00030e 9b9c      	SBIS 0x13,4
00030f cffe      	RJMP _0x59
                 ; 0000 016D return 4;
000310 e0e4      	LDI  R30,LOW(4)
000311 9508      	RET
                 ; 0000 016E case 0b11011110:
                 _0x58:
000312 3dee      	CPI  R30,LOW(0xDE)
000313 f421      	BRNE _0x5C
                 ; 0000 016F while (PINC .5 == 0);
                 _0x5D:
000314 9b9d      	SBIS 0x13,5
000315 cffe      	RJMP _0x5D
                 ; 0000 0170 return 7;
000316 e0e7      	LDI  R30,LOW(7)
000317 9508      	RET
                 ; 0000 0171 case 0b10111110:
                 _0x5C:
000318 3bee      	CPI  R30,LOW(0xBE)
000319 f421      	BRNE _0x53
                 ; 0000 0172 while (PINC .6 == 0);
                 _0x61:
00031a 9b9e      	SBIS 0x13,6
00031b cffe      	RJMP _0x61
                 ; 0000 0173 return '*';
00031c e2ea      	LDI  R30,LOW(42)
00031d 9508      	RET
                 ; 0000 0174 }
                 _0x53:
                 ; 0000 0175 
                 ; 0000 0176 PORTC .0 = 1;
00031e 9aa8      	SBI  0x15,0
                 ; 0000 0177 PORTC .1 = 0;
00031f 98a9      	CBI  0x15,1
                 ; 0000 0178 PORTC .2 = 1;
000320 9aaa      	SBI  0x15,2
                 ; 0000 0179 
                 ; 0000 017A switch (PINC)
000321 b3e3      	IN   R30,0x13
                 ; 0000 017B {
                 ; 0000 017C case 0b11110101:
000322 3fe5      	CPI  R30,LOW(0xF5)
000323 f421      	BRNE _0x6D
                 ; 0000 017D while (PINC .3 == 0);
                 _0x6E:
000324 9b9b      	SBIS 0x13,3
000325 cffe      	RJMP _0x6E
                 ; 0000 017E return 2;
000326 e0e2      	LDI  R30,LOW(2)
000327 9508      	RET
                 ; 0000 017F case 0b11101101:
                 _0x6D:
000328 3eed      	CPI  R30,LOW(0xED)
000329 f421      	BRNE _0x71
                 ; 0000 0180 while (PINC .4 == 0);
                 _0x72:
00032a 9b9c      	SBIS 0x13,4
00032b cffe      	RJMP _0x72
                 ; 0000 0181 return 5;
00032c e0e5      	LDI  R30,LOW(5)
00032d 9508      	RET
                 ; 0000 0182 case 0b11011101:
                 _0x71:
00032e 3ded      	CPI  R30,LOW(0xDD)
00032f f421      	BRNE _0x75
                 ; 0000 0183 while (PINC .5 == 0);
                 _0x76:
000330 9b9d      	SBIS 0x13,5
000331 cffe      	RJMP _0x76
                 ; 0000 0184 return 8;
000332 e0e8      	LDI  R30,LOW(8)
000333 9508      	RET
                 ; 0000 0185 case 0b10111101:
                 _0x75:
000334 3bed      	CPI  R30,LOW(0xBD)
000335 f421      	BRNE _0x6C
                 ; 0000 0186 while (PINC .6 == 0);
                 _0x7A:
000336 9b9e      	SBIS 0x13,6
000337 cffe      	RJMP _0x7A
                 ; 0000 0187 return 0;
000338 e0e0      	LDI  R30,LOW(0)
000339 9508      	RET
                 ; 0000 0188 }
                 _0x6C:
                 ; 0000 0189 
                 ; 0000 018A PORTC .0 = 1;
00033a 9aa8      	SBI  0x15,0
                 ; 0000 018B PORTC .1 = 1;
00033b 9aa9      	SBI  0x15,1
                 ; 0000 018C PORTC .2 = 0;
00033c 98aa      	CBI  0x15,2
                 ; 0000 018D 
                 ; 0000 018E switch (PINC)
00033d b3e3      	IN   R30,0x13
                 ; 0000 018F {
                 ; 0000 0190 case 0b11110011:
00033e 3fe3      	CPI  R30,LOW(0xF3)
00033f f421      	BRNE _0x86
                 ; 0000 0191 while (PINC .3 == 0);
                 _0x87:
000340 9b9b      	SBIS 0x13,3
000341 cffe      	RJMP _0x87
                 ; 0000 0192 return 3;
000342 e0e3      	LDI  R30,LOW(3)
000343 9508      	RET
                 ; 0000 0193 case 0b11101011:
                 _0x86:
000344 3eeb      	CPI  R30,LOW(0xEB)
000345 f421      	BRNE _0x8A
                 ; 0000 0194 while (PINC .4 == 0);
                 _0x8B:
000346 9b9c      	SBIS 0x13,4
000347 cffe      	RJMP _0x8B
                 ; 0000 0195 return 6;
000348 e0e6      	LDI  R30,LOW(6)
000349 9508      	RET
                 ; 0000 0196 case 0b11011011:
                 _0x8A:
00034a 3deb      	CPI  R30,LOW(0xDB)
00034b f421      	BRNE _0x8E
                 ; 0000 0197 while (PINC .5 == 0);
                 _0x8F:
00034c 9b9d      	SBIS 0x13,5
00034d cffe      	RJMP _0x8F
                 ; 0000 0198 return 9;
00034e e0e9      	LDI  R30,LOW(9)
00034f 9508      	RET
                 ; 0000 0199 case 0b10111011:
                 _0x8E:
000350 3beb      	CPI  R30,LOW(0xBB)
000351 f421      	BRNE _0x85
                 ; 0000 019A while (PINC .6 == 0);
                 _0x93:
000352 9b9e      	SBIS 0x13,6
000353 cffe      	RJMP _0x93
                 ; 0000 019B return 11;
000354 e0eb      	LDI  R30,LOW(11)
000355 9508      	RET
                 ; 0000 019C }
                 _0x85:
                 ; 0000 019D }
000356 cfab      	RJMP _0x48
                 ; 0000 019E }
                 ; .FEND
                 ;unsigned char EE_Read(unsigned int address)
                 ; 0000 01A1 {
                 _EE_Read:
                 ; .FSTART _EE_Read
                 ; 0000 01A2 while (EECR .1 == 1); // Wait till EEPROM is ready
000357 931a      	ST   -Y,R17
000358 930a      	ST   -Y,R16
000359 018d      	MOVW R16,R26
                 ;	address -> R16,R17
                 _0x96:
00035a 99e1      	SBIC 0x1C,1
00035b cffe      	RJMP _0x96
                 ; 0000 01A3 EEAR = address;       // Prepare the address you want to read from
                +
00035c bb1f     +OUT 30 + 1 , R17
00035d bb0e     +OUT 30 , R16
                 	__OUTWR 16,17,30
                 ; 0000 01A4 EECR .0 = 1;          // Execute read command
00035e 9ae0      	SBI  0x1C,0
                 ; 0000 01A5 return EEDR;
00035f b3ed      	IN   R30,0x1D
000360 c08f      	RJMP _0x2080003
                 ; 0000 01A6 }
                 ; .FEND
                 ;void EE_Write(unsigned int address, unsigned char data)
                 ; 0000 01A9 {
                 _EE_Write:
                 ; .FSTART _EE_Write
                 ; 0000 01AA while (EECR .1 == 1); // Wait till EEPROM is ready
000361 d1b9      	RCALL __SAVELOCR4
000362 2f1a      	MOV  R17,R26
                +
000363 812c     +LDD R18 , Y + 4
000364 813d     +LDD R19 , Y + 4 + 1
                 	__GETWRS 18,19,4
                 ;	address -> R18,R19
                 ;	data -> R17
                 _0x9B:
000365 99e1      	SBIC 0x1C,1
000366 cffe      	RJMP _0x9B
                 ; 0000 01AB EEAR = address;       // Prepare the address you want to read from
                +
000367 bb3f     +OUT 30 + 1 , R19
000368 bb2e     +OUT 30 , R18
                 	__OUTWR 18,19,30
                 ; 0000 01AC EEDR = data;          // Prepare the data you want to write in the address above
000369 bb1d      	OUT  0x1D,R17
                 ; 0000 01AD EECR .2 = 1;          // Master write enable
00036a 9ae2      	SBI  0x1C,2
                 ; 0000 01AE EECR .1 = 1;          // Write Enable
00036b 9ae1      	SBI  0x1C,1
                 ; 0000 01AF }
00036c c05e      	RJMP _0x2080004
                 ; .FEND
                 ;void EE_WriteString(unsigned int address, const char *str)
                 ; 0000 01B2 {
                 _EE_WriteString:
                 ; .FSTART _EE_WriteString
                 ; 0000 01B3 // Write each character of the string to EEPROM
                 ; 0000 01B4 while (*str)
00036d d195      	RCALL SUBOPT_0x11
                 ;	address -> R18,R19
                 ;	*str -> R16,R17
                 _0xA2:
00036e 01d8      	MOVW R26,R16
00036f 91ec      	LD   R30,X
000370 30e0      	CPI  R30,0
000371 f051      	BREQ _0xA4
                 ; 0000 01B5 EE_Write(address++, *str++);
000372 01f9      	MOVW R30,R18
                +
000373 5f2f     +SUBI R18 , LOW ( - 1 )
000374 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000375 93fa      	ST   -Y,R31
000376 93ea      	ST   -Y,R30
                +
000377 5f0f     +SUBI R16 , LOW ( - 1 )
000378 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000379 91ac      	LD   R26,X
00037a dfe6      	RCALL _EE_Write
00037b cff2      	RJMP _0xA2
                 _0xA4:
                 ; 0000 01B7 EE_Write(address, '\0');
00037c 933a      	ST   -Y,R19
00037d 932a      	ST   -Y,R18
00037e e0a0      	LDI  R26,LOW(0)
00037f dfe1      	RCALL _EE_Write
                 ; 0000 01B8 }
000380 c04a      	RJMP _0x2080004
                 ; .FEND
                 ;void EE_ReadString(unsigned int address, char *buffer, unsigned int length)
                 ; 0000 01BB {
                 _EE_ReadString:
                 ; .FSTART _EE_ReadString
                 ; 0000 01BC unsigned int i;
                 ; 0000 01BD for (i = 0; i < length; ++i)
000381 d197      	RCALL __SAVELOCR6
000382 019d      	MOVW R18,R26
                +
000383 814e     +LDD R20 , Y + 6
000384 815f     +LDD R21 , Y + 6 + 1
                 	__GETWRS 20,21,6
                 ;	address -> Y+8
                 ;	*buffer -> R20,R21
                 ;	length -> R18,R19
                 ;	i -> R16,R17
                +
000385 e000     +LDI R16 , LOW ( 0 )
000386 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0xA6:
                +
000387 1702     +CP R16 , R18
000388 0713     +CPC R17 , R19
                 	__CPWRR 16,17,18,19
000389 f4b0      	BRSH _0xA7
                 ; 0000 01BE {
                 ; 0000 01BF buffer[i] = EE_Read(address + i);
00038a 01f8      	MOVW R30,R16
00038b 0fe4      	ADD  R30,R20
00038c 1ff5      	ADC  R31,R21
00038d 93ff      	PUSH R31
00038e 93ef      	PUSH R30
00038f 85a8      	LDD  R26,Y+8
000390 85b9      	LDD  R27,Y+8+1
000391 0fa0      	ADD  R26,R16
000392 1fb1      	ADC  R27,R17
000393 dfc3      	RCALL _EE_Read
000394 91af      	POP  R26
000395 91bf      	POP  R27
000396 93ec      	ST   X,R30
                 ; 0000 01C0 if (buffer[i] == '\0')
000397 01f8      	MOVW R30,R16
000398 0fe4      	ADD  R30,R20
000399 1ff5      	ADC  R31,R21
00039a 81e0      	LD   R30,Z
00039b 30e0      	CPI  R30,0
00039c f019      	BREQ _0xA7
                 ; 0000 01C1 break;
                 ; 0000 01C2 }
                +
00039d 5f0f     +SUBI R16 , LOW ( - 1 )
00039e 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00039f cfe7      	RJMP _0xA6
                 _0xA7:
                 ; 0000 01C3 }
0003a0 d17f      	RCALL __LOADLOCR6
0003a1 962a      	ADIW R28,10
0003a2 9508      	RET
                 ; .FEND
                 ;void initializeUsers()
                 ; 0000 01C6 {
                 _initializeUsers:
                 ; .FSTART _initializeUsers
                 ; 0000 01C7 unsigned int address = 0;
                 ; 0000 01C8 int i;
                 ; 0000 01C9 for (i = 0; i < sizeof(users) / sizeof(users[0]); ++i)
0003a3 d177      	RCALL __SAVELOCR4
                 ;	address -> R16,R17
                 ;	i -> R18,R19
                +
0003a4 e000     +LDI R16 , LOW ( 0 )
0003a5 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0003a6 e020     +LDI R18 , LOW ( 0 )
0003a7 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0xAA:
                +
0003a8 3025     +CPI R18 , LOW ( 5 )
0003a9 e0e0     +LDI R30 , HIGH ( 5 )
0003aa 073e     +CPC R19 , R30
                 	__CPWRN 18,19,5
0003ab f4c4      	BRGE _0xAB
                 ; 0000 01CA {
                 ; 0000 01CB EE_WriteString(address, users[i].name);
0003ac 931a      	ST   -Y,R17
0003ad 930a      	ST   -Y,R16
0003ae d159      	RCALL SUBOPT_0x12
0003af 54e3      	SUBI R30,LOW(-_users)
0003b0 4ffd      	SBCI R31,HIGH(-_users)
0003b1 01df      	MOVW R26,R30
0003b2 dfba      	RCALL _EE_WriteString
                 ; 0000 01CC address += sizeof(users[i].name);
0003b3 d105      	RCALL SUBOPT_0x3
                 ; 0000 01CD 
                 ; 0000 01CE EE_WriteString(address, users[i].id);
0003b4 d153      	RCALL SUBOPT_0x12
                +
0003b5 53ed     +SUBI R30 , LOW ( - _users - ( 6 ) )
0003b6 4ffd     +SBCI R31 , HIGH ( - _users - ( 6 ) )
                 	__ADDW1MN _users,6
0003b7 01df      	MOVW R26,R30
0003b8 dfb4      	RCALL _EE_WriteString
                 ; 0000 01CF address += sizeof(users[i].id);
0003b9 d109      	RCALL SUBOPT_0x5
                 ; 0000 01D0 
                 ; 0000 01D1 EE_WriteString(address, users[i].pc);
0003ba d14d      	RCALL SUBOPT_0x12
                +
0003bb 53e9     +SUBI R30 , LOW ( - _users - ( 10 ) )
0003bc 4ffd     +SBCI R31 , HIGH ( - _users - ( 10 ) )
                 	__ADDW1MN _users,10
0003bd 01df      	MOVW R26,R30
0003be dfae      	RCALL _EE_WriteString
                 ; 0000 01D2 address += sizeof(users[i].pc);
                +
0003bf 5f0c     +SUBI R16 , LOW ( - 4 )
0003c0 4f1f     +SBCI R17 , HIGH ( - 4 )
                 	__ADDWRN 16,17,4
                 ; 0000 01D3 }
                +
0003c1 5f2f     +SUBI R18 , LOW ( - 1 )
0003c2 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
0003c3 cfe4      	RJMP _0xAA
                 _0xAB:
                 ; 0000 01D4 }
0003c4 c095      	RJMP _0x2080002
                 ; .FEND
                 ;void displayMessage(char *message, int delay_ms_value)
                 ; 0000 01D7 {
                 _displayMessage:
                 ; .FSTART _displayMessage
                 ; 0000 01D8 lcd_clear();
0003c5 d13d      	RCALL SUBOPT_0x11
                 ;	*message -> R18,R19
                 ;	delay_ms_value -> R16,R17
0003c6 d06a      	RCALL _lcd_clear
                 ; 0000 01D9 lcd_puts(message);
0003c7 01d9      	MOVW R26,R18
0003c8 d085      	RCALL _lcd_puts
                 ; 0000 01DA delay_ms(delay_ms_value);
0003c9 01d8      	MOVW R26,R16
0003ca d15c      	RCALL _delay_ms
                 ; 0000 01DB }
                 _0x2080004:
0003cb d156      	RCALL __LOADLOCR4
0003cc 9626      	ADIW R28,6
0003cd 9508      	RET
                 ; .FEND
                 ;int enterValueWithKeypad(char *buffer)
                 ; 0000 01DE {
                 _enterValueWithKeypad:
                 ; .FSTART _enterValueWithKeypad
                 ; 0000 01DF buffer[0] = keypad() + '0';
0003ce 931a      	ST   -Y,R17
0003cf 930a      	ST   -Y,R16
0003d0 018d      	MOVW R16,R26
                 ;	*buffer -> R16,R17
0003d1 df30      	RCALL _keypad
0003d2 5de0      	SUBI R30,-LOW(48)
0003d3 01d8      	MOVW R26,R16
0003d4 93ec      	ST   X,R30
                 ; 0000 01E0 lcd_putchar(buffer[0]);
0003d5 91ac      	LD   R26,X
0003d6 d064      	RCALL _lcd_putchar
                 ; 0000 01E1 buffer[1] = keypad() + '0';
0003d7 df2a      	RCALL _keypad
0003d8 5de0      	SUBI R30,-LOW(48)
                +
0003d9 01d8     +MOVW R26 , R16
0003da 9611     +ADIW R26 , 1
0003db 93ec     +ST X , R30
                 	__PUTB1RNS 16,1
                 ; 0000 01E2 lcd_putchar(buffer[1]);
0003dc 01f8      	MOVW R30,R16
0003dd 81a1      	LDD  R26,Z+1
0003de d05c      	RCALL _lcd_putchar
                 ; 0000 01E3 buffer[2] = keypad() + '0';
0003df df22      	RCALL _keypad
0003e0 5de0      	SUBI R30,-LOW(48)
                +
0003e1 01d8     +MOVW R26 , R16
0003e2 9612     +ADIW R26 , 2
0003e3 93ec     +ST X , R30
                 	__PUTB1RNS 16,2
                 ; 0000 01E4 lcd_putchar(buffer[2]);
0003e4 01f8      	MOVW R30,R16
0003e5 81a2      	LDD  R26,Z+2
0003e6 d054      	RCALL _lcd_putchar
                 ; 0000 01E5 buffer[3] = '\0';  // Null-terminate the string
0003e7 01f8      	MOVW R30,R16
0003e8 9633      	ADIW R30,3
0003e9 e0a0      	LDI  R26,LOW(0)
0003ea 83a0      	STD  Z+0,R26
                 ; 0000 01E6 
                 ; 0000 01E7 delay_ms(1000);
0003eb eea8      	LDI  R26,LOW(1000)
0003ec e0b3      	LDI  R27,HIGH(1000)
0003ed d139      	RCALL _delay_ms
                 ; 0000 01E8 
                 ; 0000 01E9 return 1;  // Return a non-zero value to indicate success
0003ee e0e1      	LDI  R30,LOW(1)
0003ef e0f0      	LDI  R31,HIGH(1)
                 _0x2080003:
0003f0 9109      	LD   R16,Y+
0003f1 9119      	LD   R17,Y+
0003f2 9508      	RET
                 ; 0000 01EA }
                 ; .FEND
                 ;void generateTone()
                 ; 0000 01ED {
                 _generateTone:
                 ; .FSTART _generateTone
                 ; 0000 01EE PORTD.7 = 1;  // Set PD7 HIGH
0003f3 9a97      	SBI  0x12,7
                 ; 0000 01EF delay_ms(500);  // Adjust duration as needed
0003f4 efa4      	LDI  R26,LOW(500)
0003f5 e0b1      	LDI  R27,HIGH(500)
0003f6 d130      	RCALL _delay_ms
                 ; 0000 01F0 PORTD.7 = 0;  // Set PD7 LOW
0003f7 9897      	CBI  0x12,7
                 ; 0000 01F1 delay_ms(500);  // Pause between tones
0003f8 efa4      	LDI  R26,LOW(500)
0003f9 e0b1      	LDI  R27,HIGH(500)
0003fa d12c      	RCALL _delay_ms
                 ; 0000 01F2 PORTD.7 = 1;  // Set PD7 HIGH (optional: restore to high for a brief moment)
0003fb 9a97      	SBI  0x12,7
                 ; 0000 01F3 }
0003fc 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
0003fd 931a      	ST   -Y,R17
0003fe 2f1a      	MOV  R17,R26
0003ff b3eb      	IN   R30,0x1B
000400 70ef      	ANDI R30,LOW(0xF)
000401 2fae      	MOV  R26,R30
000402 2fe1      	MOV  R30,R17
000403 7fe0      	ANDI R30,LOW(0xF0)
000404 2bea      	OR   R30,R26
000405 bbeb      	OUT  0x1B,R30
                +
000406 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000407 958a     +DEC R24
000408 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000409 9ada      	SBI  0x1B,2
                +
00040a e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00040b 958a     +DEC R24
00040c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00040d 98da      	CBI  0x1B,2
                +
00040e e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00040f 958a     +DEC R24
000410 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000411 c074      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000412 93aa      	ST   -Y,R26
000413 81a8      	LD   R26,Y
000414 dfe8      	RCALL __lcd_write_nibble_G100
000415 81e8          ld    r30,y
000416 95e2          swap  r30
000417 83e8          st    y,r30
000418 81a8      	LD   R26,Y
000419 dfe3      	RCALL __lcd_write_nibble_G100
                +
00041a e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00041b 958a     +DEC R24
00041c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00041d 9621      	ADIW R28,1
00041e 9508      	RET
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00041f 931a      	ST   -Y,R17
000420 930a      	ST   -Y,R16
000421 2f1a      	MOV  R17,R26
000422 810a      	LDD  R16,Y+2
000423 2fe1      	MOV  R30,R17
000424 e0f0      	LDI  R31,0
000425 5fed      	SUBI R30,LOW(-__base_y_G100)
000426 4ffc      	SBCI R31,HIGH(-__base_y_G100)
000427 81e0      	LD   R30,Z
000428 0fe0      	ADD  R30,R16
000429 2fae      	MOV  R26,R30
00042a dfe7      	RCALL __lcd_write_data
00042b 2e50      	MOV  R5,R16
00042c 2e41      	MOV  R4,R17
00042d 8119      	LDD  R17,Y+1
00042e 8108      	LDD  R16,Y+0
00042f 9623      	ADIW R28,3
000430 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000431 e0a2      	LDI  R26,LOW(2)
000432 d0db      	RCALL SUBOPT_0x13
000433 e0ac      	LDI  R26,LOW(12)
000434 dfdd      	RCALL __lcd_write_data
000435 e0a1      	LDI  R26,LOW(1)
000436 d0d7      	RCALL SUBOPT_0x13
000437 e0e0      	LDI  R30,LOW(0)
000438 2e4e      	MOV  R4,R30
000439 2e5e      	MOV  R5,R30
00043a 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00043b 931a      	ST   -Y,R17
00043c 2f1a      	MOV  R17,R26
00043d 301a      	CPI  R17,10
00043e f011      	BREQ _0x2000005
00043f 1457      	CP   R5,R7
000440 f038      	BRLO _0x2000004
                 _0x2000005:
000441 e0e0      	LDI  R30,LOW(0)
000442 93ea      	ST   -Y,R30
000443 9443      	INC  R4
000444 2da4      	MOV  R26,R4
000445 dfd9      	RCALL _lcd_gotoxy
000446 301a      	CPI  R17,10
000447 f1f1      	BREQ _0x2080001
                 _0x2000004:
000448 9453      	INC  R5
000449 9ad8      	SBI  0x1B,0
00044a 2fa1      	MOV  R26,R17
00044b dfc6      	RCALL __lcd_write_data
00044c 98d8      	CBI  0x1B,0
00044d c038      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00044e d0cc      	RCALL __SAVELOCR4
00044f 019d      	MOVW R18,R26
                 _0x2000008:
000450 01d9      	MOVW R26,R18
                +
000451 5f2f     +SUBI R18 , LOW ( - 1 )
000452 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000453 91ec      	LD   R30,X
000454 2f1e      	MOV  R17,R30
000455 30e0      	CPI  R30,0
000456 f019      	BREQ _0x200000A
000457 2fa1      	MOV  R26,R17
000458 dfe2      	RCALL _lcd_putchar
000459 cff6      	RJMP _0x2000008
                 _0x200000A:
                 _0x2080002:
00045a d0c7      	RCALL __LOADLOCR4
00045b 9624      	ADIW R28,4
00045c 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00045d 931a      	ST   -Y,R17
00045e 2f1a      	MOV  R17,R26
00045f b3ea      	IN   R30,0x1A
000460 6fe0      	ORI  R30,LOW(0xF0)
000461 bbea      	OUT  0x1A,R30
000462 9ad2      	SBI  0x1A,2
000463 9ad0      	SBI  0x1A,0
000464 9ad1      	SBI  0x1A,1
000465 98da      	CBI  0x1B,2
000466 98d8      	CBI  0x1B,0
000467 98d9      	CBI  0x1B,1
000468 2e71      	MOV  R7,R17
000469 2fe1      	MOV  R30,R17
00046a 58e0      	SUBI R30,-LOW(128)
                +
00046b 93e0 0305+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00046d 2fe1      	MOV  R30,R17
00046e 54e0      	SUBI R30,-LOW(192)
                +
00046f 93e0 0306+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000471 e1a4      	LDI  R26,LOW(20)
000472 e0b0      	LDI  R27,0
000473 d0b3      	RCALL _delay_ms
000474 d09d      	RCALL SUBOPT_0x14
000475 d09c      	RCALL SUBOPT_0x14
000476 d09b      	RCALL SUBOPT_0x14
000477 e2a0      	LDI  R26,LOW(32)
000478 df84      	RCALL __lcd_write_nibble_G100
                +
000479 ec88     +LDI R24 , LOW ( 200 )
00047a e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00047b 9701     +SBIW R24 , 1
00047c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00047d e2a8      	LDI  R26,LOW(40)
00047e df93      	RCALL __lcd_write_data
00047f e0a4      	LDI  R26,LOW(4)
000480 df91      	RCALL __lcd_write_data
000481 e8a5      	LDI  R26,LOW(133)
000482 df8f      	RCALL __lcd_write_data
000483 e0a6      	LDI  R26,LOW(6)
000484 df8d      	RCALL __lcd_write_data
000485 dfab      	RCALL _lcd_clear
                 _0x2080001:
000486 9119      	LD   R17,Y+
000487 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcmp:
                 ; .FSTART _strcmp
000488 93ba      	ST   -Y,R27
000489 93aa      	ST   -Y,R26
00048a 91e9          ld   r30,y+
00048b 91f9          ld   r31,y+
00048c 91a9          ld   r26,y+
00048d 91b9          ld   r27,y+
                 strcmp0:
00048e 916d          ld   r22,x+
00048f 9171          ld   r23,z+
000490 1767          cp   r22,r23
000491 f421          brne strcmp1
000492 2366          tst  r22
000493 f7d1          brne strcmp0
                 strcmp3:
000494 27ee          clr  r30
000495 9508          ret
                 strcmp1:
000496 1b67          sub  r22,r23
000497 f3e1          breq strcmp3
000498 e0e1          ldi  r30,1
000499 f408          brcc strcmp2
00049a 50e2          subi r30,2
                 strcmp2:
00049b 9508          ret
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _users:
0002bd           	.BYTE 0x46
                 __base_y_G100:
000303           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x0:
00049c 920a      	ST   -Y,R0
00049d 921a      	ST   -Y,R1
00049e 92fa      	ST   -Y,R15
00049f 936a      	ST   -Y,R22
0004a0 937a      	ST   -Y,R23
0004a1 938a      	ST   -Y,R24
0004a2 939a      	ST   -Y,R25
0004a3 93aa      	ST   -Y,R26
0004a4 93ba      	ST   -Y,R27
0004a5 93ea      	ST   -Y,R30
0004a6 93fa      	ST   -Y,R31
0004a7 b7ef      	IN   R30,SREG
0004a8 93ea      	ST   -Y,R30
0004a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
0004aa d06e      	RCALL __SAVELOCR6
                +
0004ab e000     +LDI R16 , LOW ( 0 )
0004ac e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
0004ad e020     +LDI R18 , LOW ( 0 )
0004ae e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
0004af 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:54 WORDS
                 SUBOPT_0x2:
0004b0 93fa      	ST   -Y,R31
0004b1 93ea      	ST   -Y,R30
0004b2 eea8      	LDI  R26,LOW(1000)
0004b3 e0b3      	LDI  R27,HIGH(1000)
0004b4 df10      	RCALL _displayMessage
0004b5 e0e0      	LDI  R30,LOW(0)
0004b6 93ea      	ST   -Y,R30
0004b7 e0a1      	LDI  R26,LOW(1)
0004b8 cf66      	RJMP _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
                +
0004b9 5f0a     +SUBI R16 , LOW ( - 6 )
0004ba 4f1f     +SBCI R17 , HIGH ( - 6 )
                 	__ADDWRN 16,17,6
0004bb 931a      	ST   -Y,R17
0004bc 930a      	ST   -Y,R16
0004bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0x4:
0004be 93fa      	ST   -Y,R31
0004bf 93ea      	ST   -Y,R30
0004c0 e0a4      	LDI  R26,LOW(4)
0004c1 e0b0      	LDI  R27,0
0004c2 cebe      	RJMP _EE_ReadString
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
                +
0004c3 5f0c     +SUBI R16 , LOW ( - 4 )
0004c4 4f1f     +SBCI R17 , HIGH ( - 4 )
                 	__ADDWRN 16,17,4
0004c5 931a      	ST   -Y,R17
0004c6 930a      	ST   -Y,R16
0004c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
0004c8 01de      	MOVW R26,R28
0004c9 df04      	RCALL _enterValueWithKeypad
0004ca 9730      	SBIW R30,0
0004cb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
0004cc 93fa      	ST   -Y,R31
0004cd 93ea      	ST   -Y,R30
0004ce 01de      	MOVW R26,R28
0004cf 9612      	ADIW R26,2
0004d0 dfb7      	RCALL _strcmp
0004d1 30e0      	CPI  R30,0
0004d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
0004d3 01fe      	MOVW R30,R28
0004d4 9670      	ADIW R30,16
0004d5 93fa      	ST   -Y,R31
0004d6 93ea      	ST   -Y,R30
0004d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:26 WORDS
                 SUBOPT_0x9:
0004d8 93fa      	ST   -Y,R31
0004d9 93ea      	ST   -Y,R30
0004da eea8      	LDI  R26,LOW(1000)
0004db e0b3      	LDI  R27,HIGH(1000)
0004dc cee8      	RJMP _displayMessage
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
                +
0004dd 5f0c     +SUBI R16 , LOW ( - 4 )
0004de 4f1f     +SBCI R17 , HIGH ( - 4 )
                 	__ADDWRN 16,17,4
                +
0004df 5f0c     +SUBI R16 , LOW ( - 4 )
0004e0 4f1f     +SBCI R17 , HIGH ( - 4 )
                 	__ADDWRN 16,17,4
0004e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xB:
0004e2 e8a8      	LDI  R26,LOW(5000)
0004e3 e1b3      	LDI  R27,HIGH(5000)
0004e4 d042      	RCALL _delay_ms
0004e5 98b8      	CBI  0x17,0
0004e6 cf4a      	RJMP _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xC:
0004e7 93fa      	ST   -Y,R31
0004e8 93ea      	ST   -Y,R30
0004e9 e0a6      	LDI  R26,LOW(6)
0004ea e0b0      	LDI  R27,0
0004eb ce95      	RJMP _EE_ReadString
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
                +
0004ec 5f2a     +SUBI R18 , LOW ( - 6 )
0004ed 4f3f     +SBCI R19 , HIGH ( - 6 )
                 	__ADDWRN 18,19,6
0004ee 933a      	ST   -Y,R19
0004ef 932a      	ST   -Y,R18
0004f0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
0004f1 01de      	MOVW R26,R28
0004f2 969c      	ADIW R26,44
0004f3 df94      	RCALL _strcmp
0004f4 30e0      	CPI  R30,0
0004f5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
0004f6 01de      	MOVW R26,R28
0004f7 9696      	ADIW R26,38
0004f8 ded5      	RCALL _enterValueWithKeypad
0004f9 9730      	SBIW R30,0
0004fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x10:
0004fb 93fa      	ST   -Y,R31
0004fc 93ea      	ST   -Y,R30
0004fd eba8      	LDI  R26,LOW(3000)
0004fe e0bb      	LDI  R27,HIGH(3000)
0004ff dec5      	RCALL _displayMessage
                +
000500 e041     +LDI R20 , LOW ( 1 )
000501 e050     +LDI R21 , HIGH ( 1 )
                 	__GETWRN 20,21,1
000502 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
000503 d017      	RCALL __SAVELOCR4
000504 018d      	MOVW R16,R26
                +
000505 812c     +LDD R18 , Y + 4
000506 813d     +LDD R19 , Y + 4 + 1
                 	__GETWRS 18,19,4
000507 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x12:
                +
000508 e0ae     +LDI R26 , 14
000509 9fa2     +MUL R26 , R18
00050a 01f0     +MOVW R30 , R0
00050b 9fa3     +MUL R26 , R19
00050c 0df0     +ADD R31 , R0
                 	__MULBNWRU 18,19,14
00050d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x13:
00050e df03      	RCALL __lcd_write_data
00050f e0a3      	LDI  R26,LOW(3)
000510 e0b0      	LDI  R27,0
000511 c015      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x14:
000512 e3a0      	LDI  R26,LOW(48)
000513 dee9      	RCALL __lcd_write_nibble_G100
                +
000514 ec88     +LDI R24 , LOW ( 200 )
000515 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000516 9701     +SBIW R24 , 1
000517 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000518 9508      	RET
                 
                 ;RUNTIME LIBRARY
                 
                 	.CSEG
                 __SAVELOCR6:
000519 935a      	ST   -Y,R21
                 __SAVELOCR5:
00051a 934a      	ST   -Y,R20
                 __SAVELOCR4:
00051b 933a      	ST   -Y,R19
                 __SAVELOCR3:
00051c 932a      	ST   -Y,R18
                 __SAVELOCR2:
00051d 931a      	ST   -Y,R17
00051e 930a      	ST   -Y,R16
00051f 9508      	RET
                 
                 __LOADLOCR6:
000520 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000521 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000522 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000523 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000524 8119      	LDD  R17,Y+1
000525 8108      	LD   R16,Y
000526 9508      	RET
                 
                 _delay_ms:
000527 9610      	adiw r26,0
000528 f039      	breq __delay_ms1
                 __delay_ms0:
000529 95a8      	wdr
                +
00052a ed80     +LDI R24 , LOW ( 0x7D0 )
00052b e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00052c 9701     +SBIW R24 , 1
00052d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00052e 9711      	sbiw r26,1
00052f f7c9      	brne __delay_ms0
                 __delay_ms1:
000530 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  14 r1 :   3 r2 :   0 r3 :   0 r4 :   4 r5 :   4 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   2 
r16:  43 r17:  47 r18:  34 r19:  28 r20:  14 r21:  14 r22:   8 r23:   5 
r24:  23 r25:   7 r26: 118 r27:  26 r28:  52 r29:   1 r30: 238 r31:  52 
x  :  12 y  : 136 z  :  13 
Registers used: 25 out of 35 (71.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   5 
adiw  :  50 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  15 
brge  :   4 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   1 brmi  :   0 brne  :  38 brpl  :   0 brsh  :   1 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   0 
cbi   :  14 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   3 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   3 cpc   :   4 cpi   :  27 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  15 inc   :   2 jmp   :  22 ld    :  33 ldd   :  24 ldi   : 154 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  23 movw  :  60 
mul   :   2 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   4 
ori   :   7 out   :  24 pop   :   2 push  :   2 rcall : 154 ret   :  41 
reti  :   1 rjmp  :  52 rol   :   0 ror   :   0 sbc   :   0 sbci  :  21 
sbi   :  24 sbic  :   2 sbis  :  12 sbiw  :  21 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  89 std   :   8 sts   :   2 sub   :   1 subi  :  27 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 51 out of 116 (44.0%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a62   2088    570   2658   16384  16.2%
[.dseg] 0x000060 0x000307      0    423    423    1024  41.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 4 warnings
