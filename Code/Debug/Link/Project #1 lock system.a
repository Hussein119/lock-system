;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;char keypad();
;unsigned char EE_Read(unsigned int address);
;void EE_Write(unsigned int address, unsigned char data);
;void EE_WriteString(unsigned int address, const char *str);
;void initializeUsers();
;void displayMessage(char *message, int delay_ms_value);
;int enterValueWithKeypad();

	.DSEG
_0x3:
	.BYTE 0x19
;void main(void)
; 0000 002B {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 002C // Set keypad ports
; 0000 002D DDRC = 0b00000111;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 002E PORTC = 0b11111000;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 002F 
; 0000 0030 // Initialize the LCD
; 0000 0031 lcd_init(16);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0032 
; 0000 0033 // Set the door as input (now by default the door is closed)
; 0000 0034 DDRB .0 = 0;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0035 PORTB .0 = 1; // turn on pull up resistance
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0036 
; 0000 0037 // Initialize user data in EEPROM
; 0000 0038 initializeUsers();
;PCODE: $00000018 VOL: 0
; 0000 0039 
; 0000 003A while (1)
;PCODE: $00000019 VOL: 0
; 0000 003B {
; 0000 003C int enteredID;
; 0000 003D User currentUser;
; 0000 003E // Search for the entered ID in EEPROM
; 0000 003F unsigned int address = 0;
; 0000 0040 int userFound = 0;
; 0000 0041 int i;
; 0000 0042 
; 0000 0043 displayMessage("Enter your ID: ", 1000);
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;	enteredID -> Y+12
;	currentUser -> Y+6
;	address -> Y+4
;	userFound -> Y+2
;	i -> Y+0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0044 
; 0000 0045 enteredID = enterValueWithKeypad();
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0046 
; 0000 0047 for (i = 0; i < sizeof(users); ++i)
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0048 {
; 0000 0049 address += sizeof(users[i].name);  // Increment for name
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 004A currentUser.id = EE_Read(address);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 004B if (currentUser.id == enteredID)
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 004C {
; 0000 004D displayMessage("User Found", 5000);  // NOT PRINTED !!!!!!!!!! why ????
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 004E address += sizeof(users[i].id);    // Increment for ID
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 004F lcd_printf("%d", users[i].pc);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0050 delay_ms(5000);
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0051 currentUser.pc = EE_Read(address); // store current user pc \
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0052 
; 0000 0053 userFound = 1; // set the flag = 1 if we found it
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0054 break;
;PCODE: $0000005F VOL: 0
; 0000 0055 }
; 0000 0056 address += sizeof(users[i].id);    // Increment for ID
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0057 address += sizeof(users[i].pc);    // Increment for PC
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0058 }
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0059 
; 0000 005A if (userFound)
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 005B {
; 0000 005C int enteredPC;
; 0000 005D 
; 0000 005E displayMessage("Enter your PC: ", 1000);
;PCODE: $00000070 VOL: 0
;	enteredID -> Y+14
;	currentUser -> Y+8
;	address -> Y+6
;	userFound -> Y+4
;	i -> Y+2
;	enteredPC -> Y+0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 005F 
; 0000 0060 enteredPC = enterValueWithKeypad();
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0061 
; 0000 0062 if (currentUser.pc == enteredPC)
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0063 {
; 0000 0064 displayMessage("Welcome", 1000);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0065 // Open the door
; 0000 0066 }
; 0000 0067 else
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0068 displayMessage("Sorry wrong PC", 1000);
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0069 }
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 006A else
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 006B {
; 0000 006C displayMessage("Wrong ID", 1000);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 006D // Two peeps alarm
; 0000 006E }
;PCODE: $00000091 VOL: 0
; 0000 006F 
; 0000 0070 delay_ms(2000);
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0071 }
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0072 }
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0

	.DSEG
_0xC:
	.BYTE 0x4B
;char keypad()
; 0000 0075 {

	.CSEG
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0076 while (1)
;PCODE: $0000009C VOL: 0
; 0000 0077 {
; 0000 0078 PORTC .0 = 0;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0079 PORTC .1 = 1;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 007A PORTC .2 = 1;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 007B 
; 0000 007C switch (PINC)
;PCODE: $000000A3 VOL: 0
; 0000 007D {
; 0000 007E case 0b11110110:
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 007F while (PINC .3 == 0);
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0080 return 1;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0081 case 0b11101110:
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0082 while (PINC .4 == 0);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0083 return 4;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0084 case 0b11011110:
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 0085 while (PINC .5 == 0);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 0086 return 7;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0087 case 0b10111110:
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0088 while (PINC .6 == 0);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0089 return 10;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 008A }
;PCODE: $000000CF VOL: 0
; 0000 008B 
; 0000 008C PORTC .0 = 1;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 008D PORTC .1 = 0;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 008E PORTC .2 = 1;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 008F 
; 0000 0090 switch (PINC)
;PCODE: $000000D6 VOL: 0
; 0000 0091 {
; 0000 0092 case 0b11110101:
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 0093 while (PINC .3 == 0);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0094 return 2;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0095 case 0b11101101:
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0096 while (PINC .4 == 0);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 0097 return 5;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 0098 case 0b11011101:
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0099 while (PINC .5 == 0);
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 009A return 8;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 009B case 0b10111101:
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 009C while (PINC .6 == 0);
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 009D return 0;
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 009E }
;PCODE: $00000102 VOL: 0
; 0000 009F 
; 0000 00A0 PORTC .0 = 1;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00A1 PORTC .1 = 1;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00A2 PORTC .2 = 0;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00A3 
; 0000 00A4 switch (PINC)
;PCODE: $00000109 VOL: 0
; 0000 00A5 {
; 0000 00A6 case 0b11110011:
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00A7 while (PINC .3 == 0);
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00A8 return 3;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00A9 case 0b11101011:
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00AA while (PINC .4 == 0);
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 00AB return 6;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00AC case 0b11011011:
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00AD while (PINC .5 == 0);
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00AE return 9;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00AF case 0b10111011:
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00B0 while (PINC .6 == 0);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00B1 return 11;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00B2 }
;PCODE: $00000135 VOL: 0
; 0000 00B3 }
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 00B4 }
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;unsigned char EE_Read(unsigned int address)
; 0000 00B7 {
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00B8 while (EECR .1 == 1); // Wait till EEPROM is ready
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;	address -> R16,R17
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00B9 EEAR = address;       // Prepare the address you want to read from
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00BA EECR .0 = 1;          // Execute read command
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00BB return EEDR;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00BC }
;PCODE: $0000014C VOL: 0
;void EE_Write(unsigned int address, unsigned char data)
; 0000 00BF {
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00C0 while (EECR .1 == 1); // Wait till EEPROM is ready
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;	address -> R18,R19
;	data -> R17
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 00C1 EEAR = address;       // Prepare the address you want to read from
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 00C2 EEDR = data;          // Prepare the data you want to write in the address above
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00C3 EECR .2 = 1;          // Master write enable
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 00C4 EECR .1 = 1;          // Write Enable
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00C5 }
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;void EE_WriteString(unsigned int address, const char *str)
; 0000 00C8 {
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 00C9 // Write each character of the string to EEPROM
; 0000 00CA while (*str)
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;	address -> R18,R19
;	*str -> R16,R17
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 00CB EE_Write(address++, *str++);
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 00CD EE_Write(address, '\0');
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 00CE }
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;void initializeUsers()
; 0000 00D2 {
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 00D3 unsigned int address = 0;
; 0000 00D4 int i;
; 0000 00D5 for (i = 0; i < sizeof(users); ++i)
;PCODE: $00000184 VOL: 0
;	address -> R16,R17
;	i -> R18,R19
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 00D6 {
; 0000 00D7 EE_WriteString(address, users[i].name);
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 00D8 address += sizeof(users[i].name);  // Increment for name
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 00D9 
; 0000 00DA EE_Write(address, users[i].id);
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 00DB address += sizeof(users[i].id);    // Increment for ID
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 00DC 
; 0000 00DD EE_Write(address, users[i].pc);
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 00DE address += sizeof(users[i].pc);    // Increment for PC
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 00DF }
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 00E0 }
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;void displayMessage(char *message, int delay_ms_value)
; 0000 00E4 {
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 00E5 lcd_clear();
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;	*message -> R18,R19
;	delay_ms_value -> R16,R17
;PCODE: $000001BB VOL: 0
; 0000 00E6 lcd_puts(message);
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 00E7 delay_ms(delay_ms_value);
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 00E8 }
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;int enterValueWithKeypad()
; 0000 00EB {
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 00EC char digit1 = keypad();
; 0000 00ED char digit2 = keypad();
; 0000 00EE char digit3 = keypad();
; 0000 00EF 
; 0000 00F0 lcd_putchar(digit1 + '0');
;PCODE: $000001C6 VOL: 0
;	digit1 -> R17
;	digit2 -> R16
;	digit3 -> R19
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 00F1 
; 0000 00F2 lcd_putchar(digit2 + '0');
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 00F3 
; 0000 00F4 lcd_putchar(digit3 + '0');
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 00F5 
; 0000 00F6 delay_ms(1000);
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
; 0000 00F7 
; 0000 00F8 return (digit1 * 100) + (digit2 * 10) + digit3;
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 00F9 }
;PCODE: $000001E4 VOL: 0
